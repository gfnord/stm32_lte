
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

08000000 <_vector_table>:
 8000000:	20000738 	.word	0x20000738
 8000004:	080041d5 	.word	0x080041d5
 8000008:	0800422d 	.word	0x0800422d
 800000c:	08004079 	.word	0x08004079
 8000010:	08004079 	.word	0x08004079
 8000014:	08004079 	.word	0x08004079
 8000018:	08004079 	.word	0x08004079
 800001c:	08004079 	.word	0x08004079
 8000020:	08004079 	.word	0x08004079
 8000024:	08004079 	.word	0x08004079
 8000028:	08004079 	.word	0x08004079
 800002c:	08003d19 	.word	0x08003d19
 8000030:	08004079 	.word	0x08004079
 8000034:	08004079 	.word	0x08004079
 8000038:	08003cd5 	.word	0x08003cd5
 800003c:	08003b29 	.word	0x08003b29

08000040 <_irq_vector_table>:
 8000040:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 8000050:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 8000060:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 8000070:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 8000080:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 8000090:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 80000a0:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 80000b0:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 80000c0:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 80000d0:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 80000e0:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 80000f0:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 8000100:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 8000110:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 8000120:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 8000130:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 8000140:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 8000150:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 8000160:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 8000170:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 8000180:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 8000190:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 80001a0:	080041ad 080041ad 080041ad 080041ad     .A...A...A...A..
 80001b0:	080041ad 080041ad 080041ad              .A...A...A..

080001bc <gmtime_r>:
 80001bc:	6800      	ldr	r0, [r0, #0]
 80001be:	4b65      	ldr	r3, [pc, #404]	; (8000354 <gmtime_r+0x198>)
 80001c0:	fb83 2300 	smull	r2, r3, r3, r0
 80001c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80001c8:	4403      	add	r3, r0
 80001ca:	4d63      	ldr	r5, [pc, #396]	; (8000358 <gmtime_r+0x19c>)
 80001cc:	17c2      	asrs	r2, r0, #31
 80001ce:	ebc2 4323 	rsb	r3, r2, r3, asr #16
 80001d2:	fb05 0513 	mls	r5, r5, r3, r0
 80001d6:	2d00      	cmp	r5, #0
 80001d8:	f2c0 80b3 	blt.w	8000342 <gmtime_r+0x186>
 80001dc:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 80001e0:	f603 236c 	addw	r3, r3, #2668	; 0xa6c
 80001e4:	4e5d      	ldr	r6, [pc, #372]	; (800035c <gmtime_r+0x1a0>)
 80001e6:	485e      	ldr	r0, [pc, #376]	; (8000360 <gmtime_r+0x1a4>)
 80001e8:	4a5e      	ldr	r2, [pc, #376]	; (8000364 <gmtime_r+0x1a8>)
 80001ea:	4c5f      	ldr	r4, [pc, #380]	; (8000368 <gmtime_r+0x1ac>)
 80001ec:	f8df c18c 	ldr.w	ip, [pc, #396]	; 800037c <gmtime_r+0x1c0>
 80001f0:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8000380 <gmtime_r+0x1c4>
 80001f4:	fb86 7603 	smull	r7, r6, r6, r3
 80001f8:	17df      	asrs	r7, r3, #31
 80001fa:	ebc7 36e6 	rsb	r6, r7, r6, asr #15
 80001fe:	fb00 3006 	mla	r0, r0, r6, r3
 8000202:	0887      	lsrs	r7, r0, #2
 8000204:	fba2 8207 	umull	r8, r2, r2, r7
 8000208:	eb00 22d2 	add.w	r2, r0, r2, lsr #11
 800020c:	fba4 8707 	umull	r8, r7, r4, r7
 8000210:	ea4f 1810 	mov.w	r8, r0, lsr #4
 8000214:	eba2 12d7 	sub.w	r2, r2, r7, lsr #7
 8000218:	fbac c708 	umull	ip, r7, ip, r8
 800021c:	eba2 1217 	sub.w	r2, r2, r7, lsr #4
 8000220:	f8df c160 	ldr.w	ip, [pc, #352]	; 8000384 <gmtime_r+0x1c8>
 8000224:	4f51      	ldr	r7, [pc, #324]	; (800036c <gmtime_r+0x1b0>)
 8000226:	fbae 8e02 	umull	r8, lr, lr, r2
 800022a:	fbac 9c02 	umull	r9, ip, ip, r2
 800022e:	eba2 080e 	sub.w	r8, r2, lr
 8000232:	0892      	lsrs	r2, r2, #2
 8000234:	eb0e 0e58 	add.w	lr, lr, r8, lsr #1
 8000238:	eb00 30dc 	add.w	r0, r0, ip, lsr #15
 800023c:	fba4 4202 	umull	r4, r2, r4, r2
 8000240:	eba0 12d2 	sub.w	r2, r0, r2, lsr #7
 8000244:	ea4f 241e 	mov.w	r4, lr, lsr #8
 8000248:	f240 106d 	movw	r0, #365	; 0x16d
 800024c:	fb00 2214 	mls	r2, r0, r4, r2
 8000250:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8000388 <gmtime_r+0x1cc>
 8000254:	fb87 0e05 	smull	r0, lr, r7, r5
 8000258:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800025c:	ea4f 7ce5 	mov.w	ip, r5, asr #31
 8000260:	44ae      	add	lr, r5
 8000262:	3002      	adds	r0, #2
 8000264:	ebcc 2eee 	rsb	lr, ip, lr, asr #11
 8000268:	4f41      	ldr	r7, [pc, #260]	; (8000370 <gmtime_r+0x1b4>)
 800026a:	f8c1 e008 	str.w	lr, [r1, #8]
 800026e:	f103 0c03 	add.w	ip, r3, #3
 8000272:	fba8 3000 	umull	r3, r0, r8, r0
 8000276:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800027a:	fb03 551e 	mls	r5, r3, lr, r5
 800027e:	4b3d      	ldr	r3, [pc, #244]	; (8000374 <gmtime_r+0x1b8>)
 8000280:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800038c <gmtime_r+0x1d0>
 8000284:	fb87 e705 	smull	lr, r7, r7, r5
 8000288:	fb83 390c 	smull	r3, r9, r3, ip
 800028c:	197b      	adds	r3, r7, r5
 800028e:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8000292:	fb07 4606 	mla	r6, r7, r6, r4
 8000296:	17ef      	asrs	r7, r5, #31
 8000298:	44e1      	add	r9, ip
 800029a:	ebc7 1363 	rsb	r3, r7, r3, asr #5
 800029e:	ea4f 77ec 	mov.w	r7, ip, asr #31
 80002a2:	09c0      	lsrs	r0, r0, #7
 80002a4:	ebc7 07a9 	rsb	r7, r7, r9, asr #2
 80002a8:	2809      	cmp	r0, #9
 80002aa:	eb00 0ec0 	add.w	lr, r0, r0, lsl #3
 80002ae:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 80002b2:	ebac 0707 	sub.w	r7, ip, r7
 80002b6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80002ba:	bf8c      	ite	hi
 80002bc:	f06f 0c09 	mvnhi.w	ip, #9
 80002c0:	f04f 0c02 	movls.w	ip, #2
 80002c4:	4460      	add	r0, ip
 80002c6:	f10e 0e02 	add.w	lr, lr, #2
 80002ca:	ebc3 1c03 	rsb	ip, r3, r3, lsl #4
 80002ce:	fba8 8e0e 	umull	r8, lr, r8, lr
 80002d2:	eba5 058c 	sub.w	r5, r5, ip, lsl #2
 80002d6:	f102 0801 	add.w	r8, r2, #1
 80002da:	2801      	cmp	r0, #1
 80002dc:	bf98      	it	ls
 80002de:	3601      	addls	r6, #1
 80002e0:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
 80002e4:	eba8 0e9e 	sub.w	lr, r8, lr, lsr #2
 80002e8:	604b      	str	r3, [r1, #4]
 80002ea:	600d      	str	r5, [r1, #0]
 80002ec:	618f      	str	r7, [r1, #24]
 80002ee:	d225      	bcs.n	800033c <gmtime_r+0x180>
 80002f0:	07a3      	lsls	r3, r4, #30
 80002f2:	d018      	beq.n	8000326 <gmtime_r+0x16a>
 80002f4:	4b20      	ldr	r3, [pc, #128]	; (8000378 <gmtime_r+0x1bc>)
 80002f6:	fba3 5304 	umull	r5, r3, r3, r4
 80002fa:	09db      	lsrs	r3, r3, #7
 80002fc:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8000300:	fb05 4413 	mls	r4, r5, r3, r4
 8000304:	fab4 f484 	clz	r4, r4
 8000308:	0964      	lsrs	r4, r4, #5
 800030a:	323b      	adds	r2, #59	; 0x3b
 800030c:	4422      	add	r2, r4
 800030e:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
 8000312:	2300      	movs	r3, #0
 8000314:	6108      	str	r0, [r1, #16]
 8000316:	614e      	str	r6, [r1, #20]
 8000318:	61ca      	str	r2, [r1, #28]
 800031a:	f8c1 e00c 	str.w	lr, [r1, #12]
 800031e:	620b      	str	r3, [r1, #32]
 8000320:	4608      	mov	r0, r1
 8000322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000326:	4b14      	ldr	r3, [pc, #80]	; (8000378 <gmtime_r+0x1bc>)
 8000328:	fba3 5304 	umull	r5, r3, r3, r4
 800032c:	095b      	lsrs	r3, r3, #5
 800032e:	2564      	movs	r5, #100	; 0x64
 8000330:	fb05 4313 	mls	r3, r5, r3, r4
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0dd      	beq.n	80002f4 <gmtime_r+0x138>
 8000338:	2401      	movs	r4, #1
 800033a:	e7e6      	b.n	800030a <gmtime_r+0x14e>
 800033c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8000340:	e7e5      	b.n	800030e <gmtime_r+0x152>
 8000342:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
 8000346:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 800034a:	f505 75c0 	add.w	r5, r5, #384	; 0x180
 800034e:	f603 236b 	addw	r3, r3, #2667	; 0xa6b
 8000352:	e747      	b.n	80001e4 <gmtime_r+0x28>
 8000354:	c22e4507 	.word	0xc22e4507
 8000358:	00015180 	.word	0x00015180
 800035c:	396b06bd 	.word	0x396b06bd
 8000360:	fffdc54f 	.word	0xfffdc54f
 8000364:	396b207f 	.word	0x396b207f
 8000368:	59c67cd9 	.word	0x59c67cd9
 800036c:	91a2b3c5 	.word	0x91a2b3c5
 8000370:	88888889 	.word	0x88888889
 8000374:	92492493 	.word	0x92492493
 8000378:	51eb851f 	.word	0x51eb851f
 800037c:	0072d641 	.word	0x0072d641
 8000380:	6719f361 	.word	0x6719f361
 8000384:	e5d32b1f 	.word	0xe5d32b1f
 8000388:	d62b80d7 	.word	0xd62b80d7
 800038c:	cccccccd 	.word	0xcccccccd

08000390 <memcpy>:
 8000390:	4684      	mov	ip, r0
 8000392:	ea41 0300 	orr.w	r3, r1, r0
 8000396:	f013 0303 	ands.w	r3, r3, #3
 800039a:	d16d      	bne.n	8000478 <memcpy+0xe8>
 800039c:	3a40      	subs	r2, #64	; 0x40
 800039e:	d341      	bcc.n	8000424 <memcpy+0x94>
 80003a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a4:	f840 3b04 	str.w	r3, [r0], #4
 80003a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003ac:	f840 3b04 	str.w	r3, [r0], #4
 80003b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b4:	f840 3b04 	str.w	r3, [r0], #4
 80003b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003bc:	f840 3b04 	str.w	r3, [r0], #4
 80003c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c4:	f840 3b04 	str.w	r3, [r0], #4
 80003c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003cc:	f840 3b04 	str.w	r3, [r0], #4
 80003d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d4:	f840 3b04 	str.w	r3, [r0], #4
 80003d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003dc:	f840 3b04 	str.w	r3, [r0], #4
 80003e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e4:	f840 3b04 	str.w	r3, [r0], #4
 80003e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003ec:	f840 3b04 	str.w	r3, [r0], #4
 80003f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f4:	f840 3b04 	str.w	r3, [r0], #4
 80003f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003fc:	f840 3b04 	str.w	r3, [r0], #4
 8000400:	f851 3b04 	ldr.w	r3, [r1], #4
 8000404:	f840 3b04 	str.w	r3, [r0], #4
 8000408:	f851 3b04 	ldr.w	r3, [r1], #4
 800040c:	f840 3b04 	str.w	r3, [r0], #4
 8000410:	f851 3b04 	ldr.w	r3, [r1], #4
 8000414:	f840 3b04 	str.w	r3, [r0], #4
 8000418:	f851 3b04 	ldr.w	r3, [r1], #4
 800041c:	f840 3b04 	str.w	r3, [r0], #4
 8000420:	3a40      	subs	r2, #64	; 0x40
 8000422:	d2bd      	bcs.n	80003a0 <memcpy+0x10>
 8000424:	3230      	adds	r2, #48	; 0x30
 8000426:	d311      	bcc.n	800044c <memcpy+0xbc>
 8000428:	f851 3b04 	ldr.w	r3, [r1], #4
 800042c:	f840 3b04 	str.w	r3, [r0], #4
 8000430:	f851 3b04 	ldr.w	r3, [r1], #4
 8000434:	f840 3b04 	str.w	r3, [r0], #4
 8000438:	f851 3b04 	ldr.w	r3, [r1], #4
 800043c:	f840 3b04 	str.w	r3, [r0], #4
 8000440:	f851 3b04 	ldr.w	r3, [r1], #4
 8000444:	f840 3b04 	str.w	r3, [r0], #4
 8000448:	3a10      	subs	r2, #16
 800044a:	d2ed      	bcs.n	8000428 <memcpy+0x98>
 800044c:	320c      	adds	r2, #12
 800044e:	d305      	bcc.n	800045c <memcpy+0xcc>
 8000450:	f851 3b04 	ldr.w	r3, [r1], #4
 8000454:	f840 3b04 	str.w	r3, [r0], #4
 8000458:	3a04      	subs	r2, #4
 800045a:	d2f9      	bcs.n	8000450 <memcpy+0xc0>
 800045c:	3204      	adds	r2, #4
 800045e:	d008      	beq.n	8000472 <memcpy+0xe2>
 8000460:	07d2      	lsls	r2, r2, #31
 8000462:	bf1c      	itt	ne
 8000464:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000468:	f800 3b01 	strbne.w	r3, [r0], #1
 800046c:	d301      	bcc.n	8000472 <memcpy+0xe2>
 800046e:	880b      	ldrh	r3, [r1, #0]
 8000470:	8003      	strh	r3, [r0, #0]
 8000472:	4660      	mov	r0, ip
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	2a08      	cmp	r2, #8
 800047a:	d313      	bcc.n	80004a4 <memcpy+0x114>
 800047c:	078b      	lsls	r3, r1, #30
 800047e:	d08d      	beq.n	800039c <memcpy+0xc>
 8000480:	f010 0303 	ands.w	r3, r0, #3
 8000484:	d08a      	beq.n	800039c <memcpy+0xc>
 8000486:	f1c3 0304 	rsb	r3, r3, #4
 800048a:	1ad2      	subs	r2, r2, r3
 800048c:	07db      	lsls	r3, r3, #31
 800048e:	bf1c      	itt	ne
 8000490:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000494:	f800 3b01 	strbne.w	r3, [r0], #1
 8000498:	d380      	bcc.n	800039c <memcpy+0xc>
 800049a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800049e:	f820 3b02 	strh.w	r3, [r0], #2
 80004a2:	e77b      	b.n	800039c <memcpy+0xc>
 80004a4:	3a04      	subs	r2, #4
 80004a6:	d3d9      	bcc.n	800045c <memcpy+0xcc>
 80004a8:	3a01      	subs	r2, #1
 80004aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80004ae:	f800 3b01 	strb.w	r3, [r0], #1
 80004b2:	d2f9      	bcs.n	80004a8 <memcpy+0x118>
 80004b4:	780b      	ldrb	r3, [r1, #0]
 80004b6:	7003      	strb	r3, [r0, #0]
 80004b8:	784b      	ldrb	r3, [r1, #1]
 80004ba:	7043      	strb	r3, [r0, #1]
 80004bc:	788b      	ldrb	r3, [r1, #2]
 80004be:	7083      	strb	r3, [r0, #2]
 80004c0:	4660      	mov	r0, ip
 80004c2:	4770      	bx	lr

080004c4 <memset>:
 80004c4:	b470      	push	{r4, r5, r6}
 80004c6:	0786      	lsls	r6, r0, #30
 80004c8:	d046      	beq.n	8000558 <memset+0x94>
 80004ca:	1e54      	subs	r4, r2, #1
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	d041      	beq.n	8000554 <memset+0x90>
 80004d0:	b2ca      	uxtb	r2, r1
 80004d2:	4603      	mov	r3, r0
 80004d4:	e002      	b.n	80004dc <memset+0x18>
 80004d6:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 80004da:	d33b      	bcc.n	8000554 <memset+0x90>
 80004dc:	f803 2b01 	strb.w	r2, [r3], #1
 80004e0:	079d      	lsls	r5, r3, #30
 80004e2:	d1f8      	bne.n	80004d6 <memset+0x12>
 80004e4:	2c03      	cmp	r4, #3
 80004e6:	d92e      	bls.n	8000546 <memset+0x82>
 80004e8:	b2cd      	uxtb	r5, r1
 80004ea:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80004ee:	2c0f      	cmp	r4, #15
 80004f0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80004f4:	d919      	bls.n	800052a <memset+0x66>
 80004f6:	f103 0210 	add.w	r2, r3, #16
 80004fa:	4626      	mov	r6, r4
 80004fc:	3e10      	subs	r6, #16
 80004fe:	2e0f      	cmp	r6, #15
 8000500:	f842 5c10 	str.w	r5, [r2, #-16]
 8000504:	f842 5c0c 	str.w	r5, [r2, #-12]
 8000508:	f842 5c08 	str.w	r5, [r2, #-8]
 800050c:	f842 5c04 	str.w	r5, [r2, #-4]
 8000510:	f102 0210 	add.w	r2, r2, #16
 8000514:	d8f2      	bhi.n	80004fc <memset+0x38>
 8000516:	f1a4 0210 	sub.w	r2, r4, #16
 800051a:	f022 020f 	bic.w	r2, r2, #15
 800051e:	f004 040f 	and.w	r4, r4, #15
 8000522:	3210      	adds	r2, #16
 8000524:	2c03      	cmp	r4, #3
 8000526:	4413      	add	r3, r2
 8000528:	d90d      	bls.n	8000546 <memset+0x82>
 800052a:	461e      	mov	r6, r3
 800052c:	4622      	mov	r2, r4
 800052e:	3a04      	subs	r2, #4
 8000530:	2a03      	cmp	r2, #3
 8000532:	f846 5b04 	str.w	r5, [r6], #4
 8000536:	d8fa      	bhi.n	800052e <memset+0x6a>
 8000538:	1f22      	subs	r2, r4, #4
 800053a:	f022 0203 	bic.w	r2, r2, #3
 800053e:	3204      	adds	r2, #4
 8000540:	4413      	add	r3, r2
 8000542:	f004 0403 	and.w	r4, r4, #3
 8000546:	b12c      	cbz	r4, 8000554 <memset+0x90>
 8000548:	b2c9      	uxtb	r1, r1
 800054a:	441c      	add	r4, r3
 800054c:	f803 1b01 	strb.w	r1, [r3], #1
 8000550:	429c      	cmp	r4, r3
 8000552:	d1fb      	bne.n	800054c <memset+0x88>
 8000554:	bc70      	pop	{r4, r5, r6}
 8000556:	4770      	bx	lr
 8000558:	4614      	mov	r4, r2
 800055a:	4603      	mov	r3, r0
 800055c:	e7c2      	b.n	80004e4 <memset+0x20>
 800055e:	bf00      	nop

08000560 <validate_structure>:
 8000560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000564:	6801      	ldr	r1, [r0, #0]
 8000566:	293b      	cmp	r1, #59	; 0x3b
 8000568:	b082      	sub	sp, #8
 800056a:	4604      	mov	r4, r0
 800056c:	f200 80b6 	bhi.w	80006dc <validate_structure+0x17c>
 8000570:	6841      	ldr	r1, [r0, #4]
 8000572:	293b      	cmp	r1, #59	; 0x3b
 8000574:	f200 80a5 	bhi.w	80006c2 <validate_structure+0x162>
 8000578:	68a1      	ldr	r1, [r4, #8]
 800057a:	2917      	cmp	r1, #23
 800057c:	f200 8094 	bhi.w	80006a8 <validate_structure+0x148>
 8000580:	6921      	ldr	r1, [r4, #16]
 8000582:	290b      	cmp	r1, #11
 8000584:	f200 8083 	bhi.w	800068e <validate_structure+0x12e>
 8000588:	6963      	ldr	r3, [r4, #20]
 800058a:	079f      	lsls	r7, r3, #30
 800058c:	d133      	bne.n	80005f6 <validate_structure+0x96>
 800058e:	4874      	ldr	r0, [pc, #464]	; (8000760 <validate_structure+0x200>)
 8000590:	17da      	asrs	r2, r3, #31
 8000592:	fb80 6503 	smull	r6, r5, r0, r3
 8000596:	ebc2 1265 	rsb	r2, r2, r5, asr #5
 800059a:	2564      	movs	r5, #100	; 0x64
 800059c:	fb05 3212 	mls	r2, r5, r2, r3
 80005a0:	2a00      	cmp	r2, #0
 80005a2:	d064      	beq.n	800066e <validate_structure+0x10e>
 80005a4:	68e3      	ldr	r3, [r4, #12]
 80005a6:	4d6f      	ldr	r5, [pc, #444]	; (8000764 <validate_structure+0x204>)
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	f04f 061d 	mov.w	r6, #29
 80005ae:	dc27      	bgt.n	8000600 <validate_structure+0xa0>
 80005b0:	4f6b      	ldr	r7, [pc, #428]	; (8000760 <validate_structure+0x200>)
 80005b2:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80005b6:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80005ba:	e007      	b.n	80005cc <validate_structure+0x6c>
 80005bc:	2901      	cmp	r1, #1
 80005be:	bf14      	ite	ne
 80005c0:	f855 2021 	ldrne.w	r2, [r5, r1, lsl #2]
 80005c4:	4632      	moveq	r2, r6
 80005c6:	4413      	add	r3, r2
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	dc37      	bgt.n	800063c <validate_structure+0xdc>
 80005cc:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
 80005d0:	d2f4      	bcs.n	80005bc <validate_structure+0x5c>
 80005d2:	6961      	ldr	r1, [r4, #20]
 80005d4:	1e4a      	subs	r2, r1, #1
 80005d6:	0796      	lsls	r6, r2, #30
 80005d8:	6162      	str	r2, [r4, #20]
 80005da:	f040 808c 	bne.w	80006f6 <validate_structure+0x196>
 80005de:	fb87 0602 	smull	r0, r6, r7, r2
 80005e2:	17d0      	asrs	r0, r2, #31
 80005e4:	ebc0 1066 	rsb	r0, r0, r6, asr #5
 80005e8:	fb0e 2210 	mls	r2, lr, r0, r2
 80005ec:	2a00      	cmp	r2, #0
 80005ee:	f000 8086 	beq.w	80006fe <validate_structure+0x19e>
 80005f2:	261d      	movs	r6, #29
 80005f4:	e080      	b.n	80006f8 <validate_structure+0x198>
 80005f6:	261c      	movs	r6, #28
 80005f8:	68e3      	ldr	r3, [r4, #12]
 80005fa:	4d5a      	ldr	r5, [pc, #360]	; (8000764 <validate_structure+0x204>)
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	ddd7      	ble.n	80005b0 <validate_structure+0x50>
 8000600:	f8df e15c 	ldr.w	lr, [pc, #348]	; 8000760 <validate_structure+0x200>
 8000604:	2700      	movs	r7, #0
 8000606:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800060a:	f44f 78c8 	mov.w	r8, #400	; 0x190
 800060e:	1c4a      	adds	r2, r1, #1
 8000610:	e00b      	b.n	800062a <validate_structure+0xca>
 8000612:	f855 0021 	ldr.w	r0, [r5, r1, lsl #2]
 8000616:	4298      	cmp	r0, r3
 8000618:	eba3 0300 	sub.w	r3, r3, r0
 800061c:	da10      	bge.n	8000640 <validate_structure+0xe0>
 800061e:	2a0c      	cmp	r2, #12
 8000620:	60e3      	str	r3, [r4, #12]
 8000622:	6122      	str	r2, [r4, #16]
 8000624:	d00f      	beq.n	8000646 <validate_structure+0xe6>
 8000626:	3101      	adds	r1, #1
 8000628:	3201      	adds	r2, #1
 800062a:	2901      	cmp	r1, #1
 800062c:	d1f1      	bne.n	8000612 <validate_structure+0xb2>
 800062e:	429e      	cmp	r6, r3
 8000630:	eba3 0306 	sub.w	r3, r3, r6
 8000634:	da04      	bge.n	8000640 <validate_structure+0xe0>
 8000636:	60e3      	str	r3, [r4, #12]
 8000638:	6122      	str	r2, [r4, #16]
 800063a:	e7f4      	b.n	8000626 <validate_structure+0xc6>
 800063c:	6121      	str	r1, [r4, #16]
 800063e:	60e3      	str	r3, [r4, #12]
 8000640:	b002      	add	sp, #8
 8000642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000646:	6961      	ldr	r1, [r4, #20]
 8000648:	6127      	str	r7, [r4, #16]
 800064a:	1c4a      	adds	r2, r1, #1
 800064c:	0790      	lsls	r0, r2, #30
 800064e:	6162      	str	r2, [r4, #20]
 8000650:	d002      	beq.n	8000658 <validate_structure+0xf8>
 8000652:	261c      	movs	r6, #28
 8000654:	2100      	movs	r1, #0
 8000656:	e7da      	b.n	800060e <validate_structure+0xae>
 8000658:	fb8e 0602 	smull	r0, r6, lr, r2
 800065c:	17d0      	asrs	r0, r2, #31
 800065e:	ebc0 1066 	rsb	r0, r0, r6, asr #5
 8000662:	fb0c 2210 	mls	r2, ip, r0, r2
 8000666:	2a00      	cmp	r2, #0
 8000668:	d057      	beq.n	800071a <validate_structure+0x1ba>
 800066a:	261d      	movs	r6, #29
 800066c:	e7f2      	b.n	8000654 <validate_structure+0xf4>
 800066e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8000672:	fb80 2003 	smull	r2, r0, r0, r3
 8000676:	17da      	asrs	r2, r3, #31
 8000678:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
 800067c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000680:	fb02 3310 	mls	r3, r2, r0, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	bf14      	ite	ne
 8000688:	261c      	movne	r6, #28
 800068a:	261d      	moveq	r6, #29
 800068c:	e7b4      	b.n	80005f8 <validate_structure+0x98>
 800068e:	220c      	movs	r2, #12
 8000690:	4668      	mov	r0, sp
 8000692:	f000 febf 	bl	8001414 <div>
 8000696:	6963      	ldr	r3, [r4, #20]
 8000698:	9a00      	ldr	r2, [sp, #0]
 800069a:	9901      	ldr	r1, [sp, #4]
 800069c:	4413      	add	r3, r2
 800069e:	2900      	cmp	r1, #0
 80006a0:	6163      	str	r3, [r4, #20]
 80006a2:	db57      	blt.n	8000754 <validate_structure+0x1f4>
 80006a4:	6121      	str	r1, [r4, #16]
 80006a6:	e770      	b.n	800058a <validate_structure+0x2a>
 80006a8:	2218      	movs	r2, #24
 80006aa:	4668      	mov	r0, sp
 80006ac:	f000 feb2 	bl	8001414 <div>
 80006b0:	e89d 0006 	ldmia.w	sp, {r1, r2}
 80006b4:	68e3      	ldr	r3, [r4, #12]
 80006b6:	2a00      	cmp	r2, #0
 80006b8:	440b      	add	r3, r1
 80006ba:	60e3      	str	r3, [r4, #12]
 80006bc:	db45      	blt.n	800074a <validate_structure+0x1ea>
 80006be:	60a2      	str	r2, [r4, #8]
 80006c0:	e75e      	b.n	8000580 <validate_structure+0x20>
 80006c2:	223c      	movs	r2, #60	; 0x3c
 80006c4:	4668      	mov	r0, sp
 80006c6:	f000 fea5 	bl	8001414 <div>
 80006ca:	68a2      	ldr	r2, [r4, #8]
 80006cc:	9900      	ldr	r1, [sp, #0]
 80006ce:	9b01      	ldr	r3, [sp, #4]
 80006d0:	4411      	add	r1, r2
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	60a1      	str	r1, [r4, #8]
 80006d6:	db33      	blt.n	8000740 <validate_structure+0x1e0>
 80006d8:	6063      	str	r3, [r4, #4]
 80006da:	e74e      	b.n	800057a <validate_structure+0x1a>
 80006dc:	223c      	movs	r2, #60	; 0x3c
 80006de:	4668      	mov	r0, sp
 80006e0:	f000 fe98 	bl	8001414 <div>
 80006e4:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80006e8:	6861      	ldr	r1, [r4, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	4411      	add	r1, r2
 80006ee:	6061      	str	r1, [r4, #4]
 80006f0:	db21      	blt.n	8000736 <validate_structure+0x1d6>
 80006f2:	6023      	str	r3, [r4, #0]
 80006f4:	e73d      	b.n	8000572 <validate_structure+0x12>
 80006f6:	261c      	movs	r6, #28
 80006f8:	210b      	movs	r1, #11
 80006fa:	221f      	movs	r2, #31
 80006fc:	e763      	b.n	80005c6 <validate_structure+0x66>
 80006fe:	f201 716b 	addw	r1, r1, #1899	; 0x76b
 8000702:	fb87 2001 	smull	r2, r0, r7, r1
 8000706:	17ca      	asrs	r2, r1, #31
 8000708:	ebc2 12e0 	rsb	r2, r2, r0, asr #7
 800070c:	fb0c 1112 	mls	r1, ip, r2, r1
 8000710:	2900      	cmp	r1, #0
 8000712:	bf14      	ite	ne
 8000714:	261c      	movne	r6, #28
 8000716:	261d      	moveq	r6, #29
 8000718:	e7ee      	b.n	80006f8 <validate_structure+0x198>
 800071a:	f201 716d 	addw	r1, r1, #1901	; 0x76d
 800071e:	fb8e 2001 	smull	r2, r0, lr, r1
 8000722:	17ca      	asrs	r2, r1, #31
 8000724:	ebc2 12e0 	rsb	r2, r2, r0, asr #7
 8000728:	fb08 1112 	mls	r1, r8, r2, r1
 800072c:	2900      	cmp	r1, #0
 800072e:	bf14      	ite	ne
 8000730:	261c      	movne	r6, #28
 8000732:	261d      	moveq	r6, #29
 8000734:	e78e      	b.n	8000654 <validate_structure+0xf4>
 8000736:	333c      	adds	r3, #60	; 0x3c
 8000738:	3901      	subs	r1, #1
 800073a:	6023      	str	r3, [r4, #0]
 800073c:	6061      	str	r1, [r4, #4]
 800073e:	e718      	b.n	8000572 <validate_structure+0x12>
 8000740:	333c      	adds	r3, #60	; 0x3c
 8000742:	3901      	subs	r1, #1
 8000744:	6063      	str	r3, [r4, #4]
 8000746:	60a1      	str	r1, [r4, #8]
 8000748:	e717      	b.n	800057a <validate_structure+0x1a>
 800074a:	3218      	adds	r2, #24
 800074c:	3b01      	subs	r3, #1
 800074e:	60a2      	str	r2, [r4, #8]
 8000750:	60e3      	str	r3, [r4, #12]
 8000752:	e715      	b.n	8000580 <validate_structure+0x20>
 8000754:	310c      	adds	r1, #12
 8000756:	3b01      	subs	r3, #1
 8000758:	6121      	str	r1, [r4, #16]
 800075a:	6163      	str	r3, [r4, #20]
 800075c:	e715      	b.n	800058a <validate_structure+0x2a>
 800075e:	bf00      	nop
 8000760:	51eb851f 	.word	0x51eb851f
 8000764:	080059d4 	.word	0x080059d4

08000768 <mktime>:
 8000768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800076c:	4606      	mov	r6, r0
 800076e:	f000 feb3 	bl	80014d8 <__gettzinfo>
 8000772:	4680      	mov	r8, r0
 8000774:	4630      	mov	r0, r6
 8000776:	f7ff fef3 	bl	8000560 <validate_structure>
 800077a:	4ccf      	ldr	r4, [pc, #828]	; (8000ab8 <mktime+0x350>)
 800077c:	6937      	ldr	r7, [r6, #16]
 800077e:	6873      	ldr	r3, [r6, #4]
 8000780:	68f1      	ldr	r1, [r6, #12]
 8000782:	6832      	ldr	r2, [r6, #0]
 8000784:	68b0      	ldr	r0, [r6, #8]
 8000786:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800078a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800078e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8000790:	3901      	subs	r1, #1
 8000792:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000796:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
 800079a:	2f01      	cmp	r7, #1
 800079c:	440d      	add	r5, r1
 800079e:	fb0e 3e00 	mla	lr, lr, r0, r3
 80007a2:	6971      	ldr	r1, [r6, #20]
 80007a4:	dd02      	ble.n	80007ac <mktime+0x44>
 80007a6:	0788      	lsls	r0, r1, #30
 80007a8:	f000 80c8 	beq.w	800093c <mktime+0x1d4>
 80007ac:	f501 531c 	add.w	r3, r1, #9984	; 0x2700
 80007b0:	3310      	adds	r3, #16
 80007b2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80007b6:	4293      	cmp	r3, r2
 80007b8:	61f5      	str	r5, [r6, #28]
 80007ba:	f200 8179 	bhi.w	8000ab0 <mktime+0x348>
 80007be:	2946      	cmp	r1, #70	; 0x46
 80007c0:	f300 8093 	bgt.w	80008ea <mktime+0x182>
 80007c4:	f000 80f0 	beq.w	80009a8 <mktime+0x240>
 80007c8:	2945      	cmp	r1, #69	; 0x45
 80007ca:	f000 817f 	beq.w	8000acc <mktime+0x364>
 80007ce:	48bb      	ldr	r0, [pc, #748]	; (8000abc <mktime+0x354>)
 80007d0:	2445      	movs	r4, #69	; 0x45
 80007d2:	f240 196d 	movw	r9, #365	; 0x16d
 80007d6:	2764      	movs	r7, #100	; 0x64
 80007d8:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80007dc:	e016      	b.n	800080c <mktime+0xa4>
 80007de:	f204 7a6c 	addw	sl, r4, #1900	; 0x76c
 80007e2:	fb80 2b0a 	smull	r2, fp, r0, sl
 80007e6:	ea4f 72ea 	mov.w	r2, sl, asr #31
 80007ea:	ebc2 12eb 	rsb	r2, r2, fp, asr #7
 80007ee:	fb0c a212 	mls	r2, ip, r2, sl
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 80d1 	bne.w	800099a <mktime+0x232>
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	bf14      	ite	ne
 80007fc:	464b      	movne	r3, r9
 80007fe:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8000802:	3c01      	subs	r4, #1
 8000804:	42a1      	cmp	r1, r4
 8000806:	eba5 0503 	sub.w	r5, r5, r3
 800080a:	d010      	beq.n	800082e <mktime+0xc6>
 800080c:	fb80 2304 	smull	r2, r3, r0, r4
 8000810:	17e2      	asrs	r2, r4, #31
 8000812:	ebc2 1363 	rsb	r3, r2, r3, asr #5
 8000816:	f014 0f03 	tst.w	r4, #3
 800081a:	fb07 4313 	mls	r3, r7, r3, r4
 800081e:	d0de      	beq.n	80007de <mktime+0x76>
 8000820:	3c01      	subs	r4, #1
 8000822:	f240 136d 	movw	r3, #365	; 0x16d
 8000826:	42a1      	cmp	r1, r4
 8000828:	eba5 0503 	sub.w	r5, r5, r3
 800082c:	d1ee      	bne.n	800080c <mktime+0xa4>
 800082e:	07a1      	lsls	r1, r4, #30
 8000830:	f040 80e7 	bne.w	8000a02 <mktime+0x29a>
 8000834:	4aa1      	ldr	r2, [pc, #644]	; (8000abc <mktime+0x354>)
 8000836:	17e3      	asrs	r3, r4, #31
 8000838:	fb82 0104 	smull	r0, r1, r2, r4
 800083c:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8000840:	2164      	movs	r1, #100	; 0x64
 8000842:	fb01 4313 	mls	r3, r1, r3, r4
 8000846:	2b00      	cmp	r3, #0
 8000848:	f040 80f1 	bne.w	8000a2e <mktime+0x2c6>
 800084c:	f204 716c 	addw	r1, r4, #1900	; 0x76c
 8000850:	fb82 3201 	smull	r3, r2, r2, r1
 8000854:	17cb      	asrs	r3, r1, #31
 8000856:	ebc3 12e2 	rsb	r2, r3, r2, asr #7
 800085a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800085e:	fb03 1312 	mls	r3, r3, r2, r1
 8000862:	2b00      	cmp	r3, #0
 8000864:	f240 136d 	movw	r3, #365	; 0x16d
 8000868:	bf08      	it	eq
 800086a:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800086e:	1aed      	subs	r5, r5, r3
 8000870:	4f93      	ldr	r7, [pc, #588]	; (8000ac0 <mktime+0x358>)
 8000872:	fb07 e705 	mla	r7, r7, r5, lr
 8000876:	f000 fc13 	bl	80010a0 <__tz_lock>
 800087a:	f000 fc15 	bl	80010a8 <_tzset_unlocked>
 800087e:	4b91      	ldr	r3, [pc, #580]	; (8000ac4 <mktime+0x35c>)
 8000880:	f8d3 9000 	ldr.w	r9, [r3]
 8000884:	f1b9 0f00 	cmp.w	r9, #0
 8000888:	f000 808a 	beq.w	80009a0 <mktime+0x238>
 800088c:	6a33      	ldr	r3, [r6, #32]
 800088e:	6970      	ldr	r0, [r6, #20]
 8000890:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8000894:	2b01      	cmp	r3, #1
 8000896:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800089a:	bfa8      	it	ge
 800089c:	2301      	movge	r3, #1
 800089e:	4290      	cmp	r0, r2
 80008a0:	4699      	mov	r9, r3
 80008a2:	d05a      	beq.n	800095a <mktime+0x1f2>
 80008a4:	f000 fb3a 	bl	8000f1c <__tzcalc_limits>
 80008a8:	2800      	cmp	r0, #0
 80008aa:	d156      	bne.n	800095a <mktime+0x1f2>
 80008ac:	f1b9 0f01 	cmp.w	r9, #1
 80008b0:	f040 80b8 	bne.w	8000a24 <mktime+0x2bc>
 80008b4:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
 80008b8:	468a      	mov	sl, r1
 80008ba:	4457      	add	r7, sl
 80008bc:	f04f 0901 	mov.w	r9, #1
 80008c0:	f000 fbf0 	bl	80010a4 <__tz_unlock>
 80008c4:	4b80      	ldr	r3, [pc, #512]	; (8000ac8 <mktime+0x360>)
 80008c6:	f8c6 9020 	str.w	r9, [r6, #32]
 80008ca:	3504      	adds	r5, #4
 80008cc:	fb83 2305 	smull	r2, r3, r3, r5
 80008d0:	195a      	adds	r2, r3, r5
 80008d2:	17eb      	asrs	r3, r5, #31
 80008d4:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 80008d8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80008dc:	1aeb      	subs	r3, r5, r3
 80008de:	bf48      	it	mi
 80008e0:	3307      	addmi	r3, #7
 80008e2:	61b3      	str	r3, [r6, #24]
 80008e4:	4638      	mov	r0, r7
 80008e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008ea:	4874      	ldr	r0, [pc, #464]	; (8000abc <mktime+0x354>)
 80008ec:	2446      	movs	r4, #70	; 0x46
 80008ee:	f240 196d 	movw	r9, #365	; 0x16d
 80008f2:	2764      	movs	r7, #100	; 0x64
 80008f4:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80008f8:	e013      	b.n	8000922 <mktime+0x1ba>
 80008fa:	f204 7a6c 	addw	sl, r4, #1900	; 0x76c
 80008fe:	fb80 2b0a 	smull	r2, fp, r0, sl
 8000902:	ea4f 72ea 	mov.w	r2, sl, asr #31
 8000906:	ebc2 12eb 	rsb	r2, r2, fp, asr #7
 800090a:	fb0c a212 	mls	r2, ip, r2, sl
 800090e:	bb0b      	cbnz	r3, 8000954 <mktime+0x1ec>
 8000910:	2a00      	cmp	r2, #0
 8000912:	bf14      	ite	ne
 8000914:	464b      	movne	r3, r9
 8000916:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800091a:	3401      	adds	r4, #1
 800091c:	42a1      	cmp	r1, r4
 800091e:	441d      	add	r5, r3
 8000920:	d0a6      	beq.n	8000870 <mktime+0x108>
 8000922:	fb80 2304 	smull	r2, r3, r0, r4
 8000926:	17e2      	asrs	r2, r4, #31
 8000928:	ebc2 1363 	rsb	r3, r2, r3, asr #5
 800092c:	f014 0f03 	tst.w	r4, #3
 8000930:	fb07 4313 	mls	r3, r7, r3, r4
 8000934:	d0e1      	beq.n	80008fa <mktime+0x192>
 8000936:	f240 136d 	movw	r3, #365	; 0x16d
 800093a:	e7ee      	b.n	800091a <mktime+0x1b2>
 800093c:	4a5f      	ldr	r2, [pc, #380]	; (8000abc <mktime+0x354>)
 800093e:	17cb      	asrs	r3, r1, #31
 8000940:	fb82 4001 	smull	r4, r0, r2, r1
 8000944:	ebc3 1360 	rsb	r3, r3, r0, asr #5
 8000948:	2064      	movs	r0, #100	; 0x64
 800094a:	fb00 1313 	mls	r3, r0, r3, r1
 800094e:	b36b      	cbz	r3, 80009ac <mktime+0x244>
 8000950:	3501      	adds	r5, #1
 8000952:	e72b      	b.n	80007ac <mktime+0x44>
 8000954:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8000958:	e7df      	b.n	800091a <mktime+0x1b2>
 800095a:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800095e:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8000962:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
 8000966:	eba3 0c02 	sub.w	ip, r3, r2
 800096a:	4567      	cmp	r7, ip
 800096c:	4610      	mov	r0, r2
 800096e:	468a      	mov	sl, r1
 8000970:	db02      	blt.n	8000978 <mktime+0x210>
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	429f      	cmp	r7, r3
 8000976:	db99      	blt.n	80008ac <mktime+0x144>
 8000978:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800097c:	eba3 0e01 	sub.w	lr, r3, r1
 8000980:	f8d8 3000 	ldr.w	r3, [r8]
 8000984:	b30b      	cbz	r3, 80009ca <mktime+0x262>
 8000986:	4577      	cmp	r7, lr
 8000988:	da3e      	bge.n	8000a08 <mktime+0x2a0>
 800098a:	f1b9 0f00 	cmp.w	r9, #0
 800098e:	f280 80d0 	bge.w	8000b32 <mktime+0x3ca>
 8000992:	f04f 0900 	mov.w	r9, #0
 8000996:	4407      	add	r7, r0
 8000998:	e792      	b.n	80008c0 <mktime+0x158>
 800099a:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800099e:	e730      	b.n	8000802 <mktime+0x9a>
 80009a0:	f8d8 0020 	ldr.w	r0, [r8, #32]
 80009a4:	4407      	add	r7, r0
 80009a6:	e78b      	b.n	80008c0 <mktime+0x158>
 80009a8:	460c      	mov	r4, r1
 80009aa:	e761      	b.n	8000870 <mktime+0x108>
 80009ac:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80009b0:	fb82 3200 	smull	r3, r2, r2, r0
 80009b4:	17c3      	asrs	r3, r0, #31
 80009b6:	ebc3 12e2 	rsb	r2, r3, r2, asr #7
 80009ba:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80009be:	fb03 0212 	mls	r2, r3, r2, r0
 80009c2:	2a00      	cmp	r2, #0
 80009c4:	f47f aef2 	bne.w	80007ac <mktime+0x44>
 80009c8:	e7c2      	b.n	8000950 <mktime+0x1e8>
 80009ca:	4577      	cmp	r7, lr
 80009cc:	db1c      	blt.n	8000a08 <mktime+0x2a0>
 80009ce:	f1b9 0f00 	cmp.w	r9, #0
 80009d2:	f6ff af72 	blt.w	80008ba <mktime+0x152>
 80009d6:	f47f af6f 	bne.w	80008b8 <mktime+0x150>
 80009da:	1a51      	subs	r1, r2, r1
 80009dc:	6833      	ldr	r3, [r6, #0]
 80009de:	f8d6 900c 	ldr.w	r9, [r6, #12]
 80009e2:	440b      	add	r3, r1
 80009e4:	6033      	str	r3, [r6, #0]
 80009e6:	4630      	mov	r0, r6
 80009e8:	440f      	add	r7, r1
 80009ea:	f7ff fdb9 	bl	8000560 <validate_structure>
 80009ee:	68f3      	ldr	r3, [r6, #12]
 80009f0:	ebb3 0309 	subs.w	r3, r3, r9
 80009f4:	bf18      	it	ne
 80009f6:	f04f 0901 	movne.w	r9, #1
 80009fa:	d12e      	bne.n	8000a5a <mktime+0x2f2>
 80009fc:	f8d8 a03c 	ldr.w	sl, [r8, #60]	; 0x3c
 8000a00:	e75b      	b.n	80008ba <mktime+0x152>
 8000a02:	f240 136d 	movw	r3, #365	; 0x16d
 8000a06:	e732      	b.n	800086e <mktime+0x106>
 8000a08:	4567      	cmp	r7, ip
 8000a0a:	bfac      	ite	ge
 8000a0c:	2300      	movge	r3, #0
 8000a0e:	2301      	movlt	r3, #1
 8000a10:	f1b9 0f00 	cmp.w	r9, #0
 8000a14:	db04      	blt.n	8000a20 <mktime+0x2b8>
 8000a16:	ea83 0909 	eor.w	r9, r3, r9
 8000a1a:	f1b9 0f01 	cmp.w	r9, #1
 8000a1e:	d009      	beq.n	8000a34 <mktime+0x2cc>
 8000a20:	4699      	mov	r9, r3
 8000a22:	e743      	b.n	80008ac <mktime+0x144>
 8000a24:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8000a28:	4610      	mov	r0, r2
 8000a2a:	4407      	add	r7, r0
 8000a2c:	e748      	b.n	80008c0 <mktime+0x158>
 8000a2e:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8000a32:	e71c      	b.n	800086e <mktime+0x106>
 8000a34:	1a51      	subs	r1, r2, r1
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d1d0      	bne.n	80009dc <mktime+0x274>
 8000a3a:	6833      	ldr	r3, [r6, #0]
 8000a3c:	f8d6 900c 	ldr.w	r9, [r6, #12]
 8000a40:	1a5b      	subs	r3, r3, r1
 8000a42:	6033      	str	r3, [r6, #0]
 8000a44:	4630      	mov	r0, r6
 8000a46:	1a7f      	subs	r7, r7, r1
 8000a48:	f7ff fd8a 	bl	8000560 <validate_structure>
 8000a4c:	68f3      	ldr	r3, [r6, #12]
 8000a4e:	ebb3 0909 	subs.w	r9, r3, r9
 8000a52:	d0a5      	beq.n	80009a0 <mktime+0x238>
 8000a54:	464b      	mov	r3, r9
 8000a56:	f04f 0900 	mov.w	r9, #0
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	dd3d      	ble.n	8000ada <mktime+0x372>
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a62:	69f2      	ldr	r2, [r6, #28]
 8000a64:	441d      	add	r5, r3
 8000a66:	189b      	adds	r3, r3, r2
 8000a68:	d43b      	bmi.n	8000ae2 <mktime+0x37a>
 8000a6a:	07a2      	lsls	r2, r4, #30
 8000a6c:	d132      	bne.n	8000ad4 <mktime+0x36c>
 8000a6e:	4913      	ldr	r1, [pc, #76]	; (8000abc <mktime+0x354>)
 8000a70:	17e2      	asrs	r2, r4, #31
 8000a72:	fb81 e004 	smull	lr, r0, r1, r4
 8000a76:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 8000a7a:	2064      	movs	r0, #100	; 0x64
 8000a7c:	fb00 4212 	mls	r2, r0, r2, r4
 8000a80:	2a00      	cmp	r2, #0
 8000a82:	d14d      	bne.n	8000b20 <mktime+0x3b8>
 8000a84:	f204 746c 	addw	r4, r4, #1900	; 0x76c
 8000a88:	fb81 2104 	smull	r2, r1, r1, r4
 8000a8c:	17e2      	asrs	r2, r4, #31
 8000a8e:	ebc2 12e1 	rsb	r2, r2, r1, asr #7
 8000a92:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000a96:	fb01 4212 	mls	r2, r1, r2, r4
 8000a9a:	2a00      	cmp	r2, #0
 8000a9c:	f240 126d 	movw	r2, #365	; 0x16d
 8000aa0:	bf08      	it	eq
 8000aa2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	bfd8      	it	le
 8000aaa:	1a9b      	suble	r3, r3, r2
 8000aac:	61f3      	str	r3, [r6, #28]
 8000aae:	e6fd      	b.n	80008ac <mktime+0x144>
 8000ab0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000ab4:	e716      	b.n	80008e4 <mktime+0x17c>
 8000ab6:	bf00      	nop
 8000ab8:	080059d4 	.word	0x080059d4
 8000abc:	51eb851f 	.word	0x51eb851f
 8000ac0:	00015180 	.word	0x00015180
 8000ac4:	20000020 	.word	0x20000020
 8000ac8:	92492493 	.word	0x92492493
 8000acc:	460c      	mov	r4, r1
 8000ace:	f240 136d 	movw	r3, #365	; 0x16d
 8000ad2:	e6cc      	b.n	800086e <mktime+0x106>
 8000ad4:	f240 126d 	movw	r2, #365	; 0x16d
 8000ad8:	e7e5      	b.n	8000aa6 <mktime+0x33e>
 8000ada:	1c9a      	adds	r2, r3, #2
 8000adc:	bfd8      	it	le
 8000ade:	2301      	movle	r3, #1
 8000ae0:	e7bf      	b.n	8000a62 <mktime+0x2fa>
 8000ae2:	1e61      	subs	r1, r4, #1
 8000ae4:	0788      	lsls	r0, r1, #30
 8000ae6:	d11e      	bne.n	8000b26 <mktime+0x3be>
 8000ae8:	4a16      	ldr	r2, [pc, #88]	; (8000b44 <mktime+0x3dc>)
 8000aea:	17cb      	asrs	r3, r1, #31
 8000aec:	fb82 e001 	smull	lr, r0, r2, r1
 8000af0:	ebc3 1360 	rsb	r3, r3, r0, asr #5
 8000af4:	2064      	movs	r0, #100	; 0x64
 8000af6:	fb00 1313 	mls	r3, r0, r3, r1
 8000afa:	b9bb      	cbnz	r3, 8000b2c <mktime+0x3c4>
 8000afc:	f204 746b 	addw	r4, r4, #1899	; 0x76b
 8000b00:	fb82 3204 	smull	r3, r2, r2, r4
 8000b04:	17e3      	asrs	r3, r4, #31
 8000b06:	ebc3 13e2 	rsb	r3, r3, r2, asr #7
 8000b0a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b0e:	fb02 4313 	mls	r3, r2, r3, r4
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f240 136d 	movw	r3, #365	; 0x16d
 8000b18:	bf18      	it	ne
 8000b1a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8000b1e:	e7c5      	b.n	8000aac <mktime+0x344>
 8000b20:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8000b24:	e7bf      	b.n	8000aa6 <mktime+0x33e>
 8000b26:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8000b2a:	e7bf      	b.n	8000aac <mktime+0x344>
 8000b2c:	f240 136d 	movw	r3, #365	; 0x16d
 8000b30:	e7bc      	b.n	8000aac <mktime+0x344>
 8000b32:	f1b9 0f01 	cmp.w	r9, #1
 8000b36:	d003      	beq.n	8000b40 <mktime+0x3d8>
 8000b38:	f04f 0900 	mov.w	r9, #0
 8000b3c:	4610      	mov	r0, r2
 8000b3e:	e774      	b.n	8000a2a <mktime+0x2c2>
 8000b40:	1a51      	subs	r1, r2, r1
 8000b42:	e77a      	b.n	8000a3a <mktime+0x2d2>
 8000b44:	51eb851f 	.word	0x51eb851f
	...
 8000b60:	eba2 0003 	sub.w	r0, r2, r3
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <strcmp>:
 8000b68:	7802      	ldrb	r2, [r0, #0]
 8000b6a:	780b      	ldrb	r3, [r1, #0]
 8000b6c:	2a01      	cmp	r2, #1
 8000b6e:	bf28      	it	cs
 8000b70:	429a      	cmpcs	r2, r3
 8000b72:	d1f5      	bne.n	8000b60 <mktime+0x3f8>
 8000b74:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000b78:	ea40 0401 	orr.w	r4, r0, r1
 8000b7c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000b80:	f06f 0c00 	mvn.w	ip, #0
 8000b84:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000b88:	b312      	cbz	r2, 8000bd0 <strcmp+0x68>
 8000b8a:	ea80 0401 	eor.w	r4, r0, r1
 8000b8e:	f014 0f07 	tst.w	r4, #7
 8000b92:	d16a      	bne.n	8000c6a <strcmp+0x102>
 8000b94:	f000 0407 	and.w	r4, r0, #7
 8000b98:	f020 0007 	bic.w	r0, r0, #7
 8000b9c:	f004 0503 	and.w	r5, r4, #3
 8000ba0:	f021 0107 	bic.w	r1, r1, #7
 8000ba4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000ba8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000bac:	f014 0f04 	tst.w	r4, #4
 8000bb0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000bb4:	fa0c f405 	lsl.w	r4, ip, r5
 8000bb8:	ea62 0204 	orn	r2, r2, r4
 8000bbc:	ea66 0604 	orn	r6, r6, r4
 8000bc0:	d00a      	beq.n	8000bd8 <strcmp+0x70>
 8000bc2:	ea63 0304 	orn	r3, r3, r4
 8000bc6:	4662      	mov	r2, ip
 8000bc8:	ea67 0704 	orn	r7, r7, r4
 8000bcc:	4666      	mov	r6, ip
 8000bce:	e003      	b.n	8000bd8 <strcmp+0x70>
 8000bd0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000bd4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000bd8:	fa82 f54c 	uadd8	r5, r2, ip
 8000bdc:	ea82 0406 	eor.w	r4, r2, r6
 8000be0:	faa4 f48c 	sel	r4, r4, ip
 8000be4:	bb6c      	cbnz	r4, 8000c42 <strcmp+0xda>
 8000be6:	fa83 f54c 	uadd8	r5, r3, ip
 8000bea:	ea83 0507 	eor.w	r5, r3, r7
 8000bee:	faa5 f58c 	sel	r5, r5, ip
 8000bf2:	b995      	cbnz	r5, 8000c1a <strcmp+0xb2>
 8000bf4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8000bf8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 8000bfc:	fa82 f54c 	uadd8	r5, r2, ip
 8000c00:	ea82 0406 	eor.w	r4, r2, r6
 8000c04:	faa4 f48c 	sel	r4, r4, ip
 8000c08:	fa83 f54c 	uadd8	r5, r3, ip
 8000c0c:	ea83 0507 	eor.w	r5, r3, r7
 8000c10:	faa5 f58c 	sel	r5, r5, ip
 8000c14:	4325      	orrs	r5, r4
 8000c16:	d0db      	beq.n	8000bd0 <strcmp+0x68>
 8000c18:	b99c      	cbnz	r4, 8000c42 <strcmp+0xda>
 8000c1a:	ba2d      	rev	r5, r5
 8000c1c:	fab5 f485 	clz	r4, r5
 8000c20:	f024 0407 	bic.w	r4, r4, #7
 8000c24:	fa27 f104 	lsr.w	r1, r7, r4
 8000c28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000c2c:	fa23 f304 	lsr.w	r3, r3, r4
 8000c30:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000c34:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000c38:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000c3c:	eba0 0001 	sub.w	r0, r0, r1
 8000c40:	4770      	bx	lr
 8000c42:	ba24      	rev	r4, r4
 8000c44:	fab4 f484 	clz	r4, r4
 8000c48:	f024 0407 	bic.w	r4, r4, #7
 8000c4c:	fa26 f104 	lsr.w	r1, r6, r4
 8000c50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000c54:	fa22 f204 	lsr.w	r2, r2, r4
 8000c58:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8000c5c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000c60:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000c64:	eba0 0001 	sub.w	r0, r0, r1
 8000c68:	4770      	bx	lr
 8000c6a:	f014 0f03 	tst.w	r4, #3
 8000c6e:	d13c      	bne.n	8000cea <strcmp+0x182>
 8000c70:	f010 0403 	ands.w	r4, r0, #3
 8000c74:	d128      	bne.n	8000cc8 <strcmp+0x160>
 8000c76:	f850 2b08 	ldr.w	r2, [r0], #8
 8000c7a:	f851 3b08 	ldr.w	r3, [r1], #8
 8000c7e:	fa82 f54c 	uadd8	r5, r2, ip
 8000c82:	ea82 0503 	eor.w	r5, r2, r3
 8000c86:	faa5 f58c 	sel	r5, r5, ip
 8000c8a:	b95d      	cbnz	r5, 8000ca4 <strcmp+0x13c>
 8000c8c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c94:	fa82 f54c 	uadd8	r5, r2, ip
 8000c98:	ea82 0503 	eor.w	r5, r2, r3
 8000c9c:	faa5 f58c 	sel	r5, r5, ip
 8000ca0:	2d00      	cmp	r5, #0
 8000ca2:	d0e8      	beq.n	8000c76 <strcmp+0x10e>
 8000ca4:	ba2d      	rev	r5, r5
 8000ca6:	fab5 f485 	clz	r4, r5
 8000caa:	f024 0407 	bic.w	r4, r4, #7
 8000cae:	fa23 f104 	lsr.w	r1, r3, r4
 8000cb2:	fa22 f204 	lsr.w	r2, r2, r4
 8000cb6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8000cba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000cbe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000cc2:	eba0 0001 	sub.w	r0, r0, r1
 8000cc6:	4770      	bx	lr
 8000cc8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8000ccc:	f020 0003 	bic.w	r0, r0, #3
 8000cd0:	f850 2b08 	ldr.w	r2, [r0], #8
 8000cd4:	f021 0103 	bic.w	r1, r1, #3
 8000cd8:	f851 3b08 	ldr.w	r3, [r1], #8
 8000cdc:	fa0c f404 	lsl.w	r4, ip, r4
 8000ce0:	ea62 0204 	orn	r2, r2, r4
 8000ce4:	ea63 0304 	orn	r3, r3, r4
 8000ce8:	e7c9      	b.n	8000c7e <strcmp+0x116>
 8000cea:	f010 0403 	ands.w	r4, r0, #3
 8000cee:	d01a      	beq.n	8000d26 <strcmp+0x1be>
 8000cf0:	eba1 0104 	sub.w	r1, r1, r4
 8000cf4:	f020 0003 	bic.w	r0, r0, #3
 8000cf8:	07e4      	lsls	r4, r4, #31
 8000cfa:	f850 2b04 	ldr.w	r2, [r0], #4
 8000cfe:	d006      	beq.n	8000d0e <strcmp+0x1a6>
 8000d00:	d20f      	bcs.n	8000d22 <strcmp+0x1ba>
 8000d02:	788b      	ldrb	r3, [r1, #2]
 8000d04:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8000d08:	1ae4      	subs	r4, r4, r3
 8000d0a:	d106      	bne.n	8000d1a <strcmp+0x1b2>
 8000d0c:	b12b      	cbz	r3, 8000d1a <strcmp+0x1b2>
 8000d0e:	78cb      	ldrb	r3, [r1, #3]
 8000d10:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8000d14:	1ae4      	subs	r4, r4, r3
 8000d16:	d100      	bne.n	8000d1a <strcmp+0x1b2>
 8000d18:	b91b      	cbnz	r3, 8000d22 <strcmp+0x1ba>
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	f85d 4b10 	ldr.w	r4, [sp], #16
 8000d20:	4770      	bx	lr
 8000d22:	f101 0104 	add.w	r1, r1, #4
 8000d26:	f850 2b04 	ldr.w	r2, [r0], #4
 8000d2a:	07cc      	lsls	r4, r1, #31
 8000d2c:	f021 0103 	bic.w	r1, r1, #3
 8000d30:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d34:	d848      	bhi.n	8000dc8 <strcmp+0x260>
 8000d36:	d224      	bcs.n	8000d82 <strcmp+0x21a>
 8000d38:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 8000d3c:	fa82 f54c 	uadd8	r5, r2, ip
 8000d40:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000d44:	faa5 f58c 	sel	r5, r5, ip
 8000d48:	d10a      	bne.n	8000d60 <strcmp+0x1f8>
 8000d4a:	b965      	cbnz	r5, 8000d66 <strcmp+0x1fe>
 8000d4c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d50:	ea84 0402 	eor.w	r4, r4, r2
 8000d54:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000d58:	d10e      	bne.n	8000d78 <strcmp+0x210>
 8000d5a:	f850 2b04 	ldr.w	r2, [r0], #4
 8000d5e:	e7eb      	b.n	8000d38 <strcmp+0x1d0>
 8000d60:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000d64:	e055      	b.n	8000e12 <strcmp+0x2aa>
 8000d66:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8000d6a:	d14d      	bne.n	8000e08 <strcmp+0x2a0>
 8000d6c:	7808      	ldrb	r0, [r1, #0]
 8000d6e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000d72:	f1c0 0000 	rsb	r0, r0, #0
 8000d76:	4770      	bx	lr
 8000d78:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d7c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000d80:	e047      	b.n	8000e12 <strcmp+0x2aa>
 8000d82:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000d86:	fa82 f54c 	uadd8	r5, r2, ip
 8000d8a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 8000d8e:	faa5 f58c 	sel	r5, r5, ip
 8000d92:	d10a      	bne.n	8000daa <strcmp+0x242>
 8000d94:	b965      	cbnz	r5, 8000db0 <strcmp+0x248>
 8000d96:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d9a:	ea84 0402 	eor.w	r4, r4, r2
 8000d9e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8000da2:	d10c      	bne.n	8000dbe <strcmp+0x256>
 8000da4:	f850 2b04 	ldr.w	r2, [r0], #4
 8000da8:	e7eb      	b.n	8000d82 <strcmp+0x21a>
 8000daa:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000dae:	e030      	b.n	8000e12 <strcmp+0x2aa>
 8000db0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8000db4:	d128      	bne.n	8000e08 <strcmp+0x2a0>
 8000db6:	880b      	ldrh	r3, [r1, #0]
 8000db8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8000dbc:	e029      	b.n	8000e12 <strcmp+0x2aa>
 8000dbe:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8000dc2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8000dc6:	e024      	b.n	8000e12 <strcmp+0x2aa>
 8000dc8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8000dcc:	fa82 f54c 	uadd8	r5, r2, ip
 8000dd0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8000dd4:	faa5 f58c 	sel	r5, r5, ip
 8000dd8:	d10a      	bne.n	8000df0 <strcmp+0x288>
 8000dda:	b965      	cbnz	r5, 8000df6 <strcmp+0x28e>
 8000ddc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000de0:	ea84 0402 	eor.w	r4, r4, r2
 8000de4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8000de8:	d109      	bne.n	8000dfe <strcmp+0x296>
 8000dea:	f850 2b04 	ldr.w	r2, [r0], #4
 8000dee:	e7eb      	b.n	8000dc8 <strcmp+0x260>
 8000df0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8000df4:	e00d      	b.n	8000e12 <strcmp+0x2aa>
 8000df6:	f015 0fff 	tst.w	r5, #255	; 0xff
 8000dfa:	d105      	bne.n	8000e08 <strcmp+0x2a0>
 8000dfc:	680b      	ldr	r3, [r1, #0]
 8000dfe:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8000e02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000e06:	e004      	b.n	8000e12 <strcmp+0x2aa>
 8000e08:	f04f 0000 	mov.w	r0, #0
 8000e0c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000e10:	4770      	bx	lr
 8000e12:	ba12      	rev	r2, r2
 8000e14:	ba1b      	rev	r3, r3
 8000e16:	fa82 f44c 	uadd8	r4, r2, ip
 8000e1a:	ea82 0403 	eor.w	r4, r2, r3
 8000e1e:	faa4 f58c 	sel	r5, r4, ip
 8000e22:	fab5 f485 	clz	r4, r5
 8000e26:	fa02 f204 	lsl.w	r2, r2, r4
 8000e2a:	fa03 f304 	lsl.w	r3, r3, r4
 8000e2e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8000e32:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000e36:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 8000e3a:	4770      	bx	lr
 8000e3c:	0000      	movs	r0, r0
	...

08000e40 <strlen>:
 8000e40:	f890 f000 	pld	[r0]
 8000e44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000e48:	f020 0107 	bic.w	r1, r0, #7
 8000e4c:	f06f 0c00 	mvn.w	ip, #0
 8000e50:	f010 0407 	ands.w	r4, r0, #7
 8000e54:	f891 f020 	pld	[r1, #32]
 8000e58:	f040 8049 	bne.w	8000eee <strlen+0xae>
 8000e5c:	f04f 0400 	mov.w	r4, #0
 8000e60:	f06f 0007 	mvn.w	r0, #7
 8000e64:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000e68:	f891 f040 	pld	[r1, #64]	; 0x40
 8000e6c:	f100 0008 	add.w	r0, r0, #8
 8000e70:	fa82 f24c 	uadd8	r2, r2, ip
 8000e74:	faa4 f28c 	sel	r2, r4, ip
 8000e78:	fa83 f34c 	uadd8	r3, r3, ip
 8000e7c:	faa2 f38c 	sel	r3, r2, ip
 8000e80:	bb4b      	cbnz	r3, 8000ed6 <strlen+0x96>
 8000e82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000e86:	fa82 f24c 	uadd8	r2, r2, ip
 8000e8a:	f100 0008 	add.w	r0, r0, #8
 8000e8e:	faa4 f28c 	sel	r2, r4, ip
 8000e92:	fa83 f34c 	uadd8	r3, r3, ip
 8000e96:	faa2 f38c 	sel	r3, r2, ip
 8000e9a:	b9e3      	cbnz	r3, 8000ed6 <strlen+0x96>
 8000e9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000ea0:	fa82 f24c 	uadd8	r2, r2, ip
 8000ea4:	f100 0008 	add.w	r0, r0, #8
 8000ea8:	faa4 f28c 	sel	r2, r4, ip
 8000eac:	fa83 f34c 	uadd8	r3, r3, ip
 8000eb0:	faa2 f38c 	sel	r3, r2, ip
 8000eb4:	b97b      	cbnz	r3, 8000ed6 <strlen+0x96>
 8000eb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8000eba:	f101 0120 	add.w	r1, r1, #32
 8000ebe:	fa82 f24c 	uadd8	r2, r2, ip
 8000ec2:	f100 0008 	add.w	r0, r0, #8
 8000ec6:	faa4 f28c 	sel	r2, r4, ip
 8000eca:	fa83 f34c 	uadd8	r3, r3, ip
 8000ece:	faa2 f38c 	sel	r3, r2, ip
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0c6      	beq.n	8000e64 <strlen+0x24>
 8000ed6:	2a00      	cmp	r2, #0
 8000ed8:	bf04      	itt	eq
 8000eda:	3004      	addeq	r0, #4
 8000edc:	461a      	moveq	r2, r3
 8000ede:	ba12      	rev	r2, r2
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000ee8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8000eec:	4770      	bx	lr
 8000eee:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000ef2:	f004 0503 	and.w	r5, r4, #3
 8000ef6:	f1c4 0000 	rsb	r0, r4, #0
 8000efa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000efe:	f014 0f04 	tst.w	r4, #4
 8000f02:	f891 f040 	pld	[r1, #64]	; 0x40
 8000f06:	fa0c f505 	lsl.w	r5, ip, r5
 8000f0a:	ea62 0205 	orn	r2, r2, r5
 8000f0e:	bf1c      	itt	ne
 8000f10:	ea63 0305 	ornne	r3, r3, r5
 8000f14:	4662      	movne	r2, ip
 8000f16:	f04f 0400 	mov.w	r4, #0
 8000f1a:	e7a9      	b.n	8000e70 <strlen+0x30>

08000f1c <__tzcalc_limits>:
 8000f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f20:	b083      	sub	sp, #12
 8000f22:	4605      	mov	r5, r0
 8000f24:	f000 fad8 	bl	80014d8 <__gettzinfo>
 8000f28:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8000f2c:	429d      	cmp	r5, r3
 8000f2e:	f340 8093 	ble.w	8001058 <__tzcalc_limits+0x13c>
 8000f32:	4c57      	ldr	r4, [pc, #348]	; (8001090 <__tzcalc_limits+0x174>)
 8000f34:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800109c <__tzcalc_limits+0x180>
 8000f38:	6045      	str	r5, [r0, #4]
 8000f3a:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8000f3e:	18ee      	adds	r6, r5, r3
 8000f40:	f2a5 726d 	subw	r2, r5, #1901	; 0x76d
 8000f44:	fb84 3102 	smull	r3, r1, r4, r2
 8000f48:	10b7      	asrs	r7, r6, #2
 8000f4a:	f240 1e6d 	movw	lr, #365	; 0x16d
 8000f4e:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
 8000f52:	f2a5 76b2 	subw	r6, r5, #1970	; 0x7b2
 8000f56:	17d2      	asrs	r2, r2, #31
 8000f58:	eb05 030c 	add.w	r3, r5, ip
 8000f5c:	fb0e 7606 	mla	r6, lr, r6, r7
 8000f60:	eba2 1261 	sub.w	r2, r2, r1, asr #5
 8000f64:	17ef      	asrs	r7, r5, #31
 8000f66:	fb84 c105 	smull	ip, r1, r4, r5
 8000f6a:	4416      	add	r6, r2
 8000f6c:	fb84 e403 	smull	lr, r4, r4, r3
 8000f70:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000f74:	ebc7 1ee1 	rsb	lr, r7, r1, asr #7
 8000f78:	17db      	asrs	r3, r3, #31
 8000f7a:	ebc3 13e4 	rsb	r3, r3, r4, asr #7
 8000f7e:	fb02 5e1e 	mls	lr, r2, lr, r5
 8000f82:	ebc7 1761 	rsb	r7, r7, r1, asr #5
 8000f86:	2264      	movs	r2, #100	; 0x64
 8000f88:	441e      	add	r6, r3
 8000f8a:	f1be 0f00 	cmp.w	lr, #0
 8000f8e:	bf0c      	ite	eq
 8000f90:	2330      	moveq	r3, #48	; 0x30
 8000f92:	2300      	movne	r3, #0
 8000f94:	fb02 5717 	mls	r7, r2, r7, r5
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	f005 0503 	and.w	r5, r5, #3
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	f100 0c38 	add.w	ip, r0, #56	; 0x38
 8000fa4:	7a23      	ldrb	r3, [r4, #8]
 8000fa6:	2b4a      	cmp	r3, #74	; 0x4a
 8000fa8:	d05a      	beq.n	8001060 <__tzcalc_limits+0x144>
 8000faa:	2b44      	cmp	r3, #68	; 0x44
 8000fac:	d068      	beq.n	8001080 <__tzcalc_limits+0x164>
 8000fae:	2d00      	cmp	r5, #0
 8000fb0:	d04b      	beq.n	800104a <__tzcalc_limits+0x12e>
 8000fb2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8000fb6:	68e3      	ldr	r3, [r4, #12]
 8000fb8:	4a36      	ldr	r2, [pc, #216]	; (8001094 <__tzcalc_limits+0x178>)
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	4491      	add	r9, r2
 8000fbe:	dd62      	ble.n	8001086 <__tzcalc_limits+0x16a>
 8000fc0:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 8000fc4:	f1ab 0b02 	sub.w	fp, fp, #2
 8000fc8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000fcc:	eb09 0a0b 	add.w	sl, r9, fp
 8000fd0:	f1a9 0304 	sub.w	r3, r9, #4
 8000fd4:	4632      	mov	r2, r6
 8000fd6:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8000fda:	459a      	cmp	sl, r3
 8000fdc:	440a      	add	r2, r1
 8000fde:	d1fa      	bne.n	8000fd6 <__tzcalc_limits+0xba>
 8000fe0:	f10b 0b04 	add.w	fp, fp, #4
 8000fe4:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <__tzcalc_limits+0x17c>)
 8000fe6:	f859 900b 	ldr.w	r9, [r9, fp]
 8000fea:	1d11      	adds	r1, r2, #4
 8000fec:	fb83 a301 	smull	sl, r3, r3, r1
 8000ff0:	440b      	add	r3, r1
 8000ff2:	ea4f 7ae1 	mov.w	sl, r1, asr #31
 8000ff6:	ebca 0aa3 	rsb	sl, sl, r3, asr #2
 8000ffa:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8000ffe:	6963      	ldr	r3, [r4, #20]
 8001000:	eba1 010a 	sub.w	r1, r1, sl
 8001004:	1a59      	subs	r1, r3, r1
 8001006:	6923      	ldr	r3, [r4, #16]
 8001008:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800100c:	bf48      	it	mi
 800100e:	3107      	addmi	r1, #7
 8001010:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8001014:	440b      	add	r3, r1
 8001016:	454b      	cmp	r3, r9
 8001018:	db02      	blt.n	8001020 <__tzcalc_limits+0x104>
 800101a:	3b07      	subs	r3, #7
 800101c:	454b      	cmp	r3, r9
 800101e:	dafc      	bge.n	800101a <__tzcalc_limits+0xfe>
 8001020:	441a      	add	r2, r3
 8001022:	69a1      	ldr	r1, [r4, #24]
 8001024:	6a23      	ldr	r3, [r4, #32]
 8001026:	fb08 1102 	mla	r1, r8, r2, r1
 800102a:	440b      	add	r3, r1
 800102c:	f844 3f1c 	str.w	r3, [r4, #28]!
 8001030:	45a4      	cmp	ip, r4
 8001032:	d1b7      	bne.n	8000fa4 <__tzcalc_limits+0x88>
 8001034:	69c3      	ldr	r3, [r0, #28]
 8001036:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001038:	4293      	cmp	r3, r2
 800103a:	bfac      	ite	ge
 800103c:	2300      	movge	r3, #0
 800103e:	2301      	movlt	r3, #1
 8001040:	6003      	str	r3, [r0, #0]
 8001042:	2001      	movs	r0, #1
 8001044:	b003      	add	sp, #12
 8001046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800104a:	9b01      	ldr	r3, [sp, #4]
 800104c:	2f00      	cmp	r7, #0
 800104e:	bf0c      	ite	eq
 8001050:	4699      	moveq	r9, r3
 8001052:	f04f 0930 	movne.w	r9, #48	; 0x30
 8001056:	e7ae      	b.n	8000fb6 <__tzcalc_limits+0x9a>
 8001058:	2000      	movs	r0, #0
 800105a:	b003      	add	sp, #12
 800105c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001060:	6962      	ldr	r2, [r4, #20]
 8001062:	18b1      	adds	r1, r6, r2
 8001064:	b93d      	cbnz	r5, 8001076 <__tzcalc_limits+0x15a>
 8001066:	b137      	cbz	r7, 8001076 <__tzcalc_limits+0x15a>
 8001068:	2a3b      	cmp	r2, #59	; 0x3b
 800106a:	bfd4      	ite	le
 800106c:	2200      	movle	r2, #0
 800106e:	2201      	movgt	r2, #1
 8001070:	440a      	add	r2, r1
 8001072:	3a01      	subs	r2, #1
 8001074:	e7d5      	b.n	8001022 <__tzcalc_limits+0x106>
 8001076:	f1be 0f00 	cmp.w	lr, #0
 800107a:	d0f5      	beq.n	8001068 <__tzcalc_limits+0x14c>
 800107c:	2200      	movs	r2, #0
 800107e:	e7f7      	b.n	8001070 <__tzcalc_limits+0x154>
 8001080:	6962      	ldr	r2, [r4, #20]
 8001082:	4432      	add	r2, r6
 8001084:	e7cd      	b.n	8001022 <__tzcalc_limits+0x106>
 8001086:	4632      	mov	r2, r6
 8001088:	f04f 0b00 	mov.w	fp, #0
 800108c:	e7aa      	b.n	8000fe4 <__tzcalc_limits+0xc8>
 800108e:	bf00      	nop
 8001090:	51eb851f 	.word	0x51eb851f
 8001094:	08005a38 	.word	0x08005a38
 8001098:	92492493 	.word	0x92492493
 800109c:	00015180 	.word	0x00015180

080010a0 <__tz_lock>:
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop

080010a4 <__tz_unlock>:
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <_tzset_unlocked>:
 80010a8:	4b01      	ldr	r3, [pc, #4]	; (80010b0 <_tzset_unlocked+0x8>)
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	f000 b810 	b.w	80010d0 <_tzset_unlocked_r>
 80010b0:	200010c0 	.word	0x200010c0

080010b4 <tzset>:
 80010b4:	b508      	push	{r3, lr}
 80010b6:	f7ff fff3 	bl	80010a0 <__tz_lock>
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <tzset+0x18>)
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	f000 f807 	bl	80010d0 <_tzset_unlocked_r>
 80010c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80010c6:	f7ff bfed 	b.w	80010a4 <__tz_unlock>
 80010ca:	bf00      	nop
 80010cc:	200010c0 	.word	0x200010c0

080010d0 <_tzset_unlocked_r>:
 80010d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010d4:	b08b      	sub	sp, #44	; 0x2c
 80010d6:	4607      	mov	r7, r0
 80010d8:	f000 f9fe 	bl	80014d8 <__gettzinfo>
 80010dc:	49bc      	ldr	r1, [pc, #752]	; (80013d0 <_tzset_unlocked_r+0x300>)
 80010de:	4dbd      	ldr	r5, [pc, #756]	; (80013d4 <_tzset_unlocked_r+0x304>)
 80010e0:	4606      	mov	r6, r0
 80010e2:	4638      	mov	r0, r7
 80010e4:	f000 f9f0 	bl	80014c8 <_getenv_r>
 80010e8:	4604      	mov	r4, r0
 80010ea:	2800      	cmp	r0, #0
 80010ec:	f000 80f8 	beq.w	80012e0 <_tzset_unlocked_r+0x210>
 80010f0:	6829      	ldr	r1, [r5, #0]
 80010f2:	b131      	cbz	r1, 8001102 <_tzset_unlocked_r+0x32>
 80010f4:	f7ff fd38 	bl	8000b68 <strcmp>
 80010f8:	b910      	cbnz	r0, 8001100 <_tzset_unlocked_r+0x30>
 80010fa:	b00b      	add	sp, #44	; 0x2c
 80010fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001100:	6829      	ldr	r1, [r5, #0]
 8001102:	4608      	mov	r0, r1
 8001104:	f000 f9f4 	bl	80014f0 <free>
 8001108:	4620      	mov	r0, r4
 800110a:	f7ff fe99 	bl	8000e40 <strlen>
 800110e:	1c41      	adds	r1, r0, #1
 8001110:	4638      	mov	r0, r7
 8001112:	f000 fa3d 	bl	8001590 <_malloc_r>
 8001116:	6028      	str	r0, [r5, #0]
 8001118:	b110      	cbz	r0, 8001120 <_tzset_unlocked_r+0x50>
 800111a:	4621      	mov	r1, r4
 800111c:	f000 fb44 	bl	80017a8 <strcpy>
 8001120:	7823      	ldrb	r3, [r4, #0]
 8001122:	4aad      	ldr	r2, [pc, #692]	; (80013d8 <_tzset_unlocked_r+0x308>)
 8001124:	49ad      	ldr	r1, [pc, #692]	; (80013dc <_tzset_unlocked_r+0x30c>)
 8001126:	2b3a      	cmp	r3, #58	; 0x3a
 8001128:	bf08      	it	eq
 800112a:	3401      	addeq	r4, #1
 800112c:	ad08      	add	r5, sp, #32
 800112e:	462b      	mov	r3, r5
 8001130:	4620      	mov	r0, r4
 8001132:	f000 fa9d 	bl	8001670 <siscanf>
 8001136:	2800      	cmp	r0, #0
 8001138:	dddf      	ble.n	80010fa <_tzset_unlocked_r+0x2a>
 800113a:	9b08      	ldr	r3, [sp, #32]
 800113c:	5ce2      	ldrb	r2, [r4, r3]
 800113e:	2a2d      	cmp	r2, #45	; 0x2d
 8001140:	441c      	add	r4, r3
 8001142:	f000 80c9 	beq.w	80012d8 <_tzset_unlocked_r+0x208>
 8001146:	2a2b      	cmp	r2, #43	; 0x2b
 8001148:	bf08      	it	eq
 800114a:	3401      	addeq	r4, #1
 800114c:	f04f 0801 	mov.w	r8, #1
 8001150:	ab06      	add	r3, sp, #24
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	f10d 0316 	add.w	r3, sp, #22
 8001158:	2700      	movs	r7, #0
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	9503      	str	r5, [sp, #12]
 800115e:	9501      	str	r5, [sp, #4]
 8001160:	aa05      	add	r2, sp, #20
 8001162:	462b      	mov	r3, r5
 8001164:	499e      	ldr	r1, [pc, #632]	; (80013e0 <_tzset_unlocked_r+0x310>)
 8001166:	f8ad 7016 	strh.w	r7, [sp, #22]
 800116a:	4620      	mov	r0, r4
 800116c:	f8ad 7018 	strh.w	r7, [sp, #24]
 8001170:	f000 fa7e 	bl	8001670 <siscanf>
 8001174:	42b8      	cmp	r0, r7
 8001176:	ddc0      	ble.n	80010fa <_tzset_unlocked_r+0x2a>
 8001178:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800117c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8001180:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8001184:	f8df e250 	ldr.w	lr, [pc, #592]	; 80013d8 <_tzset_unlocked_r+0x308>
 8001188:	9808      	ldr	r0, [sp, #32]
 800118a:	f8df 9260 	ldr.w	r9, [pc, #608]	; 80013ec <_tzset_unlocked_r+0x31c>
 800118e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001192:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001196:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800119a:	fb01 3302 	mla	r3, r1, r2, r3
 800119e:	fb08 f303 	mul.w	r3, r8, r3
 80011a2:	f10e 0a0c 	add.w	sl, lr, #12
 80011a6:	4404      	add	r4, r0
 80011a8:	6233      	str	r3, [r6, #32]
 80011aa:	4652      	mov	r2, sl
 80011ac:	4620      	mov	r0, r4
 80011ae:	462b      	mov	r3, r5
 80011b0:	498a      	ldr	r1, [pc, #552]	; (80013dc <_tzset_unlocked_r+0x30c>)
 80011b2:	f8c9 e000 	str.w	lr, [r9]
 80011b6:	f000 fa5b 	bl	8001670 <siscanf>
 80011ba:	42b8      	cmp	r0, r7
 80011bc:	f340 8082 	ble.w	80012c4 <_tzset_unlocked_r+0x1f4>
 80011c0:	9808      	ldr	r0, [sp, #32]
 80011c2:	f8c9 a004 	str.w	sl, [r9, #4]
 80011c6:	5c23      	ldrb	r3, [r4, r0]
 80011c8:	2b2d      	cmp	r3, #45	; 0x2d
 80011ca:	4404      	add	r4, r0
 80011cc:	f000 8095 	beq.w	80012fa <_tzset_unlocked_r+0x22a>
 80011d0:	2b2b      	cmp	r3, #43	; 0x2b
 80011d2:	bf08      	it	eq
 80011d4:	3401      	addeq	r4, #1
 80011d6:	f04f 0801 	mov.w	r8, #1
 80011da:	ab06      	add	r3, sp, #24
 80011dc:	9302      	str	r3, [sp, #8]
 80011de:	f10d 0316 	add.w	r3, sp, #22
 80011e2:	2700      	movs	r7, #0
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	9503      	str	r5, [sp, #12]
 80011e8:	9501      	str	r5, [sp, #4]
 80011ea:	462b      	mov	r3, r5
 80011ec:	aa05      	add	r2, sp, #20
 80011ee:	497c      	ldr	r1, [pc, #496]	; (80013e0 <_tzset_unlocked_r+0x310>)
 80011f0:	f8ad 7014 	strh.w	r7, [sp, #20]
 80011f4:	4620      	mov	r0, r4
 80011f6:	f8ad 7016 	strh.w	r7, [sp, #22]
 80011fa:	f8ad 7018 	strh.w	r7, [sp, #24]
 80011fe:	9708      	str	r7, [sp, #32]
 8001200:	f000 fa36 	bl	8001670 <siscanf>
 8001204:	42b8      	cmp	r0, r7
 8001206:	dd7c      	ble.n	8001302 <_tzset_unlocked_r+0x232>
 8001208:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800120c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8001210:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8001214:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001218:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800121c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001220:	fb01 3302 	mla	r3, r1, r2, r3
 8001224:	fb08 f303 	mul.w	r3, r8, r3
 8001228:	63f3      	str	r3, [r6, #60]	; 0x3c
 800122a:	9b08      	ldr	r3, [sp, #32]
 800122c:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 80013f8 <_tzset_unlocked_r+0x328>
 8001230:	441c      	add	r4, r3
 8001232:	46b0      	mov	r8, r6
 8001234:	f04f 0a00 	mov.w	sl, #0
 8001238:	7827      	ldrb	r7, [r4, #0]
 800123a:	2f2c      	cmp	r7, #44	; 0x2c
 800123c:	bf04      	itt	eq
 800123e:	7867      	ldrbeq	r7, [r4, #1]
 8001240:	3401      	addeq	r4, #1
 8001242:	2f4d      	cmp	r7, #77	; 0x4d
 8001244:	d062      	beq.n	800130c <_tzset_unlocked_r+0x23c>
 8001246:	2f4a      	cmp	r7, #74	; 0x4a
 8001248:	bf08      	it	eq
 800124a:	3401      	addeq	r4, #1
 800124c:	f04f 020a 	mov.w	r2, #10
 8001250:	a909      	add	r1, sp, #36	; 0x24
 8001252:	4620      	mov	r0, r4
 8001254:	bf18      	it	ne
 8001256:	2744      	movne	r7, #68	; 0x44
 8001258:	f000 fbf0 	bl	8001a3c <strtoul>
 800125c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8001260:	f8ad 001e 	strh.w	r0, [sp, #30]
 8001264:	454c      	cmp	r4, r9
 8001266:	f000 809c 	beq.w	80013a2 <_tzset_unlocked_r+0x2d2>
 800126a:	b280      	uxth	r0, r0
 800126c:	f8c8 0014 	str.w	r0, [r8, #20]
 8001270:	f888 7008 	strb.w	r7, [r8, #8]
 8001274:	2400      	movs	r4, #0
 8001276:	2302      	movs	r3, #2
 8001278:	f8ad 3014 	strh.w	r3, [sp, #20]
 800127c:	f8ad 4016 	strh.w	r4, [sp, #22]
 8001280:	f8ad 4018 	strh.w	r4, [sp, #24]
 8001284:	9408      	str	r4, [sp, #32]
 8001286:	f899 3000 	ldrb.w	r3, [r9]
 800128a:	2b2f      	cmp	r3, #47	; 0x2f
 800128c:	d06c      	beq.n	8001368 <_tzset_unlocked_r+0x298>
 800128e:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001292:	f10a 0a01 	add.w	sl, sl, #1
 8001296:	f1ba 0f02 	cmp.w	sl, #2
 800129a:	f8c8 3018 	str.w	r3, [r8, #24]
 800129e:	444c      	add	r4, r9
 80012a0:	f108 081c 	add.w	r8, r8, #28
 80012a4:	d1c8      	bne.n	8001238 <_tzset_unlocked_r+0x168>
 80012a6:	6870      	ldr	r0, [r6, #4]
 80012a8:	f7ff fe38 	bl	8000f1c <__tzcalc_limits>
 80012ac:	6a32      	ldr	r2, [r6, #32]
 80012ae:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80012b0:	484c      	ldr	r0, [pc, #304]	; (80013e4 <_tzset_unlocked_r+0x314>)
 80012b2:	494d      	ldr	r1, [pc, #308]	; (80013e8 <_tzset_unlocked_r+0x318>)
 80012b4:	1a9b      	subs	r3, r3, r2
 80012b6:	bf18      	it	ne
 80012b8:	2301      	movne	r3, #1
 80012ba:	6003      	str	r3, [r0, #0]
 80012bc:	600a      	str	r2, [r1, #0]
 80012be:	b00b      	add	sp, #44	; 0x2c
 80012c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012c4:	4948      	ldr	r1, [pc, #288]	; (80013e8 <_tzset_unlocked_r+0x318>)
 80012c6:	4a47      	ldr	r2, [pc, #284]	; (80013e4 <_tzset_unlocked_r+0x314>)
 80012c8:	6a30      	ldr	r0, [r6, #32]
 80012ca:	f8d9 3000 	ldr.w	r3, [r9]
 80012ce:	6008      	str	r0, [r1, #0]
 80012d0:	6017      	str	r7, [r2, #0]
 80012d2:	f8c9 3004 	str.w	r3, [r9, #4]
 80012d6:	e710      	b.n	80010fa <_tzset_unlocked_r+0x2a>
 80012d8:	3401      	adds	r4, #1
 80012da:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80012de:	e737      	b.n	8001150 <_tzset_unlocked_r+0x80>
 80012e0:	4b42      	ldr	r3, [pc, #264]	; (80013ec <_tzset_unlocked_r+0x31c>)
 80012e2:	4940      	ldr	r1, [pc, #256]	; (80013e4 <_tzset_unlocked_r+0x314>)
 80012e4:	4e40      	ldr	r6, [pc, #256]	; (80013e8 <_tzset_unlocked_r+0x318>)
 80012e6:	4a42      	ldr	r2, [pc, #264]	; (80013f0 <_tzset_unlocked_r+0x320>)
 80012e8:	6828      	ldr	r0, [r5, #0]
 80012ea:	6034      	str	r4, [r6, #0]
 80012ec:	600c      	str	r4, [r1, #0]
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	f000 f8fd 	bl	80014f0 <free>
 80012f6:	602c      	str	r4, [r5, #0]
 80012f8:	e6ff      	b.n	80010fa <_tzset_unlocked_r+0x2a>
 80012fa:	3401      	adds	r4, #1
 80012fc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8001300:	e76b      	b.n	80011da <_tzset_unlocked_r+0x10a>
 8001302:	6a33      	ldr	r3, [r6, #32]
 8001304:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8001308:	63f3      	str	r3, [r6, #60]	; 0x3c
 800130a:	e78e      	b.n	800122a <_tzset_unlocked_r+0x15a>
 800130c:	f10d 021e 	add.w	r2, sp, #30
 8001310:	ab07      	add	r3, sp, #28
 8001312:	9202      	str	r2, [sp, #8]
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	9503      	str	r5, [sp, #12]
 8001318:	9501      	str	r5, [sp, #4]
 800131a:	462b      	mov	r3, r5
 800131c:	f10d 021a 	add.w	r2, sp, #26
 8001320:	4659      	mov	r1, fp
 8001322:	4620      	mov	r0, r4
 8001324:	f000 f9a4 	bl	8001670 <siscanf>
 8001328:	2803      	cmp	r0, #3
 800132a:	f47f aee6 	bne.w	80010fa <_tzset_unlocked_r+0x2a>
 800132e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8001332:	1e5a      	subs	r2, r3, #1
 8001334:	2a0b      	cmp	r2, #11
 8001336:	f63f aee0 	bhi.w	80010fa <_tzset_unlocked_r+0x2a>
 800133a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800133e:	1e51      	subs	r1, r2, #1
 8001340:	2904      	cmp	r1, #4
 8001342:	f63f aeda 	bhi.w	80010fa <_tzset_unlocked_r+0x2a>
 8001346:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800134a:	2906      	cmp	r1, #6
 800134c:	f63f aed5 	bhi.w	80010fa <_tzset_unlocked_r+0x2a>
 8001350:	f888 7008 	strb.w	r7, [r8, #8]
 8001354:	f8c8 300c 	str.w	r3, [r8, #12]
 8001358:	f8c8 2010 	str.w	r2, [r8, #16]
 800135c:	f8c8 1014 	str.w	r1, [r8, #20]
 8001360:	9b08      	ldr	r3, [sp, #32]
 8001362:	eb04 0903 	add.w	r9, r4, r3
 8001366:	e785      	b.n	8001274 <_tzset_unlocked_r+0x1a4>
 8001368:	ab06      	add	r3, sp, #24
 800136a:	9302      	str	r3, [sp, #8]
 800136c:	f10d 0316 	add.w	r3, sp, #22
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	aa05      	add	r2, sp, #20
 8001374:	462b      	mov	r3, r5
 8001376:	491f      	ldr	r1, [pc, #124]	; (80013f4 <_tzset_unlocked_r+0x324>)
 8001378:	9503      	str	r5, [sp, #12]
 800137a:	9501      	str	r5, [sp, #4]
 800137c:	4648      	mov	r0, r9
 800137e:	f000 f977 	bl	8001670 <siscanf>
 8001382:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8001386:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800138a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800138e:	9c08      	ldr	r4, [sp, #32]
 8001390:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8001394:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001398:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800139c:	fb01 2303 	mla	r3, r1, r3, r2
 80013a0:	e777      	b.n	8001292 <_tzset_unlocked_r+0x1c2>
 80013a2:	f1ba 0f00 	cmp.w	sl, #0
 80013a6:	d009      	beq.n	80013bc <_tzset_unlocked_r+0x2ec>
 80013a8:	224d      	movs	r2, #77	; 0x4d
 80013aa:	230b      	movs	r3, #11
 80013ac:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
 80013b0:	62b3      	str	r3, [r6, #40]	; 0x28
 80013b2:	2201      	movs	r2, #1
 80013b4:	2300      	movs	r3, #0
 80013b6:	62f2      	str	r2, [r6, #44]	; 0x2c
 80013b8:	6333      	str	r3, [r6, #48]	; 0x30
 80013ba:	e75b      	b.n	8001274 <_tzset_unlocked_r+0x1a4>
 80013bc:	234d      	movs	r3, #77	; 0x4d
 80013be:	2203      	movs	r2, #3
 80013c0:	7233      	strb	r3, [r6, #8]
 80013c2:	2302      	movs	r3, #2
 80013c4:	f8c6 a014 	str.w	sl, [r6, #20]
 80013c8:	60f2      	str	r2, [r6, #12]
 80013ca:	6133      	str	r3, [r6, #16]
 80013cc:	e752      	b.n	8001274 <_tzset_unlocked_r+0x1a4>
 80013ce:	bf00      	nop
 80013d0:	080062c4 	.word	0x080062c4
 80013d4:	20000000 	.word	0x20000000
 80013d8:	20000004 	.word	0x20000004
 80013dc:	080062cc 	.word	0x080062cc
 80013e0:	080062dc 	.word	0x080062dc
 80013e4:	20000020 	.word	0x20000020
 80013e8:	2000001c 	.word	0x2000001c
 80013ec:	20001078 	.word	0x20001078
 80013f0:	080062c8 	.word	0x080062c8
 80013f4:	08006304 	.word	0x08006304
 80013f8:	080062f0 	.word	0x080062f0

080013fc <_tzset_r>:
 80013fc:	b510      	push	{r4, lr}
 80013fe:	4604      	mov	r4, r0
 8001400:	f7ff fe4e 	bl	80010a0 <__tz_lock>
 8001404:	4620      	mov	r0, r4
 8001406:	f7ff fe63 	bl	80010d0 <_tzset_unlocked_r>
 800140a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800140e:	f7ff be49 	b.w	80010a4 <__tz_unlock>
 8001412:	bf00      	nop

08001414 <div>:
 8001414:	2900      	cmp	r1, #0
 8001416:	b410      	push	{r4}
 8001418:	fb91 f4f2 	sdiv	r4, r1, r2
 800141c:	fb02 1314 	mls	r3, r2, r4, r1
 8001420:	db05      	blt.n	800142e <div+0x1a>
 8001422:	2b00      	cmp	r3, #0
 8001424:	db0c      	blt.n	8001440 <div+0x2c>
 8001426:	6004      	str	r4, [r0, #0]
 8001428:	6043      	str	r3, [r0, #4]
 800142a:	bc10      	pop	{r4}
 800142c:	4770      	bx	lr
 800142e:	2b00      	cmp	r3, #0
 8001430:	bfc4      	itt	gt
 8001432:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 8001436:	189b      	addgt	r3, r3, r2
 8001438:	6004      	str	r4, [r0, #0]
 800143a:	6043      	str	r3, [r0, #4]
 800143c:	bc10      	pop	{r4}
 800143e:	4770      	bx	lr
 8001440:	3401      	adds	r4, #1
 8001442:	1a9b      	subs	r3, r3, r2
 8001444:	6004      	str	r4, [r0, #0]
 8001446:	6043      	str	r3, [r0, #4]
 8001448:	bc10      	pop	{r4}
 800144a:	4770      	bx	lr

0800144c <_findenv_r>:
 800144c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001450:	4f1c      	ldr	r7, [pc, #112]	; (80014c4 <_findenv_r+0x78>)
 8001452:	460e      	mov	r6, r1
 8001454:	4691      	mov	r9, r2
 8001456:	4680      	mov	r8, r0
 8001458:	f000 fb24 	bl	8001aa4 <__env_lock>
 800145c:	683d      	ldr	r5, [r7, #0]
 800145e:	b1f5      	cbz	r5, 800149e <_findenv_r+0x52>
 8001460:	7834      	ldrb	r4, [r6, #0]
 8001462:	b15c      	cbz	r4, 800147c <_findenv_r+0x30>
 8001464:	2c3d      	cmp	r4, #61	; 0x3d
 8001466:	bf18      	it	ne
 8001468:	4634      	movne	r4, r6
 800146a:	d102      	bne.n	8001472 <_findenv_r+0x26>
 800146c:	e017      	b.n	800149e <_findenv_r+0x52>
 800146e:	2b3d      	cmp	r3, #61	; 0x3d
 8001470:	d015      	beq.n	800149e <_findenv_r+0x52>
 8001472:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f9      	bne.n	800146e <_findenv_r+0x22>
 800147a:	1ba4      	subs	r4, r4, r6
 800147c:	6828      	ldr	r0, [r5, #0]
 800147e:	b170      	cbz	r0, 800149e <_findenv_r+0x52>
 8001480:	4622      	mov	r2, r4
 8001482:	4631      	mov	r1, r6
 8001484:	f000 f9ee 	bl	8001864 <strncmp>
 8001488:	b928      	cbnz	r0, 8001496 <_findenv_r+0x4a>
 800148a:	6828      	ldr	r0, [r5, #0]
 800148c:	5d03      	ldrb	r3, [r0, r4]
 800148e:	2b3d      	cmp	r3, #61	; 0x3d
 8001490:	eb00 0a04 	add.w	sl, r0, r4
 8001494:	d009      	beq.n	80014aa <_findenv_r+0x5e>
 8001496:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800149a:	2800      	cmp	r0, #0
 800149c:	d1f0      	bne.n	8001480 <_findenv_r+0x34>
 800149e:	4640      	mov	r0, r8
 80014a0:	f000 fb02 	bl	8001aa8 <__env_unlock>
 80014a4:	2000      	movs	r0, #0
 80014a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	1aed      	subs	r5, r5, r3
 80014ae:	10ad      	asrs	r5, r5, #2
 80014b0:	4640      	mov	r0, r8
 80014b2:	f8c9 5000 	str.w	r5, [r9]
 80014b6:	f000 faf7 	bl	8001aa8 <__env_unlock>
 80014ba:	f10a 0001 	add.w	r0, sl, #1
 80014be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014c2:	bf00      	nop
 80014c4:	2000135c 	.word	0x2000135c

080014c8 <_getenv_r>:
 80014c8:	b500      	push	{lr}
 80014ca:	b083      	sub	sp, #12
 80014cc:	aa01      	add	r2, sp, #4
 80014ce:	f7ff ffbd 	bl	800144c <_findenv_r>
 80014d2:	b003      	add	sp, #12
 80014d4:	f85d fb04 	ldr.w	pc, [sp], #4

080014d8 <__gettzinfo>:
 80014d8:	4800      	ldr	r0, [pc, #0]	; (80014dc <__gettzinfo+0x4>)
 80014da:	4770      	bx	lr
 80014dc:	20001080 	.word	0x20001080

080014e0 <malloc>:
 80014e0:	4b02      	ldr	r3, [pc, #8]	; (80014ec <malloc+0xc>)
 80014e2:	4601      	mov	r1, r0
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	f000 b853 	b.w	8001590 <_malloc_r>
 80014ea:	bf00      	nop
 80014ec:	200010c0 	.word	0x200010c0

080014f0 <free>:
 80014f0:	4b02      	ldr	r3, [pc, #8]	; (80014fc <free+0xc>)
 80014f2:	4601      	mov	r1, r0
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	f000 b803 	b.w	8001500 <_free_r>
 80014fa:	bf00      	nop
 80014fc:	200010c0 	.word	0x200010c0

08001500 <_free_r>:
 8001500:	b191      	cbz	r1, 8001528 <_free_r+0x28>
 8001502:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001506:	3904      	subs	r1, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	bfb8      	it	lt
 800150c:	18c9      	addlt	r1, r1, r3
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <_free_r+0x8c>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	b1fa      	cbz	r2, 8001554 <_free_r+0x54>
 8001514:	428a      	cmp	r2, r1
 8001516:	b430      	push	{r4, r5}
 8001518:	d90a      	bls.n	8001530 <_free_r+0x30>
 800151a:	6808      	ldr	r0, [r1, #0]
 800151c:	180c      	adds	r4, r1, r0
 800151e:	42a2      	cmp	r2, r4
 8001520:	d026      	beq.n	8001570 <_free_r+0x70>
 8001522:	604a      	str	r2, [r1, #4]
 8001524:	6019      	str	r1, [r3, #0]
 8001526:	bc30      	pop	{r4, r5}
 8001528:	4770      	bx	lr
 800152a:	428b      	cmp	r3, r1
 800152c:	d803      	bhi.n	8001536 <_free_r+0x36>
 800152e:	461a      	mov	r2, r3
 8001530:	6853      	ldr	r3, [r2, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f9      	bne.n	800152a <_free_r+0x2a>
 8001536:	6814      	ldr	r4, [r2, #0]
 8001538:	1915      	adds	r5, r2, r4
 800153a:	428d      	cmp	r5, r1
 800153c:	d00d      	beq.n	800155a <_free_r+0x5a>
 800153e:	d806      	bhi.n	800154e <_free_r+0x4e>
 8001540:	6808      	ldr	r0, [r1, #0]
 8001542:	180c      	adds	r4, r1, r0
 8001544:	429c      	cmp	r4, r3
 8001546:	d019      	beq.n	800157c <_free_r+0x7c>
 8001548:	604b      	str	r3, [r1, #4]
 800154a:	6051      	str	r1, [r2, #4]
 800154c:	e7eb      	b.n	8001526 <_free_r+0x26>
 800154e:	230c      	movs	r3, #12
 8001550:	6003      	str	r3, [r0, #0]
 8001552:	e7e8      	b.n	8001526 <_free_r+0x26>
 8001554:	604a      	str	r2, [r1, #4]
 8001556:	6019      	str	r1, [r3, #0]
 8001558:	4770      	bx	lr
 800155a:	6809      	ldr	r1, [r1, #0]
 800155c:	440c      	add	r4, r1
 800155e:	1911      	adds	r1, r2, r4
 8001560:	4299      	cmp	r1, r3
 8001562:	6014      	str	r4, [r2, #0]
 8001564:	d1df      	bne.n	8001526 <_free_r+0x26>
 8001566:	cb0a      	ldmia	r3, {r1, r3}
 8001568:	440c      	add	r4, r1
 800156a:	6053      	str	r3, [r2, #4]
 800156c:	6014      	str	r4, [r2, #0]
 800156e:	e7da      	b.n	8001526 <_free_r+0x26>
 8001570:	6814      	ldr	r4, [r2, #0]
 8001572:	6852      	ldr	r2, [r2, #4]
 8001574:	604a      	str	r2, [r1, #4]
 8001576:	4420      	add	r0, r4
 8001578:	6008      	str	r0, [r1, #0]
 800157a:	e7d3      	b.n	8001524 <_free_r+0x24>
 800157c:	681c      	ldr	r4, [r3, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	604b      	str	r3, [r1, #4]
 8001582:	4420      	add	r0, r4
 8001584:	6008      	str	r0, [r1, #0]
 8001586:	6051      	str	r1, [r2, #4]
 8001588:	e7cd      	b.n	8001526 <_free_r+0x26>
 800158a:	bf00      	nop
 800158c:	20000024 	.word	0x20000024

08001590 <_malloc_r>:
 8001590:	b570      	push	{r4, r5, r6, lr}
 8001592:	1ccc      	adds	r4, r1, #3
 8001594:	f024 0403 	bic.w	r4, r4, #3
 8001598:	3408      	adds	r4, #8
 800159a:	2c0c      	cmp	r4, #12
 800159c:	bf38      	it	cc
 800159e:	240c      	movcc	r4, #12
 80015a0:	2c00      	cmp	r4, #0
 80015a2:	4606      	mov	r6, r0
 80015a4:	db3b      	blt.n	800161e <_malloc_r+0x8e>
 80015a6:	42a1      	cmp	r1, r4
 80015a8:	d839      	bhi.n	800161e <_malloc_r+0x8e>
 80015aa:	4d27      	ldr	r5, [pc, #156]	; (8001648 <_malloc_r+0xb8>)
 80015ac:	6829      	ldr	r1, [r5, #0]
 80015ae:	b151      	cbz	r1, 80015c6 <_malloc_r+0x36>
 80015b0:	680a      	ldr	r2, [r1, #0]
 80015b2:	1b12      	subs	r2, r2, r4
 80015b4:	d404      	bmi.n	80015c0 <_malloc_r+0x30>
 80015b6:	e036      	b.n	8001626 <_malloc_r+0x96>
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	1b12      	subs	r2, r2, r4
 80015bc:	d51a      	bpl.n	80015f4 <_malloc_r+0x64>
 80015be:	4619      	mov	r1, r3
 80015c0:	684b      	ldr	r3, [r1, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f8      	bne.n	80015b8 <_malloc_r+0x28>
 80015c6:	6869      	ldr	r1, [r5, #4]
 80015c8:	2900      	cmp	r1, #0
 80015ca:	d037      	beq.n	800163c <_malloc_r+0xac>
 80015cc:	4621      	mov	r1, r4
 80015ce:	4630      	mov	r0, r6
 80015d0:	f000 f83c 	bl	800164c <_sbrk_r>
 80015d4:	1c43      	adds	r3, r0, #1
 80015d6:	d022      	beq.n	800161e <_malloc_r+0x8e>
 80015d8:	1cc3      	adds	r3, r0, #3
 80015da:	f023 0503 	bic.w	r5, r3, #3
 80015de:	42a8      	cmp	r0, r5
 80015e0:	d005      	beq.n	80015ee <_malloc_r+0x5e>
 80015e2:	1a29      	subs	r1, r5, r0
 80015e4:	4630      	mov	r0, r6
 80015e6:	f000 f831 	bl	800164c <_sbrk_r>
 80015ea:	3001      	adds	r0, #1
 80015ec:	d017      	beq.n	800161e <_malloc_r+0x8e>
 80015ee:	602c      	str	r4, [r5, #0]
 80015f0:	462b      	mov	r3, r5
 80015f2:	e004      	b.n	80015fe <_malloc_r+0x6e>
 80015f4:	2a0b      	cmp	r2, #11
 80015f6:	d90d      	bls.n	8001614 <_malloc_r+0x84>
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	601c      	str	r4, [r3, #0]
 80015fe:	f103 000b 	add.w	r0, r3, #11
 8001602:	f020 0007 	bic.w	r0, r0, #7
 8001606:	1d1a      	adds	r2, r3, #4
 8001608:	1a82      	subs	r2, r0, r2
 800160a:	d002      	beq.n	8001612 <_malloc_r+0x82>
 800160c:	4251      	negs	r1, r2
 800160e:	5099      	str	r1, [r3, r2]
 8001610:	bd70      	pop	{r4, r5, r6, pc}
 8001612:	bd70      	pop	{r4, r5, r6, pc}
 8001614:	428b      	cmp	r3, r1
 8001616:	d00e      	beq.n	8001636 <_malloc_r+0xa6>
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	604a      	str	r2, [r1, #4]
 800161c:	e7ef      	b.n	80015fe <_malloc_r+0x6e>
 800161e:	230c      	movs	r3, #12
 8001620:	6033      	str	r3, [r6, #0]
 8001622:	2000      	movs	r0, #0
 8001624:	bd70      	pop	{r4, r5, r6, pc}
 8001626:	2a0b      	cmp	r2, #11
 8001628:	d803      	bhi.n	8001632 <_malloc_r+0xa2>
 800162a:	684a      	ldr	r2, [r1, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	602a      	str	r2, [r5, #0]
 8001630:	e7e5      	b.n	80015fe <_malloc_r+0x6e>
 8001632:	460b      	mov	r3, r1
 8001634:	e7e0      	b.n	80015f8 <_malloc_r+0x68>
 8001636:	460a      	mov	r2, r1
 8001638:	460b      	mov	r3, r1
 800163a:	e7f8      	b.n	800162e <_malloc_r+0x9e>
 800163c:	4630      	mov	r0, r6
 800163e:	f000 f805 	bl	800164c <_sbrk_r>
 8001642:	6068      	str	r0, [r5, #4]
 8001644:	e7c2      	b.n	80015cc <_malloc_r+0x3c>
 8001646:	bf00      	nop
 8001648:	20000024 	.word	0x20000024

0800164c <_sbrk_r>:
 800164c:	b538      	push	{r3, r4, r5, lr}
 800164e:	4c07      	ldr	r4, [pc, #28]	; (800166c <_sbrk_r+0x20>)
 8001650:	2300      	movs	r3, #0
 8001652:	4605      	mov	r5, r0
 8001654:	4608      	mov	r0, r1
 8001656:	6023      	str	r3, [r4, #0]
 8001658:	f002 fe72 	bl	8004340 <_sbrk>
 800165c:	1c43      	adds	r3, r0, #1
 800165e:	d000      	beq.n	8001662 <_sbrk_r+0x16>
 8001660:	bd38      	pop	{r3, r4, r5, pc}
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0fb      	beq.n	8001660 <_sbrk_r+0x14>
 8001668:	602b      	str	r3, [r5, #0]
 800166a:	bd38      	pop	{r3, r4, r5, pc}
 800166c:	20000334 	.word	0x20000334

08001670 <siscanf>:
 8001670:	b40e      	push	{r1, r2, r3}
 8001672:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001674:	b09c      	sub	sp, #112	; 0x70
 8001676:	ac21      	add	r4, sp, #132	; 0x84
 8001678:	f44f 7201 	mov.w	r2, #516	; 0x204
 800167c:	f854 6b04 	ldr.w	r6, [r4], #4
 8001680:	f8ad 2014 	strh.w	r2, [sp, #20]
 8001684:	9002      	str	r0, [sp, #8]
 8001686:	9006      	str	r0, [sp, #24]
 8001688:	f7ff fbda 	bl	8000e40 <strlen>
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <siscanf+0x50>)
 800168e:	9401      	str	r4, [sp, #4]
 8001690:	4605      	mov	r5, r0
 8001692:	4632      	mov	r2, r6
 8001694:	4f0b      	ldr	r7, [pc, #44]	; (80016c4 <siscanf+0x54>)
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	9503      	str	r5, [sp, #12]
 800169a:	4623      	mov	r3, r4
 800169c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80016a0:	2400      	movs	r4, #0
 80016a2:	a902      	add	r1, sp, #8
 80016a4:	9507      	str	r5, [sp, #28]
 80016a6:	970a      	str	r7, [sp, #40]	; 0x28
 80016a8:	940e      	str	r4, [sp, #56]	; 0x38
 80016aa:	9413      	str	r4, [sp, #76]	; 0x4c
 80016ac:	f8ad 6016 	strh.w	r6, [sp, #22]
 80016b0:	f000 fa70 	bl	8001b94 <__ssvfiscanf_r>
 80016b4:	b01c      	add	sp, #112	; 0x70
 80016b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80016ba:	b003      	add	sp, #12
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	200010c0 	.word	0x200010c0
 80016c4:	08001741 	.word	0x08001741

080016c8 <_siscanf_r>:
 80016c8:	b40c      	push	{r2, r3}
 80016ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016cc:	b09d      	sub	sp, #116	; 0x74
 80016ce:	ac22      	add	r4, sp, #136	; 0x88
 80016d0:	4606      	mov	r6, r0
 80016d2:	f44f 7301 	mov.w	r3, #516	; 0x204
 80016d6:	4608      	mov	r0, r1
 80016d8:	f854 7b04 	ldr.w	r7, [r4], #4
 80016dc:	9102      	str	r1, [sp, #8]
 80016de:	9106      	str	r1, [sp, #24]
 80016e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80016e4:	f7ff fbac 	bl	8000e40 <strlen>
 80016e8:	463a      	mov	r2, r7
 80016ea:	4605      	mov	r5, r0
 80016ec:	4623      	mov	r3, r4
 80016ee:	9401      	str	r4, [sp, #4]
 80016f0:	4630      	mov	r0, r6
 80016f2:	2400      	movs	r4, #0
 80016f4:	4f08      	ldr	r7, [pc, #32]	; (8001718 <_siscanf_r+0x50>)
 80016f6:	9503      	str	r5, [sp, #12]
 80016f8:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80016fc:	a902      	add	r1, sp, #8
 80016fe:	9507      	str	r5, [sp, #28]
 8001700:	970a      	str	r7, [sp, #40]	; 0x28
 8001702:	940e      	str	r4, [sp, #56]	; 0x38
 8001704:	9413      	str	r4, [sp, #76]	; 0x4c
 8001706:	f8ad 6016 	strh.w	r6, [sp, #22]
 800170a:	f000 fa43 	bl	8001b94 <__ssvfiscanf_r>
 800170e:	b01d      	add	sp, #116	; 0x74
 8001710:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001714:	b002      	add	sp, #8
 8001716:	4770      	bx	lr
 8001718:	08001741 	.word	0x08001741

0800171c <__sread>:
 800171c:	b510      	push	{r4, lr}
 800171e:	460c      	mov	r4, r1
 8001720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001724:	f000 fd62 	bl	80021ec <_read_r>
 8001728:	2800      	cmp	r0, #0
 800172a:	db03      	blt.n	8001734 <__sread+0x18>
 800172c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800172e:	4403      	add	r3, r0
 8001730:	6523      	str	r3, [r4, #80]	; 0x50
 8001732:	bd10      	pop	{r4, pc}
 8001734:	89a3      	ldrh	r3, [r4, #12]
 8001736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800173a:	81a3      	strh	r3, [r4, #12]
 800173c:	bd10      	pop	{r4, pc}
 800173e:	bf00      	nop

08001740 <__seofread>:
 8001740:	2000      	movs	r0, #0
 8001742:	4770      	bx	lr

08001744 <__swrite>:
 8001744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001748:	4616      	mov	r6, r2
 800174a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800174e:	461f      	mov	r7, r3
 8001750:	05d3      	lsls	r3, r2, #23
 8001752:	460c      	mov	r4, r1
 8001754:	4605      	mov	r5, r0
 8001756:	d507      	bpl.n	8001768 <__swrite+0x24>
 8001758:	2200      	movs	r2, #0
 800175a:	2302      	movs	r3, #2
 800175c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001760:	f000 f9a4 	bl	8001aac <_lseek_r>
 8001764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800176c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001770:	81a2      	strh	r2, [r4, #12]
 8001772:	463b      	mov	r3, r7
 8001774:	4632      	mov	r2, r6
 8001776:	4628      	mov	r0, r5
 8001778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800177c:	f000 b96a 	b.w	8001a54 <_write_r>

08001780 <__sseek>:
 8001780:	b510      	push	{r4, lr}
 8001782:	460c      	mov	r4, r1
 8001784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001788:	f000 f990 	bl	8001aac <_lseek_r>
 800178c:	89a3      	ldrh	r3, [r4, #12]
 800178e:	1c42      	adds	r2, r0, #1
 8001790:	bf0e      	itee	eq
 8001792:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001796:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800179a:	6520      	strne	r0, [r4, #80]	; 0x50
 800179c:	81a3      	strh	r3, [r4, #12]
 800179e:	bd10      	pop	{r4, pc}

080017a0 <__sclose>:
 80017a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017a4:	f000 b96c 	b.w	8001a80 <_close_r>

080017a8 <strcpy>:
 80017a8:	ea80 0201 	eor.w	r2, r0, r1
 80017ac:	4684      	mov	ip, r0
 80017ae:	f012 0f03 	tst.w	r2, #3
 80017b2:	d14f      	bne.n	8001854 <strcpy+0xac>
 80017b4:	f011 0f03 	tst.w	r1, #3
 80017b8:	d132      	bne.n	8001820 <strcpy+0x78>
 80017ba:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80017be:	f011 0f04 	tst.w	r1, #4
 80017c2:	f851 3b04 	ldr.w	r3, [r1], #4
 80017c6:	d00b      	beq.n	80017e0 <strcpy+0x38>
 80017c8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80017cc:	439a      	bics	r2, r3
 80017ce:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80017d2:	bf04      	itt	eq
 80017d4:	f84c 3b04 	streq.w	r3, [ip], #4
 80017d8:	f851 3b04 	ldreq.w	r3, [r1], #4
 80017dc:	d116      	bne.n	800180c <strcpy+0x64>
 80017de:	bf00      	nop
 80017e0:	f851 4b04 	ldr.w	r4, [r1], #4
 80017e4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80017e8:	439a      	bics	r2, r3
 80017ea:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80017ee:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80017f2:	d10b      	bne.n	800180c <strcpy+0x64>
 80017f4:	f84c 3b04 	str.w	r3, [ip], #4
 80017f8:	43a2      	bics	r2, r4
 80017fa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80017fe:	bf04      	itt	eq
 8001800:	f851 3b04 	ldreq.w	r3, [r1], #4
 8001804:	f84c 4b04 	streq.w	r4, [ip], #4
 8001808:	d0ea      	beq.n	80017e0 <strcpy+0x38>
 800180a:	4623      	mov	r3, r4
 800180c:	f80c 3b01 	strb.w	r3, [ip], #1
 8001810:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001814:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001818:	d1f8      	bne.n	800180c <strcpy+0x64>
 800181a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	f011 0f01 	tst.w	r1, #1
 8001824:	d006      	beq.n	8001834 <strcpy+0x8c>
 8001826:	f811 2b01 	ldrb.w	r2, [r1], #1
 800182a:	f80c 2b01 	strb.w	r2, [ip], #1
 800182e:	2a00      	cmp	r2, #0
 8001830:	bf08      	it	eq
 8001832:	4770      	bxeq	lr
 8001834:	f011 0f02 	tst.w	r1, #2
 8001838:	d0bf      	beq.n	80017ba <strcpy+0x12>
 800183a:	f831 2b02 	ldrh.w	r2, [r1], #2
 800183e:	f012 0fff 	tst.w	r2, #255	; 0xff
 8001842:	bf16      	itet	ne
 8001844:	f82c 2b02 	strhne.w	r2, [ip], #2
 8001848:	f88c 2000 	strbeq.w	r2, [ip]
 800184c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8001850:	d1b3      	bne.n	80017ba <strcpy+0x12>
 8001852:	4770      	bx	lr
 8001854:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001858:	f80c 2b01 	strb.w	r2, [ip], #1
 800185c:	2a00      	cmp	r2, #0
 800185e:	d1f9      	bne.n	8001854 <strcpy+0xac>
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop

08001864 <strncmp>:
 8001864:	2a00      	cmp	r2, #0
 8001866:	d041      	beq.n	80018ec <strncmp+0x88>
 8001868:	ea40 0301 	orr.w	r3, r0, r1
 800186c:	f013 0303 	ands.w	r3, r3, #3
 8001870:	b4f0      	push	{r4, r5, r6, r7}
 8001872:	d125      	bne.n	80018c0 <strncmp+0x5c>
 8001874:	2a03      	cmp	r2, #3
 8001876:	d923      	bls.n	80018c0 <strncmp+0x5c>
 8001878:	6804      	ldr	r4, [r0, #0]
 800187a:	680d      	ldr	r5, [r1, #0]
 800187c:	42ac      	cmp	r4, r5
 800187e:	d11f      	bne.n	80018c0 <strncmp+0x5c>
 8001880:	3a04      	subs	r2, #4
 8001882:	d038      	beq.n	80018f6 <strncmp+0x92>
 8001884:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8001888:	ea25 0404 	bic.w	r4, r5, r4
 800188c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8001890:	d12e      	bne.n	80018f0 <strncmp+0x8c>
 8001892:	3004      	adds	r0, #4
 8001894:	3104      	adds	r1, #4
 8001896:	e00f      	b.n	80018b8 <strncmp+0x54>
 8001898:	f850 3b04 	ldr.w	r3, [r0], #4
 800189c:	680e      	ldr	r6, [r1, #0]
 800189e:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 80018a2:	42b3      	cmp	r3, r6
 80018a4:	ea24 0403 	bic.w	r4, r4, r3
 80018a8:	f101 0104 	add.w	r1, r1, #4
 80018ac:	d126      	bne.n	80018fc <strncmp+0x98>
 80018ae:	3a04      	subs	r2, #4
 80018b0:	d021      	beq.n	80018f6 <strncmp+0x92>
 80018b2:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80018b6:	d11b      	bne.n	80018f0 <strncmp+0x8c>
 80018b8:	2a03      	cmp	r2, #3
 80018ba:	4607      	mov	r7, r0
 80018bc:	460d      	mov	r5, r1
 80018be:	d8eb      	bhi.n	8001898 <strncmp+0x34>
 80018c0:	7805      	ldrb	r5, [r0, #0]
 80018c2:	780c      	ldrb	r4, [r1, #0]
 80018c4:	42ac      	cmp	r4, r5
 80018c6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 80018ca:	d11a      	bne.n	8001902 <strncmp+0x9e>
 80018cc:	b183      	cbz	r3, 80018f0 <strncmp+0x8c>
 80018ce:	b914      	cbnz	r4, 80018d6 <strncmp+0x72>
 80018d0:	e00e      	b.n	80018f0 <strncmp+0x8c>
 80018d2:	b16b      	cbz	r3, 80018f0 <strncmp+0x8c>
 80018d4:	b17a      	cbz	r2, 80018f6 <strncmp+0x92>
 80018d6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80018da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80018de:	42a2      	cmp	r2, r4
 80018e0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80018e4:	d0f5      	beq.n	80018d2 <strncmp+0x6e>
 80018e6:	1b10      	subs	r0, r2, r4
 80018e8:	bcf0      	pop	{r4, r5, r6, r7}
 80018ea:	4770      	bx	lr
 80018ec:	4610      	mov	r0, r2
 80018ee:	4770      	bx	lr
 80018f0:	2000      	movs	r0, #0
 80018f2:	bcf0      	pop	{r4, r5, r6, r7}
 80018f4:	4770      	bx	lr
 80018f6:	4610      	mov	r0, r2
 80018f8:	bcf0      	pop	{r4, r5, r6, r7}
 80018fa:	4770      	bx	lr
 80018fc:	4629      	mov	r1, r5
 80018fe:	4638      	mov	r0, r7
 8001900:	e7de      	b.n	80018c0 <strncmp+0x5c>
 8001902:	462a      	mov	r2, r5
 8001904:	e7ef      	b.n	80018e6 <strncmp+0x82>
 8001906:	bf00      	nop

08001908 <_strtoul_r>:
 8001908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800190c:	4c49      	ldr	r4, [pc, #292]	; (8001a34 <_strtoul_r+0x12c>)
 800190e:	4682      	mov	sl, r0
 8001910:	f8d4 c000 	ldr.w	ip, [r4]
 8001914:	4608      	mov	r0, r1
 8001916:	e000      	b.n	800191a <_strtoul_r+0x12>
 8001918:	4620      	mov	r0, r4
 800191a:	4604      	mov	r4, r0
 800191c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8001920:	eb0c 0605 	add.w	r6, ip, r5
 8001924:	7877      	ldrb	r7, [r6, #1]
 8001926:	f017 0708 	ands.w	r7, r7, #8
 800192a:	d1f5      	bne.n	8001918 <_strtoul_r+0x10>
 800192c:	2d2d      	cmp	r5, #45	; 0x2d
 800192e:	d058      	beq.n	80019e2 <_strtoul_r+0xda>
 8001930:	2d2b      	cmp	r5, #43	; 0x2b
 8001932:	bf04      	itt	eq
 8001934:	7825      	ldrbeq	r5, [r4, #0]
 8001936:	1c84      	addeq	r4, r0, #2
 8001938:	b15b      	cbz	r3, 8001952 <_strtoul_r+0x4a>
 800193a:	2b10      	cmp	r3, #16
 800193c:	d055      	beq.n	80019ea <_strtoul_r+0xe2>
 800193e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8001942:	fbb8 f8f3 	udiv	r8, r8, r3
 8001946:	fb03 fb08 	mul.w	fp, r3, r8
 800194a:	ea6f 0b0b 	mvn.w	fp, fp
 800194e:	4699      	mov	r9, r3
 8001950:	e007      	b.n	8001962 <_strtoul_r+0x5a>
 8001952:	2d30      	cmp	r5, #48	; 0x30
 8001954:	d05a      	beq.n	8001a0c <_strtoul_r+0x104>
 8001956:	230a      	movs	r3, #10
 8001958:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8001a38 <_strtoul_r+0x130>
 800195c:	4699      	mov	r9, r3
 800195e:	f04f 0b05 	mov.w	fp, #5
 8001962:	f04f 0e00 	mov.w	lr, #0
 8001966:	4670      	mov	r0, lr
 8001968:	e00e      	b.n	8001988 <_strtoul_r+0x80>
 800196a:	3d30      	subs	r5, #48	; 0x30
 800196c:	42ab      	cmp	r3, r5
 800196e:	dd1b      	ble.n	80019a8 <_strtoul_r+0xa0>
 8001970:	f1be 0f00 	cmp.w	lr, #0
 8001974:	db26      	blt.n	80019c4 <_strtoul_r+0xbc>
 8001976:	4540      	cmp	r0, r8
 8001978:	d824      	bhi.n	80019c4 <_strtoul_r+0xbc>
 800197a:	d021      	beq.n	80019c0 <_strtoul_r+0xb8>
 800197c:	fb09 5000 	mla	r0, r9, r0, r5
 8001980:	f04f 0e01 	mov.w	lr, #1
 8001984:	f814 5b01 	ldrb.w	r5, [r4], #1
 8001988:	eb0c 0605 	add.w	r6, ip, r5
 800198c:	7876      	ldrb	r6, [r6, #1]
 800198e:	f016 0f04 	tst.w	r6, #4
 8001992:	d1ea      	bne.n	800196a <_strtoul_r+0x62>
 8001994:	f016 0603 	ands.w	r6, r6, #3
 8001998:	d006      	beq.n	80019a8 <_strtoul_r+0xa0>
 800199a:	2e01      	cmp	r6, #1
 800199c:	bf14      	ite	ne
 800199e:	2657      	movne	r6, #87	; 0x57
 80019a0:	2637      	moveq	r6, #55	; 0x37
 80019a2:	1bad      	subs	r5, r5, r6
 80019a4:	42ab      	cmp	r3, r5
 80019a6:	dce3      	bgt.n	8001970 <_strtoul_r+0x68>
 80019a8:	f1be 0f00 	cmp.w	lr, #0
 80019ac:	db0f      	blt.n	80019ce <_strtoul_r+0xc6>
 80019ae:	b107      	cbz	r7, 80019b2 <_strtoul_r+0xaa>
 80019b0:	4240      	negs	r0, r0
 80019b2:	b152      	cbz	r2, 80019ca <_strtoul_r+0xc2>
 80019b4:	f1be 0f00 	cmp.w	lr, #0
 80019b8:	d10f      	bne.n	80019da <_strtoul_r+0xd2>
 80019ba:	6011      	str	r1, [r2, #0]
 80019bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019c0:	455d      	cmp	r5, fp
 80019c2:	dddb      	ble.n	800197c <_strtoul_r+0x74>
 80019c4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80019c8:	e7dc      	b.n	8001984 <_strtoul_r+0x7c>
 80019ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019ce:	2322      	movs	r3, #34	; 0x22
 80019d0:	f8ca 3000 	str.w	r3, [sl]
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019d8:	b352      	cbz	r2, 8001a30 <_strtoul_r+0x128>
 80019da:	1e61      	subs	r1, r4, #1
 80019dc:	6011      	str	r1, [r2, #0]
 80019de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019e2:	7825      	ldrb	r5, [r4, #0]
 80019e4:	2701      	movs	r7, #1
 80019e6:	1c84      	adds	r4, r0, #2
 80019e8:	e7a6      	b.n	8001938 <_strtoul_r+0x30>
 80019ea:	2d30      	cmp	r5, #48	; 0x30
 80019ec:	d11a      	bne.n	8001a24 <_strtoul_r+0x11c>
 80019ee:	7820      	ldrb	r0, [r4, #0]
 80019f0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80019f4:	2858      	cmp	r0, #88	; 0x58
 80019f6:	d115      	bne.n	8001a24 <_strtoul_r+0x11c>
 80019f8:	f04f 0910 	mov.w	r9, #16
 80019fc:	7865      	ldrb	r5, [r4, #1]
 80019fe:	464b      	mov	r3, r9
 8001a00:	f04f 0b0f 	mov.w	fp, #15
 8001a04:	3402      	adds	r4, #2
 8001a06:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 8001a0a:	e7aa      	b.n	8001962 <_strtoul_r+0x5a>
 8001a0c:	7823      	ldrb	r3, [r4, #0]
 8001a0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001a12:	2b58      	cmp	r3, #88	; 0x58
 8001a14:	d0f0      	beq.n	80019f8 <_strtoul_r+0xf0>
 8001a16:	2308      	movs	r3, #8
 8001a18:	4699      	mov	r9, r3
 8001a1a:	f04f 0b07 	mov.w	fp, #7
 8001a1e:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 8001a22:	e79e      	b.n	8001962 <_strtoul_r+0x5a>
 8001a24:	f04f 0b0f 	mov.w	fp, #15
 8001a28:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 8001a2c:	4699      	mov	r9, r3
 8001a2e:	e798      	b.n	8001962 <_strtoul_r+0x5a>
 8001a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a34:	20001358 	.word	0x20001358
 8001a38:	19999999 	.word	0x19999999

08001a3c <strtoul>:
 8001a3c:	b410      	push	{r4}
 8001a3e:	4c04      	ldr	r4, [pc, #16]	; (8001a50 <strtoul+0x14>)
 8001a40:	4613      	mov	r3, r2
 8001a42:	460a      	mov	r2, r1
 8001a44:	4601      	mov	r1, r0
 8001a46:	6820      	ldr	r0, [r4, #0]
 8001a48:	bc10      	pop	{r4}
 8001a4a:	f7ff bf5d 	b.w	8001908 <_strtoul_r>
 8001a4e:	bf00      	nop
 8001a50:	200010c0 	.word	0x200010c0

08001a54 <_write_r>:
 8001a54:	b570      	push	{r4, r5, r6, lr}
 8001a56:	460d      	mov	r5, r1
 8001a58:	4c08      	ldr	r4, [pc, #32]	; (8001a7c <_write_r+0x28>)
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4606      	mov	r6, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4628      	mov	r0, r5
 8001a62:	2300      	movs	r3, #0
 8001a64:	6023      	str	r3, [r4, #0]
 8001a66:	f002 fc61 	bl	800432c <_write>
 8001a6a:	1c43      	adds	r3, r0, #1
 8001a6c:	d000      	beq.n	8001a70 <_write_r+0x1c>
 8001a6e:	bd70      	pop	{r4, r5, r6, pc}
 8001a70:	6823      	ldr	r3, [r4, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0fb      	beq.n	8001a6e <_write_r+0x1a>
 8001a76:	6033      	str	r3, [r6, #0]
 8001a78:	bd70      	pop	{r4, r5, r6, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000334 	.word	0x20000334

08001a80 <_close_r>:
 8001a80:	b538      	push	{r3, r4, r5, lr}
 8001a82:	4c07      	ldr	r4, [pc, #28]	; (8001aa0 <_close_r+0x20>)
 8001a84:	2300      	movs	r3, #0
 8001a86:	4605      	mov	r5, r0
 8001a88:	4608      	mov	r0, r1
 8001a8a:	6023      	str	r3, [r4, #0]
 8001a8c:	f002 fc52 	bl	8004334 <_close>
 8001a90:	1c43      	adds	r3, r0, #1
 8001a92:	d000      	beq.n	8001a96 <_close_r+0x16>
 8001a94:	bd38      	pop	{r3, r4, r5, pc}
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0fb      	beq.n	8001a94 <_close_r+0x14>
 8001a9c:	602b      	str	r3, [r5, #0]
 8001a9e:	bd38      	pop	{r3, r4, r5, pc}
 8001aa0:	20000334 	.word	0x20000334

08001aa4 <__env_lock>:
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop

08001aa8 <__env_unlock>:
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop

08001aac <_lseek_r>:
 8001aac:	b570      	push	{r4, r5, r6, lr}
 8001aae:	460d      	mov	r5, r1
 8001ab0:	4c08      	ldr	r4, [pc, #32]	; (8001ad4 <_lseek_r+0x28>)
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4606      	mov	r6, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4628      	mov	r0, r5
 8001aba:	2300      	movs	r3, #0
 8001abc:	6023      	str	r3, [r4, #0]
 8001abe:	f002 fc3c 	bl	800433a <_lseek>
 8001ac2:	1c43      	adds	r3, r0, #1
 8001ac4:	d000      	beq.n	8001ac8 <_lseek_r+0x1c>
 8001ac6:	bd70      	pop	{r4, r5, r6, pc}
 8001ac8:	6823      	ldr	r3, [r4, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0fb      	beq.n	8001ac6 <_lseek_r+0x1a>
 8001ace:	6033      	str	r3, [r6, #0]
 8001ad0:	bd70      	pop	{r4, r5, r6, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000334 	.word	0x20000334

08001ad8 <_sungetc_r>:
 8001ad8:	b538      	push	{r3, r4, r5, lr}
 8001ada:	1c4b      	adds	r3, r1, #1
 8001adc:	d01a      	beq.n	8001b14 <_sungetc_r+0x3c>
 8001ade:	8993      	ldrh	r3, [r2, #12]
 8001ae0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8001ae2:	f023 0320 	bic.w	r3, r3, #32
 8001ae6:	b2cd      	uxtb	r5, r1
 8001ae8:	8193      	strh	r3, [r2, #12]
 8001aea:	b1b4      	cbz	r4, 8001b1a <_sungetc_r+0x42>
 8001aec:	4614      	mov	r4, r2
 8001aee:	6852      	ldr	r2, [r2, #4]
 8001af0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001af2:	429a      	cmp	r2, r3
 8001af4:	da09      	bge.n	8001b0a <_sungetc_r+0x32>
 8001af6:	6823      	ldr	r3, [r4, #0]
 8001af8:	1e5a      	subs	r2, r3, #1
 8001afa:	6022      	str	r2, [r4, #0]
 8001afc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8001b00:	6863      	ldr	r3, [r4, #4]
 8001b02:	3301      	adds	r3, #1
 8001b04:	6063      	str	r3, [r4, #4]
 8001b06:	4628      	mov	r0, r5
 8001b08:	bd38      	pop	{r3, r4, r5, pc}
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	f000 fc52 	bl	80023b4 <__submore>
 8001b10:	2800      	cmp	r0, #0
 8001b12:	d0f0      	beq.n	8001af6 <_sungetc_r+0x1e>
 8001b14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001b18:	e7f5      	b.n	8001b06 <_sungetc_r+0x2e>
 8001b1a:	6911      	ldr	r1, [r2, #16]
 8001b1c:	6813      	ldr	r3, [r2, #0]
 8001b1e:	b129      	cbz	r1, 8001b2c <_sungetc_r+0x54>
 8001b20:	4299      	cmp	r1, r3
 8001b22:	d203      	bcs.n	8001b2c <_sungetc_r+0x54>
 8001b24:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8001b28:	428d      	cmp	r5, r1
 8001b2a:	d00f      	beq.n	8001b4c <_sungetc_r+0x74>
 8001b2c:	6393      	str	r3, [r2, #56]	; 0x38
 8001b2e:	4613      	mov	r3, r2
 8001b30:	6854      	ldr	r4, [r2, #4]
 8001b32:	63d4      	str	r4, [r2, #60]	; 0x3c
 8001b34:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8001b38:	2103      	movs	r1, #3
 8001b3a:	6310      	str	r0, [r2, #48]	; 0x30
 8001b3c:	6351      	str	r1, [r2, #52]	; 0x34
 8001b3e:	f803 5f42 	strb.w	r5, [r3, #66]!
 8001b42:	2101      	movs	r1, #1
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	6051      	str	r1, [r2, #4]
 8001b48:	4628      	mov	r0, r5
 8001b4a:	bd38      	pop	{r3, r4, r5, pc}
 8001b4c:	6851      	ldr	r1, [r2, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	3101      	adds	r1, #1
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	6051      	str	r1, [r2, #4]
 8001b56:	e7d6      	b.n	8001b06 <_sungetc_r+0x2e>

08001b58 <__ssrefill_r>:
 8001b58:	b510      	push	{r4, lr}
 8001b5a:	460c      	mov	r4, r1
 8001b5c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001b5e:	b169      	cbz	r1, 8001b7c <__ssrefill_r+0x24>
 8001b60:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8001b64:	4299      	cmp	r1, r3
 8001b66:	d001      	beq.n	8001b6c <__ssrefill_r+0x14>
 8001b68:	f7ff fcca 	bl	8001500 <_free_r>
 8001b6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b6e:	6063      	str	r3, [r4, #4]
 8001b70:	2000      	movs	r0, #0
 8001b72:	6320      	str	r0, [r4, #48]	; 0x30
 8001b74:	b113      	cbz	r3, 8001b7c <__ssrefill_r+0x24>
 8001b76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b78:	6023      	str	r3, [r4, #0]
 8001b7a:	bd10      	pop	{r4, pc}
 8001b7c:	89a3      	ldrh	r3, [r4, #12]
 8001b7e:	6922      	ldr	r2, [r4, #16]
 8001b80:	6022      	str	r2, [r4, #0]
 8001b82:	f043 0320 	orr.w	r3, r3, #32
 8001b86:	2200      	movs	r2, #0
 8001b88:	81a3      	strh	r3, [r4, #12]
 8001b8a:	6062      	str	r2, [r4, #4]
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b90:	bd10      	pop	{r4, pc}
 8001b92:	bf00      	nop

08001b94 <__ssvfiscanf_r>:
 8001b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b98:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8001b9c:	f8df c278 	ldr.w	ip, [pc, #632]	; 8001e18 <__ssvfiscanf_r+0x284>
 8001ba0:	f8df e278 	ldr.w	lr, [pc, #632]	; 8001e1c <__ssvfiscanf_r+0x288>
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	f10d 080c 	add.w	r8, sp, #12
 8001baa:	2300      	movs	r3, #0
 8001bac:	4d98      	ldr	r5, [pc, #608]	; (8001e10 <__ssvfiscanf_r+0x27c>)
 8001bae:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8001e14 <__ssvfiscanf_r+0x280>
 8001bb2:	f8df a26c 	ldr.w	sl, [pc, #620]	; 8001e20 <__ssvfiscanf_r+0x28c>
 8001bb6:	f8cd c288 	str.w	ip, [sp, #648]	; 0x288
 8001bba:	4607      	mov	r7, r0
 8001bbc:	460c      	mov	r4, r1
 8001bbe:	4616      	mov	r6, r2
 8001bc0:	f8cd e28c 	str.w	lr, [sp, #652]	; 0x28c
 8001bc4:	9346      	str	r3, [sp, #280]	; 0x118
 8001bc6:	9347      	str	r3, [sp, #284]	; 0x11c
 8001bc8:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 8001bcc:	7833      	ldrb	r3, [r6, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d02d      	beq.n	8001c2e <__ssvfiscanf_r+0x9a>
 8001bd2:	682a      	ldr	r2, [r5, #0]
 8001bd4:	441a      	add	r2, r3
 8001bd6:	7852      	ldrb	r2, [r2, #1]
 8001bd8:	f012 0208 	ands.w	r2, r2, #8
 8001bdc:	d01a      	beq.n	8001c14 <__ssvfiscanf_r+0x80>
 8001bde:	6862      	ldr	r2, [r4, #4]
 8001be0:	e00e      	b.n	8001c00 <__ssvfiscanf_r+0x6c>
 8001be2:	6823      	ldr	r3, [r4, #0]
 8001be4:	682a      	ldr	r2, [r5, #0]
 8001be6:	7819      	ldrb	r1, [r3, #0]
 8001be8:	440a      	add	r2, r1
 8001bea:	3301      	adds	r3, #1
 8001bec:	7852      	ldrb	r2, [r2, #1]
 8001bee:	0712      	lsls	r2, r2, #28
 8001bf0:	d50e      	bpl.n	8001c10 <__ssvfiscanf_r+0x7c>
 8001bf2:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8001bf4:	6862      	ldr	r2, [r4, #4]
 8001bf6:	6023      	str	r3, [r4, #0]
 8001bf8:	3101      	adds	r1, #1
 8001bfa:	3a01      	subs	r2, #1
 8001bfc:	9147      	str	r1, [sp, #284]	; 0x11c
 8001bfe:	6062      	str	r2, [r4, #4]
 8001c00:	2a00      	cmp	r2, #0
 8001c02:	dcee      	bgt.n	8001be2 <__ssvfiscanf_r+0x4e>
 8001c04:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8001c06:	4621      	mov	r1, r4
 8001c08:	4638      	mov	r0, r7
 8001c0a:	4798      	blx	r3
 8001c0c:	2800      	cmp	r0, #0
 8001c0e:	d0e8      	beq.n	8001be2 <__ssvfiscanf_r+0x4e>
 8001c10:	3601      	adds	r6, #1
 8001c12:	e7db      	b.n	8001bcc <__ssvfiscanf_r+0x38>
 8001c14:	2b25      	cmp	r3, #37	; 0x25
 8001c16:	f106 0b01 	add.w	fp, r6, #1
 8001c1a:	d00d      	beq.n	8001c38 <__ssvfiscanf_r+0xa4>
 8001c1c:	6862      	ldr	r2, [r4, #4]
 8001c1e:	2a00      	cmp	r2, #0
 8001c20:	f340 80bd 	ble.w	8001d9e <__ssvfiscanf_r+0x20a>
 8001c24:	6822      	ldr	r2, [r4, #0]
 8001c26:	7811      	ldrb	r1, [r2, #0]
 8001c28:	428b      	cmp	r3, r1
 8001c2a:	f000 80ae 	beq.w	8001d8a <__ssvfiscanf_r+0x1f6>
 8001c2e:	9846      	ldr	r0, [sp, #280]	; 0x118
 8001c30:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8001c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c38:	9245      	str	r2, [sp, #276]	; 0x114
 8001c3a:	9243      	str	r2, [sp, #268]	; 0x10c
 8001c3c:	7871      	ldrb	r1, [r6, #1]
 8001c3e:	292a      	cmp	r1, #42	; 0x2a
 8001c40:	f000 80b7 	beq.w	8001db2 <__ssvfiscanf_r+0x21e>
 8001c44:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8001c48:	2a09      	cmp	r2, #9
 8001c4a:	d80c      	bhi.n	8001c66 <__ssvfiscanf_r+0xd2>
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c52:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8001c56:	3a30      	subs	r2, #48	; 0x30
 8001c58:	9245      	str	r2, [sp, #276]	; 0x114
 8001c5a:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8001c5e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8001c62:	2809      	cmp	r0, #9
 8001c64:	d9f3      	bls.n	8001c4e <__ssvfiscanf_r+0xba>
 8001c66:	2203      	movs	r2, #3
 8001c68:	486a      	ldr	r0, [pc, #424]	; (8001e14 <__ssvfiscanf_r+0x280>)
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	f000 fe60 	bl	8002930 <memchr>
 8001c70:	9b00      	ldr	r3, [sp, #0]
 8001c72:	b140      	cbz	r0, 8001c86 <__ssvfiscanf_r+0xf2>
 8001c74:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8001c76:	eba0 0009 	sub.w	r0, r0, r9
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4082      	lsls	r2, r0
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	f10b 0b01 	add.w	fp, fp, #1
 8001c84:	9243      	str	r2, [sp, #268]	; 0x10c
 8001c86:	f89b 2000 	ldrb.w	r2, [fp]
 8001c8a:	f10b 0601 	add.w	r6, fp, #1
 8001c8e:	2a78      	cmp	r2, #120	; 0x78
 8001c90:	f200 8125 	bhi.w	8001ede <__ssvfiscanf_r+0x34a>
 8001c94:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001c98:	012300df 	.word	0x012300df
 8001c9c:	01230123 	.word	0x01230123
 8001ca0:	01230123 	.word	0x01230123
 8001ca4:	01230123 	.word	0x01230123
 8001ca8:	01230123 	.word	0x01230123
 8001cac:	01230123 	.word	0x01230123
 8001cb0:	01230123 	.word	0x01230123
 8001cb4:	01230123 	.word	0x01230123
 8001cb8:	01230123 	.word	0x01230123
 8001cbc:	01230123 	.word	0x01230123
 8001cc0:	01230123 	.word	0x01230123
 8001cc4:	01230123 	.word	0x01230123
 8001cc8:	01230123 	.word	0x01230123
 8001ccc:	01230123 	.word	0x01230123
 8001cd0:	01230123 	.word	0x01230123
 8001cd4:	01230123 	.word	0x01230123
 8001cd8:	01230123 	.word	0x01230123
 8001cdc:	01230123 	.word	0x01230123
 8001ce0:	00e20123 	.word	0x00e20123
 8001ce4:	01230123 	.word	0x01230123
 8001ce8:	01230123 	.word	0x01230123
 8001cec:	01230123 	.word	0x01230123
 8001cf0:	01230123 	.word	0x01230123
 8001cf4:	01230123 	.word	0x01230123
 8001cf8:	01230123 	.word	0x01230123
 8001cfc:	01230123 	.word	0x01230123
 8001d00:	01230123 	.word	0x01230123
 8001d04:	01230123 	.word	0x01230123
 8001d08:	01230123 	.word	0x01230123
 8001d0c:	01230123 	.word	0x01230123
 8001d10:	01230123 	.word	0x01230123
 8001d14:	01230123 	.word	0x01230123
 8001d18:	01230123 	.word	0x01230123
 8001d1c:	01230123 	.word	0x01230123
 8001d20:	00e40123 	.word	0x00e40123
 8001d24:	00e400e4 	.word	0x00e400e4
 8001d28:	01230123 	.word	0x01230123
 8001d2c:	01230123 	.word	0x01230123
 8001d30:	01230123 	.word	0x01230123
 8001d34:	01230123 	.word	0x01230123
 8001d38:	01230123 	.word	0x01230123
 8001d3c:	01230123 	.word	0x01230123
 8001d40:	01230123 	.word	0x01230123
 8001d44:	01230123 	.word	0x01230123
 8001d48:	012300e7 	.word	0x012300e7
 8001d4c:	00f20123 	.word	0x00f20123
 8001d50:	01230123 	.word	0x01230123
 8001d54:	01230123 	.word	0x01230123
 8001d58:	01230123 	.word	0x01230123
 8001d5c:	00fe0123 	.word	0x00fe0123
 8001d60:	00e40105 	.word	0x00e40105
 8001d64:	00e400e4 	.word	0x00e400e4
 8001d68:	01080123 	.word	0x01080123
 8001d6c:	01230123 	.word	0x01230123
 8001d70:	01230123 	.word	0x01230123
 8001d74:	011b010c 	.word	0x011b010c
 8001d78:	0123011f 	.word	0x0123011f
 8001d7c:	00930123 	.word	0x00930123
 8001d80:	01050123 	.word	0x01050123
 8001d84:	01230123 	.word	0x01230123
 8001d88:	00e7      	.short	0x00e7
 8001d8a:	6861      	ldr	r1, [r4, #4]
 8001d8c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8001d8e:	3201      	adds	r2, #1
 8001d90:	3901      	subs	r1, #1
 8001d92:	3301      	adds	r3, #1
 8001d94:	6022      	str	r2, [r4, #0]
 8001d96:	465e      	mov	r6, fp
 8001d98:	6061      	str	r1, [r4, #4]
 8001d9a:	9347      	str	r3, [sp, #284]	; 0x11c
 8001d9c:	e716      	b.n	8001bcc <__ssvfiscanf_r+0x38>
 8001d9e:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	4621      	mov	r1, r4
 8001da4:	4638      	mov	r0, r7
 8001da6:	4790      	blx	r2
 8001da8:	9b00      	ldr	r3, [sp, #0]
 8001daa:	2800      	cmp	r0, #0
 8001dac:	f43f af3a 	beq.w	8001c24 <__ssvfiscanf_r+0x90>
 8001db0:	e025      	b.n	8001dfe <__ssvfiscanf_r+0x26a>
 8001db2:	2210      	movs	r2, #16
 8001db4:	9243      	str	r2, [sp, #268]	; 0x10c
 8001db6:	78b1      	ldrb	r1, [r6, #2]
 8001db8:	f106 0b02 	add.w	fp, r6, #2
 8001dbc:	e742      	b.n	8001c44 <__ssvfiscanf_r+0xb0>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	9349      	str	r3, [sp, #292]	; 0x124
 8001dc2:	6863      	ldr	r3, [r4, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f340 809d 	ble.w	8001f04 <__ssvfiscanf_r+0x370>
 8001dca:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8001dcc:	065a      	lsls	r2, r3, #25
 8001dce:	d52f      	bpl.n	8001e30 <__ssvfiscanf_r+0x29c>
 8001dd0:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	f340 8088 	ble.w	8001ee8 <__ssvfiscanf_r+0x354>
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	f340 808c 	ble.w	8001ef6 <__ssvfiscanf_r+0x362>
 8001dde:	f1ba 0f00 	cmp.w	sl, #0
 8001de2:	f43f aef3 	beq.w	8001bcc <__ssvfiscanf_r+0x38>
 8001de6:	ab01      	add	r3, sp, #4
 8001de8:	4622      	mov	r2, r4
 8001dea:	a943      	add	r1, sp, #268	; 0x10c
 8001dec:	4638      	mov	r0, r7
 8001dee:	f3af 8000 	nop.w
 8001df2:	2801      	cmp	r0, #1
 8001df4:	f43f af1b 	beq.w	8001c2e <__ssvfiscanf_r+0x9a>
 8001df8:	2802      	cmp	r0, #2
 8001dfa:	f47f aee7 	bne.w	8001bcc <__ssvfiscanf_r+0x38>
 8001dfe:	9846      	ldr	r0, [sp, #280]	; 0x118
 8001e00:	b348      	cbz	r0, 8001e56 <__ssvfiscanf_r+0x2c2>
 8001e02:	89a3      	ldrh	r3, [r4, #12]
 8001e04:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001e08:	bf18      	it	ne
 8001e0a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001e0e:	e70f      	b.n	8001c30 <__ssvfiscanf_r+0x9c>
 8001e10:	20001358 	.word	0x20001358
 8001e14:	0800631c 	.word	0x0800631c
 8001e18:	08001ad9 	.word	0x08001ad9
 8001e1c:	08001b59 	.word	0x08001b59
 8001e20:	00000000 	.word	0x00000000
 8001e24:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8001e26:	4621      	mov	r1, r4
 8001e28:	4638      	mov	r0, r7
 8001e2a:	4798      	blx	r3
 8001e2c:	2800      	cmp	r0, #0
 8001e2e:	d1e6      	bne.n	8001dfe <__ssvfiscanf_r+0x26a>
 8001e30:	6828      	ldr	r0, [r5, #0]
 8001e32:	6822      	ldr	r2, [r4, #0]
 8001e34:	e000      	b.n	8001e38 <__ssvfiscanf_r+0x2a4>
 8001e36:	6022      	str	r2, [r4, #0]
 8001e38:	7813      	ldrb	r3, [r2, #0]
 8001e3a:	4403      	add	r3, r0
 8001e3c:	3201      	adds	r2, #1
 8001e3e:	785b      	ldrb	r3, [r3, #1]
 8001e40:	071b      	lsls	r3, r3, #28
 8001e42:	d5c5      	bpl.n	8001dd0 <__ssvfiscanf_r+0x23c>
 8001e44:	6863      	ldr	r3, [r4, #4]
 8001e46:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	3101      	adds	r1, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	9147      	str	r1, [sp, #284]	; 0x11c
 8001e50:	6063      	str	r3, [r4, #4]
 8001e52:	dcf0      	bgt.n	8001e36 <__ssvfiscanf_r+0x2a2>
 8001e54:	e7e6      	b.n	8001e24 <__ssvfiscanf_r+0x290>
 8001e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e5a:	e6e9      	b.n	8001c30 <__ssvfiscanf_r+0x9c>
 8001e5c:	46b3      	mov	fp, r6
 8001e5e:	e6dd      	b.n	8001c1c <__ssvfiscanf_r+0x88>
 8001e60:	2305      	movs	r3, #5
 8001e62:	9349      	str	r3, [sp, #292]	; 0x124
 8001e64:	e7ad      	b.n	8001dc2 <__ssvfiscanf_r+0x22e>
 8001e66:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8001e68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e6c:	2110      	movs	r1, #16
 8001e6e:	9343      	str	r3, [sp, #268]	; 0x10c
 8001e70:	9144      	str	r1, [sp, #272]	; 0x110
 8001e72:	2a6e      	cmp	r2, #110	; 0x6e
 8001e74:	bfcc      	ite	gt
 8001e76:	2304      	movgt	r3, #4
 8001e78:	2303      	movle	r3, #3
 8001e7a:	e7a1      	b.n	8001dc0 <__ssvfiscanf_r+0x22c>
 8001e7c:	4631      	mov	r1, r6
 8001e7e:	4640      	mov	r0, r8
 8001e80:	f000 f9ca 	bl	8002218 <__sccl>
 8001e84:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8001e86:	2201      	movs	r2, #1
 8001e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e8c:	4606      	mov	r6, r0
 8001e8e:	9343      	str	r3, [sp, #268]	; 0x10c
 8001e90:	9249      	str	r2, [sp, #292]	; 0x124
 8001e92:	e796      	b.n	8001dc2 <__ssvfiscanf_r+0x22e>
 8001e94:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8001e96:	2200      	movs	r2, #0
 8001e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e9c:	9343      	str	r3, [sp, #268]	; 0x10c
 8001e9e:	9249      	str	r2, [sp, #292]	; 0x124
 8001ea0:	e78f      	b.n	8001dc2 <__ssvfiscanf_r+0x22e>
 8001ea2:	230a      	movs	r3, #10
 8001ea4:	9344      	str	r3, [sp, #272]	; 0x110
 8001ea6:	e7e4      	b.n	8001e72 <__ssvfiscanf_r+0x2de>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9344      	str	r3, [sp, #272]	; 0x110
 8001eac:	2303      	movs	r3, #3
 8001eae:	e787      	b.n	8001dc0 <__ssvfiscanf_r+0x22c>
 8001eb0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8001eb2:	06d8      	lsls	r0, r3, #27
 8001eb4:	f53f ae8a 	bmi.w	8001bcc <__ssvfiscanf_r+0x38>
 8001eb8:	07d9      	lsls	r1, r3, #31
 8001eba:	9b01      	ldr	r3, [sp, #4]
 8001ebc:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8001ebe:	f103 0104 	add.w	r1, r3, #4
 8001ec2:	9101      	str	r1, [sp, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	bf4c      	ite	mi
 8001ec8:	801a      	strhmi	r2, [r3, #0]
 8001eca:	601a      	strpl	r2, [r3, #0]
 8001ecc:	e67e      	b.n	8001bcc <__ssvfiscanf_r+0x38>
 8001ece:	2308      	movs	r3, #8
 8001ed0:	9344      	str	r3, [sp, #272]	; 0x110
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	e774      	b.n	8001dc0 <__ssvfiscanf_r+0x22c>
 8001ed6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8001ed8:	f043 0320 	orr.w	r3, r3, #32
 8001edc:	e7c4      	b.n	8001e68 <__ssvfiscanf_r+0x2d4>
 8001ede:	2203      	movs	r2, #3
 8001ee0:	230a      	movs	r3, #10
 8001ee2:	9249      	str	r2, [sp, #292]	; 0x124
 8001ee4:	9344      	str	r3, [sp, #272]	; 0x110
 8001ee6:	e76c      	b.n	8001dc2 <__ssvfiscanf_r+0x22e>
 8001ee8:	ab01      	add	r3, sp, #4
 8001eea:	4622      	mov	r2, r4
 8001eec:	a943      	add	r1, sp, #268	; 0x10c
 8001eee:	4638      	mov	r0, r7
 8001ef0:	f000 f810 	bl	8001f14 <_scanf_chars>
 8001ef4:	e77d      	b.n	8001df2 <__ssvfiscanf_r+0x25e>
 8001ef6:	ab01      	add	r3, sp, #4
 8001ef8:	4622      	mov	r2, r4
 8001efa:	a943      	add	r1, sp, #268	; 0x10c
 8001efc:	4638      	mov	r0, r7
 8001efe:	f000 f86b 	bl	8001fd8 <_scanf_i>
 8001f02:	e776      	b.n	8001df2 <__ssvfiscanf_r+0x25e>
 8001f04:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8001f06:	4621      	mov	r1, r4
 8001f08:	4638      	mov	r0, r7
 8001f0a:	4798      	blx	r3
 8001f0c:	2800      	cmp	r0, #0
 8001f0e:	f43f af5c 	beq.w	8001dca <__ssvfiscanf_r+0x236>
 8001f12:	e774      	b.n	8001dfe <__ssvfiscanf_r+0x26a>

08001f14 <_scanf_chars>:
 8001f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f18:	460d      	mov	r5, r1
 8001f1a:	6889      	ldr	r1, [r1, #8]
 8001f1c:	4680      	mov	r8, r0
 8001f1e:	4614      	mov	r4, r2
 8001f20:	69a8      	ldr	r0, [r5, #24]
 8001f22:	b929      	cbnz	r1, 8001f30 <_scanf_chars+0x1c>
 8001f24:	2800      	cmp	r0, #0
 8001f26:	bf0c      	ite	eq
 8001f28:	2201      	moveq	r2, #1
 8001f2a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8001f2e:	60aa      	str	r2, [r5, #8]
 8001f30:	682a      	ldr	r2, [r5, #0]
 8001f32:	06d6      	lsls	r6, r2, #27
 8001f34:	d549      	bpl.n	8001fca <_scanf_chars+0xb6>
 8001f36:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8001fd4 <_scanf_chars+0xc0>
 8001f3a:	2600      	movs	r6, #0
 8001f3c:	b310      	cbz	r0, 8001f84 <_scanf_chars+0x70>
 8001f3e:	2801      	cmp	r0, #1
 8001f40:	d022      	beq.n	8001f88 <_scanf_chars+0x74>
 8001f42:	2802      	cmp	r0, #2
 8001f44:	d127      	bne.n	8001f96 <_scanf_chars+0x82>
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	f8d9 2000 	ldr.w	r2, [r9]
 8001f4c:	7819      	ldrb	r1, [r3, #0]
 8001f4e:	440a      	add	r2, r1
 8001f50:	7852      	ldrb	r2, [r2, #1]
 8001f52:	0712      	lsls	r2, r2, #28
 8001f54:	d41f      	bmi.n	8001f96 <_scanf_chars+0x82>
 8001f56:	682a      	ldr	r2, [r5, #0]
 8001f58:	06d1      	lsls	r1, r2, #27
 8001f5a:	f106 0601 	add.w	r6, r6, #1
 8001f5e:	d403      	bmi.n	8001f68 <_scanf_chars+0x54>
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	703b      	strb	r3, [r7, #0]
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	3701      	adds	r7, #1
 8001f68:	68a9      	ldr	r1, [r5, #8]
 8001f6a:	6860      	ldr	r0, [r4, #4]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	3801      	subs	r0, #1
 8001f70:	3901      	subs	r1, #1
 8001f72:	6023      	str	r3, [r4, #0]
 8001f74:	6060      	str	r0, [r4, #4]
 8001f76:	60a9      	str	r1, [r5, #8]
 8001f78:	b169      	cbz	r1, 8001f96 <_scanf_chars+0x82>
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	dd1b      	ble.n	8001fb6 <_scanf_chars+0xa2>
 8001f7e:	69a8      	ldr	r0, [r5, #24]
 8001f80:	2800      	cmp	r0, #0
 8001f82:	d1dc      	bne.n	8001f3e <_scanf_chars+0x2a>
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	e7e6      	b.n	8001f56 <_scanf_chars+0x42>
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	696a      	ldr	r2, [r5, #20]
 8001f8c:	7819      	ldrb	r1, [r3, #0]
 8001f8e:	5c52      	ldrb	r2, [r2, r1]
 8001f90:	2a00      	cmp	r2, #0
 8001f92:	d1e0      	bne.n	8001f56 <_scanf_chars+0x42>
 8001f94:	b1be      	cbz	r6, 8001fc6 <_scanf_chars+0xb2>
 8001f96:	682b      	ldr	r3, [r5, #0]
 8001f98:	f013 0310 	ands.w	r3, r3, #16
 8001f9c:	d105      	bne.n	8001faa <_scanf_chars+0x96>
 8001f9e:	68ea      	ldr	r2, [r5, #12]
 8001fa0:	69a9      	ldr	r1, [r5, #24]
 8001fa2:	3201      	adds	r2, #1
 8001fa4:	60ea      	str	r2, [r5, #12]
 8001fa6:	b101      	cbz	r1, 8001faa <_scanf_chars+0x96>
 8001fa8:	703b      	strb	r3, [r7, #0]
 8001faa:	692b      	ldr	r3, [r5, #16]
 8001fac:	441e      	add	r6, r3
 8001fae:	612e      	str	r6, [r5, #16]
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fb6:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
 8001fba:	4621      	mov	r1, r4
 8001fbc:	4640      	mov	r0, r8
 8001fbe:	4798      	blx	r3
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	d0dc      	beq.n	8001f7e <_scanf_chars+0x6a>
 8001fc4:	e7e7      	b.n	8001f96 <_scanf_chars+0x82>
 8001fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	1d11      	adds	r1, r2, #4
 8001fce:	6019      	str	r1, [r3, #0]
 8001fd0:	6817      	ldr	r7, [r2, #0]
 8001fd2:	e7b0      	b.n	8001f36 <_scanf_chars+0x22>
 8001fd4:	20001358 	.word	0x20001358

08001fd8 <_scanf_i>:
 8001fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fdc:	460c      	mov	r4, r1
 8001fde:	b087      	sub	sp, #28
 8001fe0:	4f7e      	ldr	r7, [pc, #504]	; (80021dc <_scanf_i+0x204>)
 8001fe2:	f8df 8204 	ldr.w	r8, [pc, #516]	; 80021e8 <_scanf_i+0x210>
 8001fe6:	4e7e      	ldr	r6, [pc, #504]	; (80021e0 <_scanf_i+0x208>)
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	4681      	mov	r9, r0
 8001fec:	4615      	mov	r5, r2
 8001fee:	69a3      	ldr	r3, [r4, #24]
 8001ff0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8001ff4:	68a7      	ldr	r7, [r4, #8]
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	bf08      	it	eq
 8001ffa:	46b0      	moveq	r8, r6
 8001ffc:	f107 3eff 	add.w	lr, r7, #4294967295	; 0xffffffff
 8002000:	f8cd 8000 	str.w	r8, [sp]
 8002004:	f5be 7fae 	cmp.w	lr, #348	; 0x15c
 8002008:	f10d 080c 	add.w	r8, sp, #12
 800200c:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8002010:	f240 8090 	bls.w	8002134 <_scanf_i+0x15c>
 8002014:	f240 135d 	movw	r3, #349	; 0x15d
 8002018:	f46f 76ae 	mvn.w	r6, #348	; 0x15c
 800201c:	4437      	add	r7, r6
 800201e:	60a3      	str	r3, [r4, #8]
 8002020:	6823      	ldr	r3, [r4, #0]
 8002022:	f104 0b1c 	add.w	fp, r4, #28
 8002026:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800202a:	6023      	str	r3, [r4, #0]
 800202c:	465e      	mov	r6, fp
 800202e:	f04f 0a00 	mov.w	sl, #0
 8002032:	682b      	ldr	r3, [r5, #0]
 8002034:	f858 002a 	ldr.w	r0, [r8, sl, lsl #2]
 8002038:	7819      	ldrb	r1, [r3, #0]
 800203a:	2202      	movs	r2, #2
 800203c:	f000 fc78 	bl	8002930 <memchr>
 8002040:	b1c0      	cbz	r0, 8002074 <_scanf_i+0x9c>
 8002042:	f1ba 0f01 	cmp.w	sl, #1
 8002046:	f000 80ae 	beq.w	80021a6 <_scanf_i+0x1ce>
 800204a:	f1ba 0f02 	cmp.w	sl, #2
 800204e:	f000 80b1 	beq.w	80021b4 <_scanf_i+0x1dc>
 8002052:	68a3      	ldr	r3, [r4, #8]
 8002054:	1e5a      	subs	r2, r3, #1
 8002056:	60a2      	str	r2, [r4, #8]
 8002058:	b163      	cbz	r3, 8002074 <_scanf_i+0x9c>
 800205a:	682b      	ldr	r3, [r5, #0]
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	602a      	str	r2, [r5, #0]
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	7033      	strb	r3, [r6, #0]
 8002064:	686b      	ldr	r3, [r5, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	f106 0601 	add.w	r6, r6, #1
 800206e:	606b      	str	r3, [r5, #4]
 8002070:	f340 8081 	ble.w	8002176 <_scanf_i+0x19e>
 8002074:	f10a 0a01 	add.w	sl, sl, #1
 8002078:	f1ba 0f03 	cmp.w	sl, #3
 800207c:	d1d9      	bne.n	8002032 <_scanf_i+0x5a>
 800207e:	6861      	ldr	r1, [r4, #4]
 8002080:	2900      	cmp	r1, #0
 8002082:	d059      	beq.n	8002138 <_scanf_i+0x160>
 8002084:	f1c1 0110 	rsb	r1, r1, #16
 8002088:	4b56      	ldr	r3, [pc, #344]	; (80021e4 <_scanf_i+0x20c>)
 800208a:	6960      	ldr	r0, [r4, #20]
 800208c:	4419      	add	r1, r3
 800208e:	f000 f8c3 	bl	8002218 <__sccl>
 8002092:	68a3      	ldr	r3, [r4, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d076      	beq.n	8002186 <_scanf_i+0x1ae>
 8002098:	6829      	ldr	r1, [r5, #0]
 800209a:	6960      	ldr	r0, [r4, #20]
 800209c:	780a      	ldrb	r2, [r1, #0]
 800209e:	5c80      	ldrb	r0, [r0, r2]
 80020a0:	2800      	cmp	r0, #0
 80020a2:	d07e      	beq.n	80021a2 <_scanf_i+0x1ca>
 80020a4:	f04f 0800 	mov.w	r8, #0
 80020a8:	e016      	b.n	80020d8 <_scanf_i+0x100>
 80020aa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80020ae:	6022      	str	r2, [r4, #0]
 80020b0:	780b      	ldrb	r3, [r1, #0]
 80020b2:	7033      	strb	r3, [r6, #0]
 80020b4:	3601      	adds	r6, #1
 80020b6:	686b      	ldr	r3, [r5, #4]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	606b      	str	r3, [r5, #4]
 80020be:	dd1d      	ble.n	80020fc <_scanf_i+0x124>
 80020c0:	682b      	ldr	r3, [r5, #0]
 80020c2:	3301      	adds	r3, #1
 80020c4:	602b      	str	r3, [r5, #0]
 80020c6:	68a3      	ldr	r3, [r4, #8]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	60a3      	str	r3, [r4, #8]
 80020cc:	b1eb      	cbz	r3, 800210a <_scanf_i+0x132>
 80020ce:	6829      	ldr	r1, [r5, #0]
 80020d0:	6960      	ldr	r0, [r4, #20]
 80020d2:	780a      	ldrb	r2, [r1, #0]
 80020d4:	5c80      	ldrb	r0, [r0, r2]
 80020d6:	b1c0      	cbz	r0, 800210a <_scanf_i+0x132>
 80020d8:	2a30      	cmp	r2, #48	; 0x30
 80020da:	6822      	ldr	r2, [r4, #0]
 80020dc:	d1e5      	bne.n	80020aa <_scanf_i+0xd2>
 80020de:	0510      	lsls	r0, r2, #20
 80020e0:	d5e3      	bpl.n	80020aa <_scanf_i+0xd2>
 80020e2:	f108 0801 	add.w	r8, r8, #1
 80020e6:	2f00      	cmp	r7, #0
 80020e8:	d0e5      	beq.n	80020b6 <_scanf_i+0xde>
 80020ea:	3301      	adds	r3, #1
 80020ec:	60a3      	str	r3, [r4, #8]
 80020ee:	686b      	ldr	r3, [r5, #4]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 80020f8:	606b      	str	r3, [r5, #4]
 80020fa:	dce1      	bgt.n	80020c0 <_scanf_i+0xe8>
 80020fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002100:	4629      	mov	r1, r5
 8002102:	4648      	mov	r0, r9
 8002104:	4798      	blx	r3
 8002106:	2800      	cmp	r0, #0
 8002108:	d0dd      	beq.n	80020c6 <_scanf_i+0xee>
 800210a:	6822      	ldr	r2, [r4, #0]
 800210c:	05d1      	lsls	r1, r2, #23
 800210e:	d504      	bpl.n	800211a <_scanf_i+0x142>
 8002110:	455e      	cmp	r6, fp
 8002112:	d83b      	bhi.n	800218c <_scanf_i+0x1b4>
 8002114:	455e      	cmp	r6, fp
 8002116:	d042      	beq.n	800219e <_scanf_i+0x1c6>
 8002118:	6822      	ldr	r2, [r4, #0]
 800211a:	f012 0210 	ands.w	r2, r2, #16
 800211e:	d00f      	beq.n	8002140 <_scanf_i+0x168>
 8002120:	6923      	ldr	r3, [r4, #16]
 8002122:	eba6 060b 	sub.w	r6, r6, fp
 8002126:	44b0      	add	r8, r6
 8002128:	4443      	add	r3, r8
 800212a:	6123      	str	r3, [r4, #16]
 800212c:	2000      	movs	r0, #0
 800212e:	b007      	add	sp, #28
 8002130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002134:	2700      	movs	r7, #0
 8002136:	e773      	b.n	8002020 <_scanf_i+0x48>
 8002138:	230a      	movs	r3, #10
 800213a:	6063      	str	r3, [r4, #4]
 800213c:	2106      	movs	r1, #6
 800213e:	e7a3      	b.n	8002088 <_scanf_i+0xb0>
 8002140:	7032      	strb	r2, [r6, #0]
 8002142:	6863      	ldr	r3, [r4, #4]
 8002144:	9d00      	ldr	r5, [sp, #0]
 8002146:	4659      	mov	r1, fp
 8002148:	4648      	mov	r0, r9
 800214a:	47a8      	blx	r5
 800214c:	6823      	ldr	r3, [r4, #0]
 800214e:	9901      	ldr	r1, [sp, #4]
 8002150:	069a      	lsls	r2, r3, #26
 8002152:	d407      	bmi.n	8002164 <_scanf_i+0x18c>
 8002154:	07db      	lsls	r3, r3, #31
 8002156:	d505      	bpl.n	8002164 <_scanf_i+0x18c>
 8002158:	680b      	ldr	r3, [r1, #0]
 800215a:	1d1a      	adds	r2, r3, #4
 800215c:	600a      	str	r2, [r1, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	8018      	strh	r0, [r3, #0]
 8002162:	e004      	b.n	800216e <_scanf_i+0x196>
 8002164:	680b      	ldr	r3, [r1, #0]
 8002166:	1d1a      	adds	r2, r3, #4
 8002168:	600a      	str	r2, [r1, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6018      	str	r0, [r3, #0]
 800216e:	68e3      	ldr	r3, [r4, #12]
 8002170:	3301      	adds	r3, #1
 8002172:	60e3      	str	r3, [r4, #12]
 8002174:	e7d4      	b.n	8002120 <_scanf_i+0x148>
 8002176:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800217a:	4629      	mov	r1, r5
 800217c:	4648      	mov	r0, r9
 800217e:	4798      	blx	r3
 8002180:	2800      	cmp	r0, #0
 8002182:	f43f af77 	beq.w	8002074 <_scanf_i+0x9c>
 8002186:	f04f 0800 	mov.w	r8, #0
 800218a:	e7be      	b.n	800210a <_scanf_i+0x132>
 800218c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8002190:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002194:	462a      	mov	r2, r5
 8002196:	4648      	mov	r0, r9
 8002198:	4798      	blx	r3
 800219a:	3e01      	subs	r6, #1
 800219c:	e7ba      	b.n	8002114 <_scanf_i+0x13c>
 800219e:	2001      	movs	r0, #1
 80021a0:	e7c5      	b.n	800212e <_scanf_i+0x156>
 80021a2:	4680      	mov	r8, r0
 80021a4:	e7b1      	b.n	800210a <_scanf_i+0x132>
 80021a6:	6863      	ldr	r3, [r4, #4]
 80021a8:	b18b      	cbz	r3, 80021ce <_scanf_i+0x1f6>
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	f423 63a0 	bic.w	r3, r3, #1280	; 0x500
 80021b0:	6023      	str	r3, [r4, #0]
 80021b2:	e74e      	b.n	8002052 <_scanf_i+0x7a>
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	f403 62c0 	and.w	r2, r3, #1536	; 0x600
 80021ba:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80021be:	f47f af5e 	bne.w	800207e <_scanf_i+0xa6>
 80021c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c6:	6023      	str	r3, [r4, #0]
 80021c8:	2310      	movs	r3, #16
 80021ca:	6063      	str	r3, [r4, #4]
 80021cc:	e741      	b.n	8002052 <_scanf_i+0x7a>
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	2208      	movs	r2, #8
 80021d2:	6062      	str	r2, [r4, #4]
 80021d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021d8:	e7e8      	b.n	80021ac <_scanf_i+0x1d4>
 80021da:	bf00      	nop
 80021dc:	08005b9c 	.word	0x08005b9c
 80021e0:	0800228d 	.word	0x0800228d
 80021e4:	08006320 	.word	0x08006320
 80021e8:	08001909 	.word	0x08001909

080021ec <_read_r>:
 80021ec:	b570      	push	{r4, r5, r6, lr}
 80021ee:	460d      	mov	r5, r1
 80021f0:	4c08      	ldr	r4, [pc, #32]	; (8002214 <_read_r+0x28>)
 80021f2:	4611      	mov	r1, r2
 80021f4:	4606      	mov	r6, r0
 80021f6:	461a      	mov	r2, r3
 80021f8:	4628      	mov	r0, r5
 80021fa:	2300      	movs	r3, #0
 80021fc:	6023      	str	r3, [r4, #0]
 80021fe:	f002 f891 	bl	8004324 <_read>
 8002202:	1c43      	adds	r3, r0, #1
 8002204:	d000      	beq.n	8002208 <_read_r+0x1c>
 8002206:	bd70      	pop	{r4, r5, r6, pc}
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0fb      	beq.n	8002206 <_read_r+0x1a>
 800220e:	6033      	str	r3, [r6, #0]
 8002210:	bd70      	pop	{r4, r5, r6, pc}
 8002212:	bf00      	nop
 8002214:	20000334 	.word	0x20000334

08002218 <__sccl>:
 8002218:	b470      	push	{r4, r5, r6}
 800221a:	780c      	ldrb	r4, [r1, #0]
 800221c:	2c5e      	cmp	r4, #94	; 0x5e
 800221e:	d02f      	beq.n	8002280 <__sccl+0x68>
 8002220:	2200      	movs	r2, #0
 8002222:	1c4d      	adds	r5, r1, #1
 8002224:	4616      	mov	r6, r2
 8002226:	1e43      	subs	r3, r0, #1
 8002228:	f100 01ff 	add.w	r1, r0, #255	; 0xff
 800222c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002230:	428b      	cmp	r3, r1
 8002232:	d1fb      	bne.n	800222c <__sccl+0x14>
 8002234:	b174      	cbz	r4, 8002254 <__sccl+0x3c>
 8002236:	f086 0201 	eor.w	r2, r6, #1
 800223a:	5502      	strb	r2, [r0, r4]
 800223c:	1c6e      	adds	r6, r5, #1
 800223e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8002242:	2b2d      	cmp	r3, #45	; 0x2d
 8002244:	4631      	mov	r1, r6
 8002246:	d00d      	beq.n	8002264 <__sccl+0x4c>
 8002248:	2b5d      	cmp	r3, #93	; 0x5d
 800224a:	d004      	beq.n	8002256 <__sccl+0x3e>
 800224c:	b133      	cbz	r3, 800225c <__sccl+0x44>
 800224e:	461c      	mov	r4, r3
 8002250:	4635      	mov	r5, r6
 8002252:	e7f2      	b.n	800223a <__sccl+0x22>
 8002254:	1e69      	subs	r1, r5, #1
 8002256:	4608      	mov	r0, r1
 8002258:	bc70      	pop	{r4, r5, r6}
 800225a:	4770      	bx	lr
 800225c:	4629      	mov	r1, r5
 800225e:	4608      	mov	r0, r1
 8002260:	bc70      	pop	{r4, r5, r6}
 8002262:	4770      	bx	lr
 8002264:	7869      	ldrb	r1, [r5, #1]
 8002266:	295d      	cmp	r1, #93	; 0x5d
 8002268:	d0f1      	beq.n	800224e <__sccl+0x36>
 800226a:	428c      	cmp	r4, r1
 800226c:	dcef      	bgt.n	800224e <__sccl+0x36>
 800226e:	3502      	adds	r5, #2
 8002270:	1903      	adds	r3, r0, r4
 8002272:	3401      	adds	r4, #1
 8002274:	42a1      	cmp	r1, r4
 8002276:	f803 2f01 	strb.w	r2, [r3, #1]!
 800227a:	dcfa      	bgt.n	8002272 <__sccl+0x5a>
 800227c:	3602      	adds	r6, #2
 800227e:	e7de      	b.n	800223e <__sccl+0x26>
 8002280:	2201      	movs	r2, #1
 8002282:	784c      	ldrb	r4, [r1, #1]
 8002284:	4616      	mov	r6, r2
 8002286:	1c8d      	adds	r5, r1, #2
 8002288:	e7cd      	b.n	8002226 <__sccl+0xe>
 800228a:	bf00      	nop

0800228c <_strtol_r>:
 800228c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002290:	4c41      	ldr	r4, [pc, #260]	; (8002398 <_strtol_r+0x10c>)
 8002292:	b083      	sub	sp, #12
 8002294:	f8d4 c000 	ldr.w	ip, [r4]
 8002298:	9001      	str	r0, [sp, #4]
 800229a:	4608      	mov	r0, r1
 800229c:	e000      	b.n	80022a0 <_strtol_r+0x14>
 800229e:	4628      	mov	r0, r5
 80022a0:	4605      	mov	r5, r0
 80022a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80022a6:	eb0c 0604 	add.w	r6, ip, r4
 80022aa:	7877      	ldrb	r7, [r6, #1]
 80022ac:	f017 0708 	ands.w	r7, r7, #8
 80022b0:	d1f5      	bne.n	800229e <_strtol_r+0x12>
 80022b2:	2c2d      	cmp	r4, #45	; 0x2d
 80022b4:	d04b      	beq.n	800234e <_strtol_r+0xc2>
 80022b6:	2c2b      	cmp	r4, #43	; 0x2b
 80022b8:	bf04      	itt	eq
 80022ba:	782c      	ldrbeq	r4, [r5, #0]
 80022bc:	1c85      	addeq	r5, r0, #2
 80022be:	b11b      	cbz	r3, 80022c8 <_strtol_r+0x3c>
 80022c0:	2b10      	cmp	r3, #16
 80022c2:	d053      	beq.n	800236c <_strtol_r+0xe0>
 80022c4:	4699      	mov	r9, r3
 80022c6:	e003      	b.n	80022d0 <_strtol_r+0x44>
 80022c8:	2c30      	cmp	r4, #48	; 0x30
 80022ca:	d05c      	beq.n	8002386 <_strtol_r+0xfa>
 80022cc:	230a      	movs	r3, #10
 80022ce:	4699      	mov	r9, r3
 80022d0:	2f00      	cmp	r7, #0
 80022d2:	bf0c      	ite	eq
 80022d4:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
 80022d8:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
 80022dc:	f04f 0e00 	mov.w	lr, #0
 80022e0:	fbba f8f9 	udiv	r8, sl, r9
 80022e4:	4670      	mov	r0, lr
 80022e6:	fb09 ab18 	mls	fp, r9, r8, sl
 80022ea:	e00e      	b.n	800230a <_strtol_r+0x7e>
 80022ec:	3c30      	subs	r4, #48	; 0x30
 80022ee:	42a3      	cmp	r3, r4
 80022f0:	dd1b      	ble.n	800232a <_strtol_r+0x9e>
 80022f2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80022f6:	d006      	beq.n	8002306 <_strtol_r+0x7a>
 80022f8:	4540      	cmp	r0, r8
 80022fa:	d825      	bhi.n	8002348 <_strtol_r+0xbc>
 80022fc:	d022      	beq.n	8002344 <_strtol_r+0xb8>
 80022fe:	fb09 4000 	mla	r0, r9, r0, r4
 8002302:	f04f 0e01 	mov.w	lr, #1
 8002306:	f815 4b01 	ldrb.w	r4, [r5], #1
 800230a:	eb0c 0604 	add.w	r6, ip, r4
 800230e:	7876      	ldrb	r6, [r6, #1]
 8002310:	f016 0f04 	tst.w	r6, #4
 8002314:	d1ea      	bne.n	80022ec <_strtol_r+0x60>
 8002316:	f016 0603 	ands.w	r6, r6, #3
 800231a:	d006      	beq.n	800232a <_strtol_r+0x9e>
 800231c:	2e01      	cmp	r6, #1
 800231e:	bf14      	ite	ne
 8002320:	2657      	movne	r6, #87	; 0x57
 8002322:	2637      	moveq	r6, #55	; 0x37
 8002324:	1ba4      	subs	r4, r4, r6
 8002326:	42a3      	cmp	r3, r4
 8002328:	dce3      	bgt.n	80022f2 <_strtol_r+0x66>
 800232a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800232e:	d012      	beq.n	8002356 <_strtol_r+0xca>
 8002330:	b107      	cbz	r7, 8002334 <_strtol_r+0xa8>
 8002332:	4240      	negs	r0, r0
 8002334:	b11a      	cbz	r2, 800233e <_strtol_r+0xb2>
 8002336:	f1be 0f00 	cmp.w	lr, #0
 800233a:	d115      	bne.n	8002368 <_strtol_r+0xdc>
 800233c:	6011      	str	r1, [r2, #0]
 800233e:	b003      	add	sp, #12
 8002340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002344:	455c      	cmp	r4, fp
 8002346:	ddda      	ble.n	80022fe <_strtol_r+0x72>
 8002348:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800234c:	e7db      	b.n	8002306 <_strtol_r+0x7a>
 800234e:	782c      	ldrb	r4, [r5, #0]
 8002350:	2701      	movs	r7, #1
 8002352:	1c85      	adds	r5, r0, #2
 8002354:	e7b3      	b.n	80022be <_strtol_r+0x32>
 8002356:	9901      	ldr	r1, [sp, #4]
 8002358:	2322      	movs	r3, #34	; 0x22
 800235a:	600b      	str	r3, [r1, #0]
 800235c:	4650      	mov	r0, sl
 800235e:	2a00      	cmp	r2, #0
 8002360:	d0ed      	beq.n	800233e <_strtol_r+0xb2>
 8002362:	1e69      	subs	r1, r5, #1
 8002364:	4650      	mov	r0, sl
 8002366:	e7e9      	b.n	800233c <_strtol_r+0xb0>
 8002368:	4682      	mov	sl, r0
 800236a:	e7fa      	b.n	8002362 <_strtol_r+0xd6>
 800236c:	2c30      	cmp	r4, #48	; 0x30
 800236e:	d1a9      	bne.n	80022c4 <_strtol_r+0x38>
 8002370:	7828      	ldrb	r0, [r5, #0]
 8002372:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002376:	2858      	cmp	r0, #88	; 0x58
 8002378:	d1a4      	bne.n	80022c4 <_strtol_r+0x38>
 800237a:	f04f 0910 	mov.w	r9, #16
 800237e:	786c      	ldrb	r4, [r5, #1]
 8002380:	464b      	mov	r3, r9
 8002382:	3502      	adds	r5, #2
 8002384:	e7a4      	b.n	80022d0 <_strtol_r+0x44>
 8002386:	782b      	ldrb	r3, [r5, #0]
 8002388:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800238c:	2b58      	cmp	r3, #88	; 0x58
 800238e:	d0f4      	beq.n	800237a <_strtol_r+0xee>
 8002390:	2308      	movs	r3, #8
 8002392:	4699      	mov	r9, r3
 8002394:	e79c      	b.n	80022d0 <_strtol_r+0x44>
 8002396:	bf00      	nop
 8002398:	20001358 	.word	0x20001358

0800239c <strtol>:
 800239c:	b410      	push	{r4}
 800239e:	4c04      	ldr	r4, [pc, #16]	; (80023b0 <strtol+0x14>)
 80023a0:	4613      	mov	r3, r2
 80023a2:	460a      	mov	r2, r1
 80023a4:	4601      	mov	r1, r0
 80023a6:	6820      	ldr	r0, [r4, #0]
 80023a8:	bc10      	pop	{r4}
 80023aa:	f7ff bf6f 	b.w	800228c <_strtol_r>
 80023ae:	bf00      	nop
 80023b0:	200010c0 	.word	0x200010c0

080023b4 <__submore>:
 80023b4:	f101 0340 	add.w	r3, r1, #64	; 0x40
 80023b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023bc:	460c      	mov	r4, r1
 80023be:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80023c0:	4299      	cmp	r1, r3
 80023c2:	d014      	beq.n	80023ee <__submore+0x3a>
 80023c4:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80023c6:	0077      	lsls	r7, r6, #1
 80023c8:	463a      	mov	r2, r7
 80023ca:	f000 fb01 	bl	80029d0 <_realloc_r>
 80023ce:	4605      	mov	r5, r0
 80023d0:	b340      	cbz	r0, 8002424 <__submore+0x70>
 80023d2:	eb00 0806 	add.w	r8, r0, r6
 80023d6:	4632      	mov	r2, r6
 80023d8:	4640      	mov	r0, r8
 80023da:	4629      	mov	r1, r5
 80023dc:	f7fd ffd8 	bl	8000390 <memcpy>
 80023e0:	f8c4 8000 	str.w	r8, [r4]
 80023e4:	6325      	str	r5, [r4, #48]	; 0x30
 80023e6:	6367      	str	r7, [r4, #52]	; 0x34
 80023e8:	2000      	movs	r0, #0
 80023ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023f2:	f7ff f8cd 	bl	8001590 <_malloc_r>
 80023f6:	b1a8      	cbz	r0, 8002424 <__submore+0x70>
 80023f8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80023fc:	6320      	str	r0, [r4, #48]	; 0x30
 80023fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002402:	6362      	str	r2, [r4, #52]	; 0x34
 8002404:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8002408:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800240c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8002410:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8002414:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8002418:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800241c:	6020      	str	r0, [r4, #0]
 800241e:	2000      	movs	r0, #0
 8002420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800242c <_ungetc_r>:
 800242c:	b570      	push	{r4, r5, r6, lr}
 800242e:	1c4c      	adds	r4, r1, #1
 8002430:	d02b      	beq.n	800248a <_ungetc_r+0x5e>
 8002432:	4606      	mov	r6, r0
 8002434:	4614      	mov	r4, r2
 8002436:	460d      	mov	r5, r1
 8002438:	b108      	cbz	r0, 800243e <_ungetc_r+0x12>
 800243a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800243c:	b343      	cbz	r3, 8002490 <_ungetc_r+0x64>
 800243e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002442:	f023 0320 	bic.w	r3, r3, #32
 8002446:	b29a      	uxth	r2, r3
 8002448:	0750      	lsls	r0, r2, #29
 800244a:	81a3      	strh	r3, [r4, #12]
 800244c:	d406      	bmi.n	800245c <_ungetc_r+0x30>
 800244e:	06d1      	lsls	r1, r2, #27
 8002450:	d51b      	bpl.n	800248a <_ungetc_r+0x5e>
 8002452:	0712      	lsls	r2, r2, #28
 8002454:	d438      	bmi.n	80024c8 <_ungetc_r+0x9c>
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	81a3      	strh	r3, [r4, #12]
 800245c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800245e:	b2ed      	uxtb	r5, r5
 8002460:	b1cb      	cbz	r3, 8002496 <_ungetc_r+0x6a>
 8002462:	6862      	ldr	r2, [r4, #4]
 8002464:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002466:	429a      	cmp	r2, r3
 8002468:	da09      	bge.n	800247e <_ungetc_r+0x52>
 800246a:	6823      	ldr	r3, [r4, #0]
 800246c:	1e5a      	subs	r2, r3, #1
 800246e:	6022      	str	r2, [r4, #0]
 8002470:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002474:	6863      	ldr	r3, [r4, #4]
 8002476:	3301      	adds	r3, #1
 8002478:	6063      	str	r3, [r4, #4]
 800247a:	4628      	mov	r0, r5
 800247c:	bd70      	pop	{r4, r5, r6, pc}
 800247e:	4630      	mov	r0, r6
 8002480:	4621      	mov	r1, r4
 8002482:	f7ff ff97 	bl	80023b4 <__submore>
 8002486:	2800      	cmp	r0, #0
 8002488:	d0ef      	beq.n	800246a <_ungetc_r+0x3e>
 800248a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800248e:	e7f4      	b.n	800247a <_ungetc_r+0x4e>
 8002490:	f000 f9dc 	bl	800284c <__sinit>
 8002494:	e7d3      	b.n	800243e <_ungetc_r+0x12>
 8002496:	6922      	ldr	r2, [r4, #16]
 8002498:	6823      	ldr	r3, [r4, #0]
 800249a:	b12a      	cbz	r2, 80024a8 <_ungetc_r+0x7c>
 800249c:	429a      	cmp	r2, r3
 800249e:	d203      	bcs.n	80024a8 <_ungetc_r+0x7c>
 80024a0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80024a4:	4295      	cmp	r5, r2
 80024a6:	d01c      	beq.n	80024e2 <_ungetc_r+0xb6>
 80024a8:	63a3      	str	r3, [r4, #56]	; 0x38
 80024aa:	4623      	mov	r3, r4
 80024ac:	6860      	ldr	r0, [r4, #4]
 80024ae:	63e0      	str	r0, [r4, #60]	; 0x3c
 80024b0:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80024b4:	2203      	movs	r2, #3
 80024b6:	6362      	str	r2, [r4, #52]	; 0x34
 80024b8:	6321      	str	r1, [r4, #48]	; 0x30
 80024ba:	f803 5f42 	strb.w	r5, [r3, #66]!
 80024be:	2201      	movs	r2, #1
 80024c0:	6023      	str	r3, [r4, #0]
 80024c2:	6062      	str	r2, [r4, #4]
 80024c4:	4628      	mov	r0, r5
 80024c6:	bd70      	pop	{r4, r5, r6, pc}
 80024c8:	4621      	mov	r1, r4
 80024ca:	4630      	mov	r0, r6
 80024cc:	f000 f8ac 	bl	8002628 <_fflush_r>
 80024d0:	2800      	cmp	r0, #0
 80024d2:	d1da      	bne.n	800248a <_ungetc_r+0x5e>
 80024d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024d8:	60a0      	str	r0, [r4, #8]
 80024da:	61a0      	str	r0, [r4, #24]
 80024dc:	f023 0308 	bic.w	r3, r3, #8
 80024e0:	e7b9      	b.n	8002456 <_ungetc_r+0x2a>
 80024e2:	6862      	ldr	r2, [r4, #4]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	3201      	adds	r2, #1
 80024e8:	6023      	str	r3, [r4, #0]
 80024ea:	6062      	str	r2, [r4, #4]
 80024ec:	e7c5      	b.n	800247a <_ungetc_r+0x4e>
 80024ee:	bf00      	nop

080024f0 <ungetc>:
 80024f0:	4b02      	ldr	r3, [pc, #8]	; (80024fc <ungetc+0xc>)
 80024f2:	460a      	mov	r2, r1
 80024f4:	4601      	mov	r1, r0
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	f7ff bf98 	b.w	800242c <_ungetc_r>
 80024fc:	200010c0 	.word	0x200010c0

08002500 <__sflush_r>:
 8002500:	898b      	ldrh	r3, [r1, #12]
 8002502:	071a      	lsls	r2, r3, #28
 8002504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002508:	460d      	mov	r5, r1
 800250a:	4680      	mov	r8, r0
 800250c:	d433      	bmi.n	8002576 <__sflush_r+0x76>
 800250e:	684a      	ldr	r2, [r1, #4]
 8002510:	2a00      	cmp	r2, #0
 8002512:	dd67      	ble.n	80025e4 <__sflush_r+0xe4>
 8002514:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8002516:	2c00      	cmp	r4, #0
 8002518:	d045      	beq.n	80025a6 <__sflush_r+0xa6>
 800251a:	2200      	movs	r2, #0
 800251c:	f8d8 6000 	ldr.w	r6, [r8]
 8002520:	f8c8 2000 	str.w	r2, [r8]
 8002524:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 8002528:	d060      	beq.n	80025ec <__sflush_r+0xec>
 800252a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800252c:	075f      	lsls	r7, r3, #29
 800252e:	d505      	bpl.n	800253c <__sflush_r+0x3c>
 8002530:	6869      	ldr	r1, [r5, #4]
 8002532:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002534:	1a52      	subs	r2, r2, r1
 8002536:	b10b      	cbz	r3, 800253c <__sflush_r+0x3c>
 8002538:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800253a:	1ad2      	subs	r2, r2, r3
 800253c:	2300      	movs	r3, #0
 800253e:	69e9      	ldr	r1, [r5, #28]
 8002540:	4640      	mov	r0, r8
 8002542:	47a0      	blx	r4
 8002544:	1c44      	adds	r4, r0, #1
 8002546:	d039      	beq.n	80025bc <__sflush_r+0xbc>
 8002548:	89ab      	ldrh	r3, [r5, #12]
 800254a:	692a      	ldr	r2, [r5, #16]
 800254c:	602a      	str	r2, [r5, #0]
 800254e:	04db      	lsls	r3, r3, #19
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	606a      	str	r2, [r5, #4]
 8002556:	d443      	bmi.n	80025e0 <__sflush_r+0xe0>
 8002558:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800255a:	f8c8 6000 	str.w	r6, [r8]
 800255e:	b311      	cbz	r1, 80025a6 <__sflush_r+0xa6>
 8002560:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8002564:	4299      	cmp	r1, r3
 8002566:	d002      	beq.n	800256e <__sflush_r+0x6e>
 8002568:	4640      	mov	r0, r8
 800256a:	f7fe ffc9 	bl	8001500 <_free_r>
 800256e:	2000      	movs	r0, #0
 8002570:	6328      	str	r0, [r5, #48]	; 0x30
 8002572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002576:	690e      	ldr	r6, [r1, #16]
 8002578:	b1ae      	cbz	r6, 80025a6 <__sflush_r+0xa6>
 800257a:	680c      	ldr	r4, [r1, #0]
 800257c:	600e      	str	r6, [r1, #0]
 800257e:	0798      	lsls	r0, r3, #30
 8002580:	bf0c      	ite	eq
 8002582:	694b      	ldreq	r3, [r1, #20]
 8002584:	2300      	movne	r3, #0
 8002586:	1ba4      	subs	r4, r4, r6
 8002588:	608b      	str	r3, [r1, #8]
 800258a:	e00a      	b.n	80025a2 <__sflush_r+0xa2>
 800258c:	4623      	mov	r3, r4
 800258e:	4632      	mov	r2, r6
 8002590:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8002592:	69e9      	ldr	r1, [r5, #28]
 8002594:	4640      	mov	r0, r8
 8002596:	47b8      	blx	r7
 8002598:	2800      	cmp	r0, #0
 800259a:	eba4 0400 	sub.w	r4, r4, r0
 800259e:	4406      	add	r6, r0
 80025a0:	dd04      	ble.n	80025ac <__sflush_r+0xac>
 80025a2:	2c00      	cmp	r4, #0
 80025a4:	dcf2      	bgt.n	800258c <__sflush_r+0x8c>
 80025a6:	2000      	movs	r0, #0
 80025a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025ac:	89ab      	ldrh	r3, [r5, #12]
 80025ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025b2:	81ab      	strh	r3, [r5, #12]
 80025b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025bc:	f8d8 2000 	ldr.w	r2, [r8]
 80025c0:	2a1d      	cmp	r2, #29
 80025c2:	d8f3      	bhi.n	80025ac <__sflush_r+0xac>
 80025c4:	4b17      	ldr	r3, [pc, #92]	; (8002624 <__sflush_r+0x124>)
 80025c6:	40d3      	lsrs	r3, r2
 80025c8:	43db      	mvns	r3, r3
 80025ca:	f013 0301 	ands.w	r3, r3, #1
 80025ce:	d1ed      	bne.n	80025ac <__sflush_r+0xac>
 80025d0:	89a9      	ldrh	r1, [r5, #12]
 80025d2:	692c      	ldr	r4, [r5, #16]
 80025d4:	606b      	str	r3, [r5, #4]
 80025d6:	04c9      	lsls	r1, r1, #19
 80025d8:	602c      	str	r4, [r5, #0]
 80025da:	d5bd      	bpl.n	8002558 <__sflush_r+0x58>
 80025dc:	2a00      	cmp	r2, #0
 80025de:	d1bb      	bne.n	8002558 <__sflush_r+0x58>
 80025e0:	6528      	str	r0, [r5, #80]	; 0x50
 80025e2:	e7b9      	b.n	8002558 <__sflush_r+0x58>
 80025e4:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80025e6:	2a00      	cmp	r2, #0
 80025e8:	dc94      	bgt.n	8002514 <__sflush_r+0x14>
 80025ea:	e7dc      	b.n	80025a6 <__sflush_r+0xa6>
 80025ec:	2301      	movs	r3, #1
 80025ee:	69e9      	ldr	r1, [r5, #28]
 80025f0:	4640      	mov	r0, r8
 80025f2:	47a0      	blx	r4
 80025f4:	1c43      	adds	r3, r0, #1
 80025f6:	4602      	mov	r2, r0
 80025f8:	d002      	beq.n	8002600 <__sflush_r+0x100>
 80025fa:	89ab      	ldrh	r3, [r5, #12]
 80025fc:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80025fe:	e795      	b.n	800252c <__sflush_r+0x2c>
 8002600:	f8d8 3000 	ldr.w	r3, [r8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f8      	beq.n	80025fa <__sflush_r+0xfa>
 8002608:	2b1d      	cmp	r3, #29
 800260a:	d001      	beq.n	8002610 <__sflush_r+0x110>
 800260c:	2b16      	cmp	r3, #22
 800260e:	d102      	bne.n	8002616 <__sflush_r+0x116>
 8002610:	f8c8 6000 	str.w	r6, [r8]
 8002614:	e7c7      	b.n	80025a6 <__sflush_r+0xa6>
 8002616:	89ab      	ldrh	r3, [r5, #12]
 8002618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800261c:	81ab      	strh	r3, [r5, #12]
 800261e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002622:	bf00      	nop
 8002624:	20400001 	.word	0x20400001

08002628 <_fflush_r>:
 8002628:	b510      	push	{r4, lr}
 800262a:	4604      	mov	r4, r0
 800262c:	b082      	sub	sp, #8
 800262e:	b108      	cbz	r0, 8002634 <_fflush_r+0xc>
 8002630:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002632:	b153      	cbz	r3, 800264a <_fflush_r+0x22>
 8002634:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8002638:	b908      	cbnz	r0, 800263e <_fflush_r+0x16>
 800263a:	b002      	add	sp, #8
 800263c:	bd10      	pop	{r4, pc}
 800263e:	4620      	mov	r0, r4
 8002640:	b002      	add	sp, #8
 8002642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002646:	f7ff bf5b 	b.w	8002500 <__sflush_r>
 800264a:	9101      	str	r1, [sp, #4]
 800264c:	f000 f8fe 	bl	800284c <__sinit>
 8002650:	9901      	ldr	r1, [sp, #4]
 8002652:	e7ef      	b.n	8002634 <_fflush_r+0xc>

08002654 <fflush>:
 8002654:	b120      	cbz	r0, 8002660 <fflush+0xc>
 8002656:	4b05      	ldr	r3, [pc, #20]	; (800266c <fflush+0x18>)
 8002658:	4601      	mov	r1, r0
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	f7ff bfe4 	b.w	8002628 <_fflush_r>
 8002660:	4b03      	ldr	r3, [pc, #12]	; (8002670 <fflush+0x1c>)
 8002662:	4904      	ldr	r1, [pc, #16]	; (8002674 <fflush+0x20>)
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	f000 b937 	b.w	80028d8 <_fwalk_reent>
 800266a:	bf00      	nop
 800266c:	200010c0 	.word	0x200010c0
 8002670:	08005a34 	.word	0x08005a34
 8002674:	08002629 	.word	0x08002629

08002678 <__fp_unlock>:
 8002678:	2000      	movs	r0, #0
 800267a:	4770      	bx	lr

0800267c <_cleanup_r>:
 800267c:	4901      	ldr	r1, [pc, #4]	; (8002684 <_cleanup_r+0x8>)
 800267e:	f000 b92b 	b.w	80028d8 <_fwalk_reent>
 8002682:	bf00      	nop
 8002684:	08002629 	.word	0x08002629

08002688 <__sinit.part.1>:
 8002688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800268c:	4b35      	ldr	r3, [pc, #212]	; (8002764 <__sinit.part.1+0xdc>)
 800268e:	6845      	ldr	r5, [r0, #4]
 8002690:	63c3      	str	r3, [r0, #60]	; 0x3c
 8002692:	2400      	movs	r4, #0
 8002694:	4607      	mov	r7, r0
 8002696:	f500 72ac 	add.w	r2, r0, #344	; 0x158
 800269a:	2304      	movs	r3, #4
 800269c:	2103      	movs	r1, #3
 800269e:	f8c0 1150 	str.w	r1, [r0, #336]	; 0x150
 80026a2:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
 80026a6:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
 80026aa:	b083      	sub	sp, #12
 80026ac:	602c      	str	r4, [r5, #0]
 80026ae:	606c      	str	r4, [r5, #4]
 80026b0:	60ac      	str	r4, [r5, #8]
 80026b2:	666c      	str	r4, [r5, #100]	; 0x64
 80026b4:	81ec      	strh	r4, [r5, #14]
 80026b6:	612c      	str	r4, [r5, #16]
 80026b8:	616c      	str	r4, [r5, #20]
 80026ba:	61ac      	str	r4, [r5, #24]
 80026bc:	81ab      	strh	r3, [r5, #12]
 80026be:	4621      	mov	r1, r4
 80026c0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80026c4:	2208      	movs	r2, #8
 80026c6:	f7fd fefd 	bl	80004c4 <memset>
 80026ca:	68be      	ldr	r6, [r7, #8]
 80026cc:	f8df b098 	ldr.w	fp, [pc, #152]	; 8002768 <__sinit.part.1+0xe0>
 80026d0:	f8df a098 	ldr.w	sl, [pc, #152]	; 800276c <__sinit.part.1+0xe4>
 80026d4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002770 <__sinit.part.1+0xe8>
 80026d8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002774 <__sinit.part.1+0xec>
 80026dc:	f8c5 b020 	str.w	fp, [r5, #32]
 80026e0:	2301      	movs	r3, #1
 80026e2:	2209      	movs	r2, #9
 80026e4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80026e8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80026ec:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80026f0:	61ed      	str	r5, [r5, #28]
 80026f2:	4621      	mov	r1, r4
 80026f4:	81f3      	strh	r3, [r6, #14]
 80026f6:	81b2      	strh	r2, [r6, #12]
 80026f8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80026fc:	6034      	str	r4, [r6, #0]
 80026fe:	6074      	str	r4, [r6, #4]
 8002700:	60b4      	str	r4, [r6, #8]
 8002702:	6674      	str	r4, [r6, #100]	; 0x64
 8002704:	6134      	str	r4, [r6, #16]
 8002706:	6174      	str	r4, [r6, #20]
 8002708:	61b4      	str	r4, [r6, #24]
 800270a:	2208      	movs	r2, #8
 800270c:	9301      	str	r3, [sp, #4]
 800270e:	f7fd fed9 	bl	80004c4 <memset>
 8002712:	68fd      	ldr	r5, [r7, #12]
 8002714:	61f6      	str	r6, [r6, #28]
 8002716:	2012      	movs	r0, #18
 8002718:	2202      	movs	r2, #2
 800271a:	f8c6 b020 	str.w	fp, [r6, #32]
 800271e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8002722:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8002726:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 800272a:	4621      	mov	r1, r4
 800272c:	81a8      	strh	r0, [r5, #12]
 800272e:	81ea      	strh	r2, [r5, #14]
 8002730:	602c      	str	r4, [r5, #0]
 8002732:	606c      	str	r4, [r5, #4]
 8002734:	60ac      	str	r4, [r5, #8]
 8002736:	666c      	str	r4, [r5, #100]	; 0x64
 8002738:	612c      	str	r4, [r5, #16]
 800273a:	616c      	str	r4, [r5, #20]
 800273c:	61ac      	str	r4, [r5, #24]
 800273e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8002742:	2208      	movs	r2, #8
 8002744:	f7fd febe 	bl	80004c4 <memset>
 8002748:	9b01      	ldr	r3, [sp, #4]
 800274a:	61ed      	str	r5, [r5, #28]
 800274c:	f8c5 b020 	str.w	fp, [r5, #32]
 8002750:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8002754:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8002758:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800275c:	63bb      	str	r3, [r7, #56]	; 0x38
 800275e:	b003      	add	sp, #12
 8002760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002764:	0800267d 	.word	0x0800267d
 8002768:	0800171d 	.word	0x0800171d
 800276c:	08001745 	.word	0x08001745
 8002770:	08001781 	.word	0x08001781
 8002774:	080017a1 	.word	0x080017a1

08002778 <__fp_lock>:
 8002778:	2000      	movs	r0, #0
 800277a:	4770      	bx	lr

0800277c <__sfmoreglue>:
 800277c:	b570      	push	{r4, r5, r6, lr}
 800277e:	1e4a      	subs	r2, r1, #1
 8002780:	2568      	movs	r5, #104	; 0x68
 8002782:	fb05 f502 	mul.w	r5, r5, r2
 8002786:	460e      	mov	r6, r1
 8002788:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800278c:	f7fe ff00 	bl	8001590 <_malloc_r>
 8002790:	4604      	mov	r4, r0
 8002792:	b140      	cbz	r0, 80027a6 <__sfmoreglue+0x2a>
 8002794:	2100      	movs	r1, #0
 8002796:	300c      	adds	r0, #12
 8002798:	6066      	str	r6, [r4, #4]
 800279a:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800279e:	6021      	str	r1, [r4, #0]
 80027a0:	60a0      	str	r0, [r4, #8]
 80027a2:	f7fd fe8f 	bl	80004c4 <memset>
 80027a6:	4620      	mov	r0, r4
 80027a8:	bd70      	pop	{r4, r5, r6, pc}
 80027aa:	bf00      	nop

080027ac <__sfp>:
 80027ac:	4b21      	ldr	r3, [pc, #132]	; (8002834 <__sfp+0x88>)
 80027ae:	b570      	push	{r4, r5, r6, lr}
 80027b0:	681d      	ldr	r5, [r3, #0]
 80027b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80027b4:	4606      	mov	r6, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d02c      	beq.n	8002814 <__sfp+0x68>
 80027ba:	f505 75a6 	add.w	r5, r5, #332	; 0x14c
 80027be:	686b      	ldr	r3, [r5, #4]
 80027c0:	68ac      	ldr	r4, [r5, #8]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	d505      	bpl.n	80027d2 <__sfp+0x26>
 80027c6:	e021      	b.n	800280c <__sfp+0x60>
 80027c8:	3b01      	subs	r3, #1
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80027d0:	d01c      	beq.n	800280c <__sfp+0x60>
 80027d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80027d6:	2a00      	cmp	r2, #0
 80027d8:	d1f6      	bne.n	80027c8 <__sfp+0x1c>
 80027da:	2500      	movs	r5, #0
 80027dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027e0:	2301      	movs	r3, #1
 80027e2:	81e2      	strh	r2, [r4, #14]
 80027e4:	81a3      	strh	r3, [r4, #12]
 80027e6:	6665      	str	r5, [r4, #100]	; 0x64
 80027e8:	6025      	str	r5, [r4, #0]
 80027ea:	60a5      	str	r5, [r4, #8]
 80027ec:	6065      	str	r5, [r4, #4]
 80027ee:	6125      	str	r5, [r4, #16]
 80027f0:	6165      	str	r5, [r4, #20]
 80027f2:	61a5      	str	r5, [r4, #24]
 80027f4:	4629      	mov	r1, r5
 80027f6:	2208      	movs	r2, #8
 80027f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80027fc:	f7fd fe62 	bl	80004c4 <memset>
 8002800:	6325      	str	r5, [r4, #48]	; 0x30
 8002802:	6365      	str	r5, [r4, #52]	; 0x34
 8002804:	6465      	str	r5, [r4, #68]	; 0x44
 8002806:	64a5      	str	r5, [r4, #72]	; 0x48
 8002808:	4620      	mov	r0, r4
 800280a:	bd70      	pop	{r4, r5, r6, pc}
 800280c:	6828      	ldr	r0, [r5, #0]
 800280e:	b128      	cbz	r0, 800281c <__sfp+0x70>
 8002810:	4605      	mov	r5, r0
 8002812:	e7d4      	b.n	80027be <__sfp+0x12>
 8002814:	4628      	mov	r0, r5
 8002816:	f7ff ff37 	bl	8002688 <__sinit.part.1>
 800281a:	e7ce      	b.n	80027ba <__sfp+0xe>
 800281c:	2104      	movs	r1, #4
 800281e:	4630      	mov	r0, r6
 8002820:	f7ff ffac 	bl	800277c <__sfmoreglue>
 8002824:	6028      	str	r0, [r5, #0]
 8002826:	2800      	cmp	r0, #0
 8002828:	d1f2      	bne.n	8002810 <__sfp+0x64>
 800282a:	230c      	movs	r3, #12
 800282c:	4604      	mov	r4, r0
 800282e:	6033      	str	r3, [r6, #0]
 8002830:	e7ea      	b.n	8002808 <__sfp+0x5c>
 8002832:	bf00      	nop
 8002834:	08005a34 	.word	0x08005a34

08002838 <_cleanup>:
 8002838:	4b02      	ldr	r3, [pc, #8]	; (8002844 <_cleanup+0xc>)
 800283a:	4903      	ldr	r1, [pc, #12]	; (8002848 <_cleanup+0x10>)
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	f000 b84b 	b.w	80028d8 <_fwalk_reent>
 8002842:	bf00      	nop
 8002844:	08005a34 	.word	0x08005a34
 8002848:	08002629 	.word	0x08002629

0800284c <__sinit>:
 800284c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800284e:	b103      	cbz	r3, 8002852 <__sinit+0x6>
 8002850:	4770      	bx	lr
 8002852:	e719      	b.n	8002688 <__sinit.part.1>

08002854 <__sfp_lock_acquire>:
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop

08002858 <__sfp_lock_release>:
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop

0800285c <__sinit_lock_acquire>:
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop

08002860 <__sinit_lock_release>:
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop

08002864 <__fp_lock_all>:
 8002864:	4b02      	ldr	r3, [pc, #8]	; (8002870 <__fp_lock_all+0xc>)
 8002866:	4903      	ldr	r1, [pc, #12]	; (8002874 <__fp_lock_all+0x10>)
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	f000 b80f 	b.w	800288c <_fwalk>
 800286e:	bf00      	nop
 8002870:	200010c0 	.word	0x200010c0
 8002874:	08002779 	.word	0x08002779

08002878 <__fp_unlock_all>:
 8002878:	4b02      	ldr	r3, [pc, #8]	; (8002884 <__fp_unlock_all+0xc>)
 800287a:	4903      	ldr	r1, [pc, #12]	; (8002888 <__fp_unlock_all+0x10>)
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	f000 b805 	b.w	800288c <_fwalk>
 8002882:	bf00      	nop
 8002884:	200010c0 	.word	0x200010c0
 8002888:	08002679 	.word	0x08002679

0800288c <_fwalk>:
 800288c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002890:	f510 77a6 	adds.w	r7, r0, #332	; 0x14c
 8002894:	d01b      	beq.n	80028ce <_fwalk+0x42>
 8002896:	4688      	mov	r8, r1
 8002898:	2600      	movs	r6, #0
 800289a:	687d      	ldr	r5, [r7, #4]
 800289c:	68bc      	ldr	r4, [r7, #8]
 800289e:	3d01      	subs	r5, #1
 80028a0:	d40f      	bmi.n	80028c2 <_fwalk+0x36>
 80028a2:	89a3      	ldrh	r3, [r4, #12]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80028aa:	d906      	bls.n	80028ba <_fwalk+0x2e>
 80028ac:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80028b0:	3301      	adds	r3, #1
 80028b2:	4620      	mov	r0, r4
 80028b4:	d001      	beq.n	80028ba <_fwalk+0x2e>
 80028b6:	47c0      	blx	r8
 80028b8:	4306      	orrs	r6, r0
 80028ba:	1c6b      	adds	r3, r5, #1
 80028bc:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80028c0:	d1ef      	bne.n	80028a2 <_fwalk+0x16>
 80028c2:	683f      	ldr	r7, [r7, #0]
 80028c4:	2f00      	cmp	r7, #0
 80028c6:	d1e8      	bne.n	800289a <_fwalk+0xe>
 80028c8:	4630      	mov	r0, r6
 80028ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028ce:	463e      	mov	r6, r7
 80028d0:	4630      	mov	r0, r6
 80028d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028d6:	bf00      	nop

080028d8 <_fwalk_reent>:
 80028d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028dc:	f510 77a6 	adds.w	r7, r0, #332	; 0x14c
 80028e0:	d01f      	beq.n	8002922 <_fwalk_reent+0x4a>
 80028e2:	4688      	mov	r8, r1
 80028e4:	4606      	mov	r6, r0
 80028e6:	f04f 0900 	mov.w	r9, #0
 80028ea:	687d      	ldr	r5, [r7, #4]
 80028ec:	68bc      	ldr	r4, [r7, #8]
 80028ee:	3d01      	subs	r5, #1
 80028f0:	d411      	bmi.n	8002916 <_fwalk_reent+0x3e>
 80028f2:	89a3      	ldrh	r3, [r4, #12]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80028fa:	d908      	bls.n	800290e <_fwalk_reent+0x36>
 80028fc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8002900:	3301      	adds	r3, #1
 8002902:	4621      	mov	r1, r4
 8002904:	4630      	mov	r0, r6
 8002906:	d002      	beq.n	800290e <_fwalk_reent+0x36>
 8002908:	47c0      	blx	r8
 800290a:	ea49 0900 	orr.w	r9, r9, r0
 800290e:	1c6b      	adds	r3, r5, #1
 8002910:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8002914:	d1ed      	bne.n	80028f2 <_fwalk_reent+0x1a>
 8002916:	683f      	ldr	r7, [r7, #0]
 8002918:	2f00      	cmp	r7, #0
 800291a:	d1e6      	bne.n	80028ea <_fwalk_reent+0x12>
 800291c:	4648      	mov	r0, r9
 800291e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002922:	46b9      	mov	r9, r7
 8002924:	4648      	mov	r0, r9
 8002926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800292a:	bf00      	nop
 800292c:	0000      	movs	r0, r0
	...

08002930 <memchr>:
 8002930:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002934:	2a10      	cmp	r2, #16
 8002936:	db2b      	blt.n	8002990 <memchr+0x60>
 8002938:	f010 0f07 	tst.w	r0, #7
 800293c:	d008      	beq.n	8002950 <memchr+0x20>
 800293e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002942:	3a01      	subs	r2, #1
 8002944:	428b      	cmp	r3, r1
 8002946:	d02d      	beq.n	80029a4 <memchr+0x74>
 8002948:	f010 0f07 	tst.w	r0, #7
 800294c:	b342      	cbz	r2, 80029a0 <memchr+0x70>
 800294e:	d1f6      	bne.n	800293e <memchr+0xe>
 8002950:	b4f0      	push	{r4, r5, r6, r7}
 8002952:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002956:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800295a:	f022 0407 	bic.w	r4, r2, #7
 800295e:	f07f 0700 	mvns.w	r7, #0
 8002962:	2300      	movs	r3, #0
 8002964:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002968:	3c08      	subs	r4, #8
 800296a:	ea85 0501 	eor.w	r5, r5, r1
 800296e:	ea86 0601 	eor.w	r6, r6, r1
 8002972:	fa85 f547 	uadd8	r5, r5, r7
 8002976:	faa3 f587 	sel	r5, r3, r7
 800297a:	fa86 f647 	uadd8	r6, r6, r7
 800297e:	faa5 f687 	sel	r6, r5, r7
 8002982:	b98e      	cbnz	r6, 80029a8 <memchr+0x78>
 8002984:	d1ee      	bne.n	8002964 <memchr+0x34>
 8002986:	bcf0      	pop	{r4, r5, r6, r7}
 8002988:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800298c:	f002 0207 	and.w	r2, r2, #7
 8002990:	b132      	cbz	r2, 80029a0 <memchr+0x70>
 8002992:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002996:	3a01      	subs	r2, #1
 8002998:	ea83 0301 	eor.w	r3, r3, r1
 800299c:	b113      	cbz	r3, 80029a4 <memchr+0x74>
 800299e:	d1f8      	bne.n	8002992 <memchr+0x62>
 80029a0:	2000      	movs	r0, #0
 80029a2:	4770      	bx	lr
 80029a4:	3801      	subs	r0, #1
 80029a6:	4770      	bx	lr
 80029a8:	2d00      	cmp	r5, #0
 80029aa:	bf06      	itte	eq
 80029ac:	4635      	moveq	r5, r6
 80029ae:	3803      	subeq	r0, #3
 80029b0:	3807      	subne	r0, #7
 80029b2:	f015 0f01 	tst.w	r5, #1
 80029b6:	d107      	bne.n	80029c8 <memchr+0x98>
 80029b8:	3001      	adds	r0, #1
 80029ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80029be:	bf02      	ittt	eq
 80029c0:	3001      	addeq	r0, #1
 80029c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80029c6:	3001      	addeq	r0, #1
 80029c8:	bcf0      	pop	{r4, r5, r6, r7}
 80029ca:	3801      	subs	r0, #1
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop

080029d0 <_realloc_r>:
 80029d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d2:	4614      	mov	r4, r2
 80029d4:	b1f9      	cbz	r1, 8002a16 <_realloc_r+0x46>
 80029d6:	b1c2      	cbz	r2, 8002a0a <_realloc_r+0x3a>
 80029d8:	4606      	mov	r6, r0
 80029da:	460d      	mov	r5, r1
 80029dc:	f000 f820 	bl	8002a20 <_malloc_usable_size_r>
 80029e0:	4284      	cmp	r4, r0
 80029e2:	d801      	bhi.n	80029e8 <_realloc_r+0x18>
 80029e4:	4628      	mov	r0, r5
 80029e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029e8:	4621      	mov	r1, r4
 80029ea:	4630      	mov	r0, r6
 80029ec:	f7fe fdd0 	bl	8001590 <_malloc_r>
 80029f0:	4607      	mov	r7, r0
 80029f2:	b170      	cbz	r0, 8002a12 <_realloc_r+0x42>
 80029f4:	4622      	mov	r2, r4
 80029f6:	4629      	mov	r1, r5
 80029f8:	f7fd fcca 	bl	8000390 <memcpy>
 80029fc:	4629      	mov	r1, r5
 80029fe:	4630      	mov	r0, r6
 8002a00:	463d      	mov	r5, r7
 8002a02:	f7fe fd7d 	bl	8001500 <_free_r>
 8002a06:	4628      	mov	r0, r5
 8002a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a0a:	f7fe fd79 	bl	8001500 <_free_r>
 8002a0e:	4625      	mov	r5, r4
 8002a10:	e7e8      	b.n	80029e4 <_realloc_r+0x14>
 8002a12:	4605      	mov	r5, r0
 8002a14:	e7e6      	b.n	80029e4 <_realloc_r+0x14>
 8002a16:	4611      	mov	r1, r2
 8002a18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002a1c:	f7fe bdb8 	b.w	8001590 <_malloc_r>

08002a20 <_malloc_usable_size_r>:
 8002a20:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002a24:	2800      	cmp	r0, #0
 8002a26:	f1a0 0004 	sub.w	r0, r0, #4
 8002a2a:	bfbc      	itt	lt
 8002a2c:	580b      	ldrlt	r3, [r1, r0]
 8002a2e:	18c0      	addlt	r0, r0, r3
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop

08002a34 <uart_fifo_callback>:
static inline int _impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
 8002a34:	6843      	ldr	r3, [r0, #4]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44

void ay_uart_driver_set_callback(void (*callback)(u8_t)) {
	__uart_callback = callback;
}

static void uart_fifo_callback(struct device *dev) {
 8002a38:	b513      	push	{r0, r1, r4, lr}
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	b1ab      	cbz	r3, 8002a6a <uart_fifo_callback+0x36>
		return api->irq_update(dev);
 8002a3e:	4798      	blx	r3
	u8_t recvData;
	/* Verify uart_irq_update() */
	if (!uart_irq_update(dev)) {
 8002a40:	b198      	cbz	r0, 8002a6a <uart_fifo_callback+0x36>
	if (api->irq_rx_ready) {
 8002a42:	6863      	ldr	r3, [r4, #4]
 8002a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a46:	b183      	cbz	r3, 8002a6a <uart_fifo_callback+0x36>
		return api->irq_rx_ready(dev);
 8002a48:	4620      	mov	r0, r4
 8002a4a:	4798      	blx	r3
		SYS_LOG_ERR("retval should always be 1");
	return;
	}
	/* Verify uart_irq_rx_ready() */
	if (uart_irq_rx_ready(dev)) {
 8002a4c:	b168      	cbz	r0, 8002a6a <uart_fifo_callback+0x36>
	if (api->fifo_read) {
 8002a4e:	6863      	ldr	r3, [r4, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	b123      	cbz	r3, 8002a5e <uart_fifo_callback+0x2a>
		return api->fifo_read(dev, rx_data, size);
 8002a54:	2201      	movs	r2, #1
 8002a56:	f10d 0107 	add.w	r1, sp, #7
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	4798      	blx	r3
		/* Verify uart_fifo_read() */
		uart_fifo_read(dev, &recvData, 1);
		if (__uart_callback) {
 8002a5e:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <uart_fifo_callback+0x3c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	b113      	cbz	r3, 8002a6a <uart_fifo_callback+0x36>
			__uart_callback(recvData);
 8002a64:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002a68:	4798      	blx	r3
		}
	}
}
 8002a6a:	b002      	add	sp, #8
 8002a6c:	bd10      	pop	{r4, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000030 	.word	0x20000030

08002a74 <ay_uart_driver_open>:

u8_t ay_uart_driver_open() {
 8002a74:	b510      	push	{r4, lr}

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
 8002a76:	480d      	ldr	r0, [pc, #52]	; (8002aac <ay_uart_driver_open+0x38>)
 8002a78:	f002 f862 	bl	8004b40 <_impl_device_get_binding>
	struct device *uart_dev = device_get_binding(modem_UART);
	if (!uart_dev) {
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	b920      	cbnz	r0, 8002a8a <ay_uart_driver_open+0x16>
		SYS_LOG_ERR("Problem to load uart device");
		printk("Problem to load uart device\n");
 8002a80:	480b      	ldr	r0, [pc, #44]	; (8002ab0 <ay_uart_driver_open+0x3c>)
 8002a82:	f000 fa77 	bl	8002f74 <printk>
		return 1;
 8002a86:	2001      	movs	r0, #1
 8002a88:	bd10      	pop	{r4, pc}
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
 8002a8a:	6843      	ldr	r3, [r0, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
 8002a8c:	b123      	cbz	r3, 8002a98 <ay_uart_driver_open+0x24>
 8002a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a90:	b113      	cbz	r3, 8002a98 <ay_uart_driver_open+0x24>
		api->irq_callback_set(dev, cb, user_data);
 8002a92:	4602      	mov	r2, r0
 8002a94:	4907      	ldr	r1, [pc, #28]	; (8002ab4 <ay_uart_driver_open+0x40>)
 8002a96:	4798      	blx	r3
	if (api->irq_rx_enable) {
 8002a98:	6863      	ldr	r3, [r4, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	b10b      	cbz	r3, 8002aa2 <ay_uart_driver_open+0x2e>
		api->irq_rx_enable(dev);
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	4798      	blx	r3
	uart_irq_callback_set(uart_dev, uart_fifo_callback);
	/* Enable Tx/Rx interrupt before using fifo */
	/* Verify uart_irq_rx_enable() */
	uart_irq_rx_enable(uart_dev);
	SYS_LOG_INF("UART device loaded...[OK]");
	printk("UART device loaded...[OK]\n");
 8002aa2:	4805      	ldr	r0, [pc, #20]	; (8002ab8 <ay_uart_driver_open+0x44>)
 8002aa4:	f000 fa66 	bl	8002f74 <printk>
	return 0;
 8002aa8:	2000      	movs	r0, #0
}
 8002aaa:	bd10      	pop	{r4, pc}
 8002aac:	08005ba8 	.word	0x08005ba8
 8002ab0:	08005baf 	.word	0x08005baf
 8002ab4:	08002a35 	.word	0x08002a35
 8002ab8:	08005bcc 	.word	0x08005bcc

08002abc <ay_uart_driver_write>:

void ay_uart_driver_write(char *szStr) {
 8002abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002abe:	4606      	mov	r6, r0
 8002ac0:	4814      	ldr	r0, [pc, #80]	; (8002b14 <ay_uart_driver_write+0x58>)
 8002ac2:	f002 f83d 	bl	8004b40 <_impl_device_get_binding>
	struct device *uart_dev = device_get_binding(modem_UART);
	u8_t i;
    	unsigned char temp;
	unsigned char recvChar;
    	for (i = 0; i < strlen(szStr); i++) {
 8002ac6:	2400      	movs	r4, #0
 8002ac8:	4605      	mov	r5, r0
 8002aca:	4630      	mov	r0, r6
 8002acc:	f7fe f9b8 	bl	8000e40 <strlen>
 8002ad0:	1c67      	adds	r7, r4, #1
 8002ad2:	b2e4      	uxtb	r4, r4
 8002ad4:	4284      	cmp	r4, r0
 8002ad6:	db09      	blt.n	8002aec <ay_uart_driver_write+0x30>

K_SYSCALL_DECLARE1(K_SYSCALL_K_OBJECT_ALLOC, k_object_alloc, void *, enum k_objects, otype)

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)

K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
 8002ad8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002adc:	f002 fae8 	bl	80050b0 <_impl_k_sleep>
        	uart_poll_out(uart_dev, temp);
    	}
	k_sleep(300);
	for (i = 0; i < UART_BUFFER_SIZE; i++) {
        	uart_poll_in(uart_dev, &recvChar);
                printk("%c", recvChar);
 8002ae0:	4e0d      	ldr	r6, [pc, #52]	; (8002b18 <ay_uart_driver_write+0x5c>)
 8002ae2:	2481      	movs	r4, #129	; 0x81
	for (i = 0; i < UART_BUFFER_SIZE; i++) {
 8002ae4:	3c01      	subs	r4, #1
 8002ae6:	d108      	bne.n	8002afa <ay_uart_driver_write+0x3e>
        }
}
 8002ae8:	b003      	add	sp, #12
 8002aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	api->poll_out(dev, out_char);
 8002aec:	686b      	ldr	r3, [r5, #4]
 8002aee:	5d31      	ldrb	r1, [r6, r4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	4628      	mov	r0, r5
 8002af4:	4798      	blx	r3
 8002af6:	463c      	mov	r4, r7
 8002af8:	e7e7      	b.n	8002aca <ay_uart_driver_write+0xe>
	return api->poll_in(dev, p_char);
 8002afa:	686b      	ldr	r3, [r5, #4]
 8002afc:	f10d 0107 	add.w	r1, sp, #7
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4628      	mov	r0, r5
 8002b04:	4798      	blx	r3
                printk("%c", recvChar);
 8002b06:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002b0a:	4630      	mov	r0, r6
 8002b0c:	f000 fa32 	bl	8002f74 <printk>
 8002b10:	e7e8      	b.n	8002ae4 <ay_uart_driver_write+0x28>
 8002b12:	bf00      	nop
 8002b14:	08005ba8 	.word	0x08005ba8
 8002b18:	08005be7 	.word	0x08005be7

08002b1c <main>:

void main(void) {
 8002b1c:	b508      	push	{r3, lr}
	u8_t status;
	// Open UART
    	status = ay_uart_driver_open();
 8002b1e:	f7ff ffa9 	bl	8002a74 <ay_uart_driver_open>
	if ( status == 0 ) {
 8002b22:	b938      	cbnz	r0, 8002b34 <main+0x18>
			printk("Sending AT to UART\n");
 8002b24:	4804      	ldr	r0, [pc, #16]	; (8002b38 <main+0x1c>)
 8002b26:	f000 fa25 	bl	8002f74 <printk>
    			ay_uart_driver_write("\r\nAT\r\n\r\n");
 8002b2a:	4804      	ldr	r0, [pc, #16]	; (8002b3c <main+0x20>)
	}
}
 8002b2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    			ay_uart_driver_write("\r\nAT\r\n\r\n");
 8002b30:	f7ff bfc4 	b.w	8002abc <ay_uart_driver_write>
 8002b34:	bd08      	pop	{r3, pc}
 8002b36:	bf00      	nop
 8002b38:	08005bea 	.word	0x08005bea
 8002b3c:	08005bfe 	.word	0x08005bfe

08002b40 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8002b40:	b508      	push	{r3, lr}
 8002b42:	4604      	mov	r4, r0
 8002b44:	4608      	mov	r0, r1
 8002b46:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 8002b48:	461a      	mov	r2, r3
 8002b4a:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
 8002b4c:	f002 fae2 	bl	8005114 <_impl_k_current_get>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
 8002b50:	f001 fb08 	bl	8004164 <_impl_k_thread_abort>

08002b54 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
 8002b54:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
 8002b56:	f990 400b 	ldrsb.w	r4, [r0, #11]
 8002b5a:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
 8002b5c:	428c      	cmp	r4, r1
 8002b5e:	f04f 040c 	mov.w	r4, #12
 8002b62:	bfb6      	itet	lt
 8002b64:	4361      	mullt	r1, r4
 8002b66:	fb04 0101 	mlage	r1, r4, r1, r0
 8002b6a:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
 8002b6c:	2420      	movs	r4, #32
 8002b6e:	fb92 f4f4 	sdiv	r4, r2, r4
 8002b72:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8002b76:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
 8002b78:	f002 001f 	and.w	r0, r2, #31
 8002b7c:	bd10      	pop	{r4, pc}

08002b7e <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
 8002b7e:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
 8002b80:	ab01      	add	r3, sp, #4
 8002b82:	f7ff ffe7 	bl	8002b54 <get_bit_ptr>

	*word |= (1<<bit);
 8002b86:	9a01      	ldr	r2, [sp, #4]
 8002b88:	2301      	movs	r3, #1
 8002b8a:	fa03 f000 	lsl.w	r0, r3, r0
 8002b8e:	6813      	ldr	r3, [r2, #0]
 8002b90:	4303      	orrs	r3, r0
 8002b92:	6013      	str	r3, [r2, #0]
}
 8002b94:	b003      	add	sp, #12
 8002b96:	f85d fb04 	ldr.w	pc, [sp], #4

08002b9a <_sys_mem_pool_base_init>:
{
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
 8002b9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 8002b9e:	6843      	ldr	r3, [r0, #4]
 8002ba0:	8905      	ldrh	r5, [r0, #8]
{
 8002ba2:	4604      	mov	r4, r0
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 8002ba4:	6800      	ldr	r0, [r0, #0]

	p->max_inline_level = -1;

	for (i = 0; i < p->n_levels; i++) {
 8002ba6:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 8002ba8:	435d      	muls	r5, r3
	p->max_inline_level = -1;
 8002baa:	22ff      	movs	r2, #255	; 0xff
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 8002bac:	4428      	add	r0, r5
	p->max_inline_level = -1;
 8002bae:	72e2      	strb	r2, [r4, #11]
	for (i = 0; i < p->n_levels; i++) {
 8002bb0:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
 8002bb2:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
 8002bb6:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
 8002bba:	42b9      	cmp	r1, r7
 8002bbc:	db05      	blt.n	8002bca <_sys_mem_pool_base_init+0x30>
 8002bbe:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
 8002bc0:	8923      	ldrh	r3, [r4, #8]
 8002bc2:	429d      	cmp	r5, r3
 8002bc4:	db23      	blt.n	8002c0e <_sys_mem_pool_base_init+0x74>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
 8002bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
 8002bca:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
 8002bce:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
 8002bd2:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
 8002bd6:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
 8002bd8:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
 8002bdc:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
 8002be0:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
 8002be4:	bfc8      	it	gt
 8002be6:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
 8002be8:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8002bec:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
 8002bf0:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
 8002bf4:	bfca      	itet	gt
 8002bf6:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
 8002bfa:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
 8002bfc:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
 8002c00:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
 8002c04:	bfc8      	it	gt
 8002c06:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
 8002c0a:	3101      	adds	r1, #1
 8002c0c:	e7d5      	b.n	8002bba <_sys_mem_pool_base_init+0x20>
	return (u8_t *)p->buf + lsz * block;
 8002c0e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
 8002c10:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
 8002c12:	6820      	ldr	r0, [r4, #0]
 8002c14:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
 8002c16:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
 8002c18:	5086      	str	r6, [r0, r2]
	return (u8_t *)p->buf + lsz * block;
 8002c1a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
 8002c20:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
 8002c22:	4620      	mov	r0, r4
 8002c24:	6011      	str	r1, [r2, #0]
	list->tail = node;
 8002c26:	6099      	str	r1, [r3, #8]
 8002c28:	462a      	mov	r2, r5
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	f7ff ffa7 	bl	8002b7e <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
 8002c30:	3501      	adds	r5, #1
 8002c32:	e7c5      	b.n	8002bc0 <_sys_mem_pool_base_init+0x26>

08002c34 <z_arch_printk_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
 8002c34:	2000      	movs	r0, #0
 8002c36:	4770      	bx	lr

08002c38 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8002c38:	680b      	ldr	r3, [r1, #0]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8002c3e:	4b01      	ldr	r3, [pc, #4]	; (8002c44 <char_out+0xc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4718      	bx	r3
 8002c44:	20001360 	.word	0x20001360

08002c48 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
 8002c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c4c:	b085      	sub	sp, #20
 8002c4e:	469b      	mov	fp, r3
 8002c50:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8002c52:	f8df a090 	ldr.w	sl, [pc, #144]	; 8002ce4 <_printk_dec_ulong+0x9c>
 8002c56:	2c01      	cmp	r4, #1
 8002c58:	bfb8      	it	lt
 8002c5a:	2401      	movlt	r4, #1
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	bf0c      	ite	eq
 8002c60:	2330      	moveq	r3, #48	; 0x30
 8002c62:	2320      	movne	r3, #32
 8002c64:	4615      	mov	r5, r2
 8002c66:	4680      	mov	r8, r0
 8002c68:	4689      	mov	r9, r1
 8002c6a:	9401      	str	r4, [sp, #4]
 8002c6c:	9302      	str	r3, [sp, #8]
 8002c6e:	2601      	movs	r6, #1
 8002c70:	270a      	movs	r7, #10
 8002c72:	2200      	movs	r2, #0
 8002c74:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
 8002c78:	b90a      	cbnz	r2, 8002c7e <_printk_dec_ulong+0x36>
 8002c7a:	45aa      	cmp	sl, r5
 8002c7c:	d21f      	bcs.n	8002cbe <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
 8002c7e:	fbb5 f0f4 	udiv	r0, r5, r4
 8002c82:	4649      	mov	r1, r9
 8002c84:	3030      	adds	r0, #48	; 0x30
 8002c86:	47c0      	blx	r8
			digits++;
 8002c88:	3601      	adds	r6, #1
			found_largest_digit = 1;
 8002c8a:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
 8002c8c:	3f01      	subs	r7, #1
	while (pos >= 9) {
 8002c8e:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
 8002c90:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
 8002c94:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
 8002c98:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
 8002c9c:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
 8002ca0:	d1e8      	bne.n	8002c74 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
 8002ca2:	4649      	mov	r1, r9
 8002ca4:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8002ca8:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
 8002caa:	f1bb 0f03 	cmp.w	fp, #3
 8002cae:	d103      	bne.n	8002cb8 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
 8002cb0:	9b01      	ldr	r3, [sp, #4]
 8002cb2:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
 8002cb4:	2c00      	cmp	r4, #0
 8002cb6:	dc0f      	bgt.n	8002cd8 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
 8002cb8:	b005      	add	sp, #20
 8002cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
 8002cbe:	9b01      	ldr	r3, [sp, #4]
 8002cc0:	42bb      	cmp	r3, r7
 8002cc2:	dbe3      	blt.n	8002c8c <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
 8002cc4:	f1bb 0f02 	cmp.w	fp, #2
 8002cc8:	d8e0      	bhi.n	8002c8c <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 8002cca:	4649      	mov	r1, r9
 8002ccc:	9802      	ldr	r0, [sp, #8]
 8002cce:	9203      	str	r2, [sp, #12]
			digits++;
 8002cd0:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 8002cd2:	47c0      	blx	r8
			digits++;
 8002cd4:	9a03      	ldr	r2, [sp, #12]
 8002cd6:	e7d9      	b.n	8002c8c <_printk_dec_ulong+0x44>
			out(' ', ctx);
 8002cd8:	4649      	mov	r1, r9
 8002cda:	2020      	movs	r0, #32
 8002cdc:	47c0      	blx	r8
 8002cde:	3c01      	subs	r4, #1
 8002ce0:	e7e8      	b.n	8002cb4 <_printk_dec_ulong+0x6c>
 8002ce2:	bf00      	nop
 8002ce4:	3b9ac9ff 	.word	0x3b9ac9ff

08002ce8 <__printk_hook_install>:
	_char_out = fn;
 8002ce8:	4b01      	ldr	r3, [pc, #4]	; (8002cf0 <__printk_hook_install+0x8>)
 8002cea:	6018      	str	r0, [r3, #0]
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20001360 	.word	0x20001360

08002cf4 <_vprintk>:
{
 8002cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cf8:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
 8002cfa:	f04f 0a00 	mov.w	sl, #0
{
 8002cfe:	4606      	mov	r6, r0
 8002d00:	460f      	mov	r7, r1
 8002d02:	9204      	str	r2, [sp, #16]
 8002d04:	461c      	mov	r4, r3
	int min_width = -1;
 8002d06:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
 8002d0a:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
 8002d0c:	4655      	mov	r5, sl
	while (*fmt) {
 8002d0e:	9b04      	ldr	r3, [sp, #16]
 8002d10:	7818      	ldrb	r0, [r3, #0]
 8002d12:	b910      	cbnz	r0, 8002d1a <_vprintk+0x26>
}
 8002d14:	b009      	add	sp, #36	; 0x24
 8002d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
 8002d1a:	b945      	cbnz	r5, 8002d2e <_vprintk+0x3a>
			if (*fmt != '%') {
 8002d1c:	2825      	cmp	r0, #37	; 0x25
 8002d1e:	f000 810c 	beq.w	8002f3a <_vprintk+0x246>
				out((int)*fmt, ctx);
 8002d22:	4639      	mov	r1, r7
 8002d24:	47b0      	blx	r6
		++fmt;
 8002d26:	9b04      	ldr	r3, [sp, #16]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	9304      	str	r3, [sp, #16]
 8002d2c:	e7ef      	b.n	8002d0e <_vprintk+0x1a>
			switch (*fmt) {
 8002d2e:	2864      	cmp	r0, #100	; 0x64
 8002d30:	d061      	beq.n	8002df6 <_vprintk+0x102>
 8002d32:	d819      	bhi.n	8002d68 <_vprintk+0x74>
 8002d34:	2839      	cmp	r0, #57	; 0x39
 8002d36:	d80a      	bhi.n	8002d4e <_vprintk+0x5a>
 8002d38:	2831      	cmp	r0, #49	; 0x31
 8002d3a:	d250      	bcs.n	8002dde <_vprintk+0xea>
 8002d3c:	282d      	cmp	r0, #45	; 0x2d
 8002d3e:	d03c      	beq.n	8002dba <_vprintk+0xc6>
 8002d40:	2830      	cmp	r0, #48	; 0x30
 8002d42:	d03d      	beq.n	8002dc0 <_vprintk+0xcc>
 8002d44:	2825      	cmp	r0, #37	; 0x25
 8002d46:	d108      	bne.n	8002d5a <_vprintk+0x66>
				out((int)'%', ctx);
 8002d48:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
 8002d4a:	47b0      	blx	r6
 8002d4c:	e06f      	b.n	8002e2e <_vprintk+0x13a>
			switch (*fmt) {
 8002d4e:	2858      	cmp	r0, #88	; 0x58
 8002d50:	f000 8089 	beq.w	8002e66 <_vprintk+0x172>
 8002d54:	2863      	cmp	r0, #99	; 0x63
 8002d56:	f000 80ea 	beq.w	8002f2e <_vprintk+0x23a>
				out((int)'%', ctx);
 8002d5a:	4639      	mov	r1, r7
 8002d5c:	2025      	movs	r0, #37	; 0x25
 8002d5e:	47b0      	blx	r6
				out((int)*fmt, ctx);
 8002d60:	9b04      	ldr	r3, [sp, #16]
 8002d62:	4639      	mov	r1, r7
 8002d64:	7818      	ldrb	r0, [r3, #0]
 8002d66:	e7f0      	b.n	8002d4a <_vprintk+0x56>
			switch (*fmt) {
 8002d68:	2870      	cmp	r0, #112	; 0x70
 8002d6a:	d072      	beq.n	8002e52 <_vprintk+0x15e>
 8002d6c:	d806      	bhi.n	8002d7c <_vprintk+0x88>
 8002d6e:	2869      	cmp	r0, #105	; 0x69
 8002d70:	d041      	beq.n	8002df6 <_vprintk+0x102>
 8002d72:	286c      	cmp	r0, #108	; 0x6c
 8002d74:	d03c      	beq.n	8002df0 <_vprintk+0xfc>
 8002d76:	2868      	cmp	r0, #104	; 0x68
 8002d78:	d0d5      	beq.n	8002d26 <_vprintk+0x32>
 8002d7a:	e7ee      	b.n	8002d5a <_vprintk+0x66>
 8002d7c:	2875      	cmp	r0, #117	; 0x75
 8002d7e:	d058      	beq.n	8002e32 <_vprintk+0x13e>
 8002d80:	d817      	bhi.n	8002db2 <_vprintk+0xbe>
 8002d82:	2873      	cmp	r0, #115	; 0x73
 8002d84:	d1e9      	bne.n	8002d5a <_vprintk+0x66>
				char *s = va_arg(ap, char *);
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	f104 0b04 	add.w	fp, r4, #4
 8002d8c:	461c      	mov	r4, r3
				while (*s)
 8002d8e:	4625      	mov	r5, r4
 8002d90:	f815 0b01 	ldrb.w	r0, [r5], #1
 8002d94:	2800      	cmp	r0, #0
 8002d96:	f040 80bf 	bne.w	8002f18 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
 8002d9a:	f1b8 0f03 	cmp.w	r8, #3
 8002d9e:	f040 80d5 	bne.w	8002f4c <_vprintk+0x258>
					int remaining = min_width - (s - start);
 8002da2:	1ae4      	subs	r4, r4, r3
 8002da4:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
 8002da8:	2c00      	cmp	r4, #0
 8002daa:	f300 80bb 	bgt.w	8002f24 <_vprintk+0x230>
				char *s = va_arg(ap, char *);
 8002dae:	465c      	mov	r4, fp
 8002db0:	e03d      	b.n	8002e2e <_vprintk+0x13a>
			switch (*fmt) {
 8002db2:	2878      	cmp	r0, #120	; 0x78
 8002db4:	d057      	beq.n	8002e66 <_vprintk+0x172>
 8002db6:	287a      	cmp	r0, #122	; 0x7a
 8002db8:	e7de      	b.n	8002d78 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
 8002dba:	f04f 0803 	mov.w	r8, #3
 8002dbe:	e7b2      	b.n	8002d26 <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
 8002dc0:	f1b9 0f00 	cmp.w	r9, #0
 8002dc4:	da0e      	bge.n	8002de4 <_vprintk+0xf0>
 8002dc6:	f1b8 0f00 	cmp.w	r8, #0
 8002dca:	f000 80bc 	beq.w	8002f46 <_vprintk+0x252>
					min_width = *fmt - '0';
 8002dce:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
 8002dd2:	f1b8 0f00 	cmp.w	r8, #0
 8002dd6:	bf08      	it	eq
 8002dd8:	f04f 0802 	moveq.w	r8, #2
 8002ddc:	e7a3      	b.n	8002d26 <_vprintk+0x32>
				if (min_width < 0) {
 8002dde:	f1b9 0f00 	cmp.w	r9, #0
 8002de2:	dbf4      	blt.n	8002dce <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
 8002de4:	230a      	movs	r3, #10
 8002de6:	fb03 0909 	mla	r9, r3, r9, r0
 8002dea:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 8002dee:	e7f0      	b.n	8002dd2 <_vprintk+0xde>
				long_ctr++;
 8002df0:	f10a 0a01 	add.w	sl, sl, #1
 8002df4:	e797      	b.n	8002d26 <_vprintk+0x32>
				if (long_ctr < 2) {
 8002df6:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
 8002dfa:	bfc5      	ittet	gt
 8002dfc:	3407      	addgt	r4, #7
 8002dfe:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
 8002e02:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
 8002e04:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
 8002e06:	bfd4      	ite	le
 8002e08:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
 8002e0a:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
 8002e0e:	2d00      	cmp	r5, #0
 8002e10:	da05      	bge.n	8002e1e <_vprintk+0x12a>
					out((int)'-', ctx);
 8002e12:	4639      	mov	r1, r7
 8002e14:	202d      	movs	r0, #45	; 0x2d
 8002e16:	47b0      	blx	r6
					d = -d;
 8002e18:	426d      	negs	r5, r5
					min_width--;
 8002e1a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
 8002e1e:	f8cd 9000 	str.w	r9, [sp]
 8002e22:	4643      	mov	r3, r8
 8002e24:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
 8002e26:	4639      	mov	r1, r7
 8002e28:	4630      	mov	r0, r6
 8002e2a:	f7ff ff0d 	bl	8002c48 <_printk_dec_ulong>
			might_format = 0;
 8002e2e:	2500      	movs	r5, #0
				break;
 8002e30:	e779      	b.n	8002d26 <_vprintk+0x32>
				if (long_ctr < 2) {
 8002e32:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
 8002e36:	bfc5      	ittet	gt
 8002e38:	3407      	addgt	r4, #7
 8002e3a:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
 8002e3e:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
 8002e40:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
 8002e42:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
 8002e46:	bfcc      	ite	gt
 8002e48:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
 8002e4c:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
 8002e4e:	4643      	mov	r3, r8
 8002e50:	e7e9      	b.n	8002e26 <_vprintk+0x132>
				  out('0', ctx);
 8002e52:	4639      	mov	r1, r7
 8002e54:	2030      	movs	r0, #48	; 0x30
 8002e56:	47b0      	blx	r6
				  out('x', ctx);
 8002e58:	4639      	mov	r1, r7
 8002e5a:	2078      	movs	r0, #120	; 0x78
 8002e5c:	47b0      	blx	r6
				  min_width = 8;
 8002e5e:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
 8002e62:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
 8002e66:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
 8002e6a:	bfc7      	ittee	gt
 8002e6c:	3407      	addgt	r4, #7
 8002e6e:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
 8002e72:	6823      	ldrle	r3, [r4, #0]
 8002e74:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
 8002e76:	bfc2      	ittt	gt
 8002e78:	f103 0408 	addgt.w	r4, r3, #8
 8002e7c:	681b      	ldrgt	r3, [r3, #0]
 8002e7e:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
 8002e80:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
 8002e84:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
 8002e88:	bfd8      	it	le
 8002e8a:	3404      	addle	r4, #4
	int digits = 0;
 8002e8c:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
 8002e8e:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
 8002e90:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
 8002e92:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8002e96:	9b05      	ldr	r3, [sp, #20]
 8002e98:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8002e9c:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
 8002ea0:	f010 000f 	ands.w	r0, r0, #15
 8002ea4:	d109      	bne.n	8002eba <_vprintk+0x1c6>
 8002ea6:	9b07      	ldr	r3, [sp, #28]
 8002ea8:	b913      	cbnz	r3, 8002eb0 <_vprintk+0x1bc>
 8002eaa:	f1bb 0f00 	cmp.w	fp, #0
 8002eae:	d122      	bne.n	8002ef6 <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
 8002eb0:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8002eb4:	e007      	b.n	8002ec6 <_vprintk+0x1d2>
	for (; size; size--) {
 8002eb6:	9a06      	ldr	r2, [sp, #24]
 8002eb8:	e7eb      	b.n	8002e92 <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
 8002eba:	2809      	cmp	r0, #9
 8002ebc:	bf8c      	ite	hi
 8002ebe:	f04f 0e57 	movhi.w	lr, #87	; 0x57
 8002ec2:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
 8002ec6:	4639      	mov	r1, r7
 8002ec8:	4470      	add	r0, lr
 8002eca:	9206      	str	r2, [sp, #24]
 8002ecc:	47b0      	blx	r6
			digits++;
 8002ece:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
 8002ed0:	9507      	str	r5, [sp, #28]
			digits++;
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
 8002ed6:	f1bb 0f00 	cmp.w	fp, #0
 8002eda:	d1ec      	bne.n	8002eb6 <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
 8002edc:	f1b8 0f03 	cmp.w	r8, #3
 8002ee0:	d1a5      	bne.n	8002e2e <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
 8002ee2:	9b03      	ldr	r3, [sp, #12]
 8002ee4:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
 8002ee8:	2d00      	cmp	r5, #0
 8002eea:	dda0      	ble.n	8002e2e <_vprintk+0x13a>
			out(' ', ctx);
 8002eec:	4639      	mov	r1, r7
 8002eee:	2020      	movs	r0, #32
 8002ef0:	47b0      	blx	r6
 8002ef2:	3d01      	subs	r5, #1
 8002ef4:	e7f8      	b.n	8002ee8 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
 8002ef6:	1e53      	subs	r3, r2, #1
 8002ef8:	4591      	cmp	r9, r2
 8002efa:	9306      	str	r3, [sp, #24]
 8002efc:	dbeb      	blt.n	8002ed6 <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
 8002efe:	f1b8 0f01 	cmp.w	r8, #1
 8002f02:	d103      	bne.n	8002f0c <_vprintk+0x218>
				out('0', ctx);
 8002f04:	4639      	mov	r1, r7
 8002f06:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
 8002f08:	47b0      	blx	r6
 8002f0a:	e7e4      	b.n	8002ed6 <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
 8002f0c:	f1b8 0f02 	cmp.w	r8, #2
 8002f10:	d1e1      	bne.n	8002ed6 <_vprintk+0x1e2>
				out(' ', ctx);
 8002f12:	4639      	mov	r1, r7
 8002f14:	2020      	movs	r0, #32
 8002f16:	e7f7      	b.n	8002f08 <_vprintk+0x214>
					out((int)(*s++), ctx);
 8002f18:	4639      	mov	r1, r7
 8002f1a:	9303      	str	r3, [sp, #12]
 8002f1c:	462c      	mov	r4, r5
 8002f1e:	47b0      	blx	r6
 8002f20:	9b03      	ldr	r3, [sp, #12]
 8002f22:	e734      	b.n	8002d8e <_vprintk+0x9a>
						out(' ', ctx);
 8002f24:	4639      	mov	r1, r7
 8002f26:	2020      	movs	r0, #32
 8002f28:	47b0      	blx	r6
 8002f2a:	3c01      	subs	r4, #1
 8002f2c:	e73c      	b.n	8002da8 <_vprintk+0xb4>
				out(c, ctx);
 8002f2e:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
 8002f30:	1d25      	adds	r5, r4, #4
				out(c, ctx);
 8002f32:	4639      	mov	r1, r7
 8002f34:	47b0      	blx	r6
				int c = va_arg(ap, int);
 8002f36:	462c      	mov	r4, r5
 8002f38:	e779      	b.n	8002e2e <_vprintk+0x13a>
				long_ctr = 0;
 8002f3a:	46aa      	mov	sl, r5
				padding = PAD_NONE;
 8002f3c:	46a8      	mov	r8, r5
				min_width = -1;
 8002f3e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
 8002f42:	2501      	movs	r5, #1
 8002f44:	e6ef      	b.n	8002d26 <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
 8002f46:	f04f 0801 	mov.w	r8, #1
 8002f4a:	e6ec      	b.n	8002d26 <_vprintk+0x32>
				char *s = va_arg(ap, char *);
 8002f4c:	465c      	mov	r4, fp
			might_format = 0;
 8002f4e:	4605      	mov	r5, r0
 8002f50:	e6e9      	b.n	8002d26 <_vprintk+0x32>
	...

08002f54 <vprintk>:
{
 8002f54:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
 8002f56:	ac02      	add	r4, sp, #8
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4803      	ldr	r0, [pc, #12]	; (8002f70 <vprintk+0x1c>)
 8002f64:	4621      	mov	r1, r4
 8002f66:	f7ff fec5 	bl	8002cf4 <_vprintk>
}
 8002f6a:	b002      	add	sp, #8
 8002f6c:	bd10      	pop	{r4, pc}
 8002f6e:	bf00      	nop
 8002f70:	08002c39 	.word	0x08002c39

08002f74 <printk>:
{
 8002f74:	b40f      	push	{r0, r1, r2, r3}
 8002f76:	b507      	push	{r0, r1, r2, lr}
 8002f78:	a904      	add	r1, sp, #16
 8002f7a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8002f7e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 8002f80:	f7ff ffe8 	bl	8002f54 <vprintk>
}
 8002f84:	b003      	add	sp, #12
 8002f86:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f8a:	b004      	add	sp, #16
 8002f8c:	4770      	bx	lr

08002f8e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_COMPILER_OPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_KERNEL_BIN_NAME, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
 8002f8e:	4770      	bx	lr

08002f90 <stm32l4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8002f90:	f04f 0310 	mov.w	r3, #16
 8002f94:	f3ef 8111 	mrs	r1, BASEPRI
 8002f98:	f383 8811 	msr	BASEPRI, r3
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <stm32l4_init+0x24>)
 8002f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fa2:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8002fa4:	62da      	str	r2, [r3, #44]	; 0x2c
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8002fa6:	f381 8811 	msr	BASEPRI, r1

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8002faa:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <stm32l4_init+0x28>)
 8002fac:	4a03      	ldr	r2, [pc, #12]	; (8002fbc <stm32l4_init+0x2c>)
 8002fae:	601a      	str	r2, [r3, #0]

	return 0;
}
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	4770      	bx	lr
 8002fb4:	e000ed00 	.word	0xe000ed00
 8002fb8:	20001364 	.word	0x20001364
 8002fbc:	003d0900 	.word	0x003d0900

08002fc0 <stm32_gpio_flags_to_conf>:
	u32_t ascr; /* Only present on STM32L4x1, STM32L4x5, STM32L4x6 */
};

int stm32_gpio_flags_to_conf(int flags, int *pincfg)
{
	int direction = flags & GPIO_DIR_MASK;
 8002fc0:	f000 0301 	and.w	r3, r0, #1
	int pud = flags & GPIO_PUD_MASK;

	if (!pincfg) {
 8002fc4:	b1b1      	cbz	r1, 8002ff4 <stm32_gpio_flags_to_conf+0x34>
		return -EINVAL;
	}

	if (direction == GPIO_DIR_OUT) {
 8002fc6:	b123      	cbz	r3, 8002fd2 <stm32_gpio_flags_to_conf+0x12>
		*pincfg = STM32_MODER_OUTPUT_MODE;
 8002fc8:	2310      	movs	r3, #16
 8002fca:	600b      	str	r3, [r1, #0]
			/* floating */
			*pincfg = *pincfg | STM32_PUPDR_NO_PULL;
		}
	}

	return 0;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	4770      	bx	lr
	int pud = flags & GPIO_PUD_MASK;
 8002fd2:	f400 7040 	and.w	r0, r0, #768	; 0x300
		if (pud == GPIO_PUD_PULL_UP) {
 8002fd6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002fda:	d103      	bne.n	8002fe4 <stm32_gpio_flags_to_conf+0x24>
			*pincfg = *pincfg | STM32_PUPDR_PULL_UP;
 8002fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
			*pincfg = *pincfg | STM32_PUPDR_PULL_DOWN;
 8002fe0:	600a      	str	r2, [r1, #0]
 8002fe2:	e7f4      	b.n	8002fce <stm32_gpio_flags_to_conf+0xe>
		} else if (pud == GPIO_PUD_PULL_DOWN) {
 8002fe4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002fe8:	d001      	beq.n	8002fee <stm32_gpio_flags_to_conf+0x2e>
		*pincfg = STM32_MODER_INPUT_MODE;
 8002fea:	600b      	str	r3, [r1, #0]
 8002fec:	e7ef      	b.n	8002fce <stm32_gpio_flags_to_conf+0xe>
			*pincfg = *pincfg | STM32_PUPDR_PULL_DOWN;
 8002fee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ff2:	e7f5      	b.n	8002fe0 <stm32_gpio_flags_to_conf+0x20>
		return -EINVAL;
 8002ff4:	f06f 0315 	mvn.w	r3, #21
 8002ff8:	e7e9      	b.n	8002fce <stm32_gpio_flags_to_conf+0xe>

08002ffa <stm32_gpio_configure>:

int stm32_gpio_configure(u32_t *base_addr, int pin, int pinconf, int afnum)
{
 8002ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile struct stm32l4x_gpio *gpio =
		(struct stm32l4x_gpio *)(base_addr);
	unsigned int mode, otype, ospeed, pupd;
	unsigned int pin_shift = pin << 1;
	unsigned int afr_bank = pin / 8;
	unsigned int afr_shift = (pin % 8) << 2;
 8002ffc:	424c      	negs	r4, r1
 8002ffe:	f004 0407 	and.w	r4, r4, #7
	unsigned int pin_shift = pin << 1;
 8003002:	ea4f 0741 	mov.w	r7, r1, lsl #1
	unsigned int afr_shift = (pin % 8) << 2;
 8003006:	f001 0507 	and.w	r5, r1, #7
 800300a:	bf58      	it	pl
 800300c:	4265      	negpl	r5, r4
	mode = (pinconf >> STM32_MODER_SHIFT) & STM32_MODER_MASK;
	otype = (pinconf >> STM32_OTYPER_SHIFT) & STM32_OTYPER_MASK;
	ospeed = (pinconf >> STM32_OSPEEDR_SHIFT) & STM32_OSPEEDR_MASK;
	pupd = (pinconf >> STM32_PUPDR_SHIFT) & STM32_PUPDR_MASK;

	scratch = gpio->moder & ~(STM32_MODER_MASK << pin_shift);
 800300e:	2403      	movs	r4, #3
 8003010:	f8d0 e000 	ldr.w	lr, [r0]
 8003014:	40bc      	lsls	r4, r7
 8003016:	43e4      	mvns	r4, r4
	mode = (pinconf >> STM32_MODER_SHIFT) & STM32_MODER_MASK;
 8003018:	f3c2 1601 	ubfx	r6, r2, #4, #2
	scratch = gpio->moder & ~(STM32_MODER_MASK << pin_shift);
 800301c:	ea0e 0e04 	and.w	lr, lr, r4
	gpio->moder = scratch | (mode << pin_shift);
 8003020:	40be      	lsls	r6, r7
 8003022:	ea46 060e 	orr.w	r6, r6, lr
 8003026:	6006      	str	r6, [r0, #0]

	scratch = gpio->ospeedr & ~(STM32_OSPEEDR_MASK << pin_shift);
 8003028:	f8d0 e008 	ldr.w	lr, [r0, #8]
	ospeed = (pinconf >> STM32_OSPEEDR_SHIFT) & STM32_OSPEEDR_MASK;
 800302c:	f3c2 16c1 	ubfx	r6, r2, #7, #2
	scratch = gpio->ospeedr & ~(STM32_OSPEEDR_MASK << pin_shift);
 8003030:	ea04 0e0e 	and.w	lr, r4, lr
	gpio->ospeedr = scratch | (ospeed << pin_shift);
 8003034:	40be      	lsls	r6, r7
 8003036:	ea46 060e 	orr.w	r6, r6, lr
 800303a:	6086      	str	r6, [r0, #8]

	scratch = gpio->otyper & ~(STM32_OTYPER_MASK << pin);
 800303c:	6846      	ldr	r6, [r0, #4]
 800303e:	f04f 0e01 	mov.w	lr, #1
 8003042:	fa0e fe01 	lsl.w	lr, lr, r1
 8003046:	ea26 060e 	bic.w	r6, r6, lr
	otype = (pinconf >> STM32_OTYPER_SHIFT) & STM32_OTYPER_MASK;
 800304a:	f3c2 1e80 	ubfx	lr, r2, #6, #1
	gpio->otyper = scratch | (otype << pin);
 800304e:	fa0e fe01 	lsl.w	lr, lr, r1
 8003052:	ea46 060e 	orr.w	r6, r6, lr
 8003056:	6046      	str	r6, [r0, #4]

	scratch = gpio->pupdr & ~(STM32_PUPDR_MASK << pin_shift);
 8003058:	68c6      	ldr	r6, [r0, #12]
	pupd = (pinconf >> STM32_PUPDR_SHIFT) & STM32_PUPDR_MASK;
 800305a:	f3c2 2241 	ubfx	r2, r2, #9, #2
	gpio->pupdr = scratch | (pupd << pin_shift);
 800305e:	40ba      	lsls	r2, r7
	scratch = gpio->pupdr & ~(STM32_PUPDR_MASK << pin_shift);
 8003060:	4034      	ands	r4, r6
	gpio->pupdr = scratch | (pupd << pin_shift);
 8003062:	4322      	orrs	r2, r4
 8003064:	60c2      	str	r2, [r0, #12]
	unsigned int afr_bank = pin / 8;
 8003066:	2208      	movs	r2, #8
 8003068:	fb91 f1f2 	sdiv	r1, r1, r2
 800306c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	unsigned int afr_shift = (pin % 8) << 2;
 8003070:	00ad      	lsls	r5, r5, #2

	scratch = gpio->afr[afr_bank] & ~(STM32_AFR_MASK << afr_shift);
 8003072:	6a02      	ldr	r2, [r0, #32]
 8003074:	210f      	movs	r1, #15
 8003076:	40a9      	lsls	r1, r5
 8003078:	ea22 0201 	bic.w	r2, r2, r1
	gpio->afr[afr_bank] = scratch | (afnum << afr_shift);
 800307c:	40ab      	lsls	r3, r5
 800307e:	431a      	orrs	r2, r3
 8003080:	6202      	str	r2, [r0, #32]

	return 0;
}
 8003082:	2000      	movs	r0, #0
 8003084:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003086 <stm32_gpio_set>:

int stm32_gpio_set(u32_t *base, int pin, int value)
{
	struct stm32l4x_gpio *gpio = (struct stm32l4x_gpio *)base;
	int pval = 1 << (pin & 0xf);
 8003086:	2301      	movs	r3, #1
 8003088:	f001 010f 	and.w	r1, r1, #15
 800308c:	fa03 f101 	lsl.w	r1, r3, r1
 8003090:	6943      	ldr	r3, [r0, #20]

	if (value) {
 8003092:	b11a      	cbz	r2, 800309c <stm32_gpio_set+0x16>
		gpio->odr |= pval;
 8003094:	430b      	orrs	r3, r1
	} else {
		gpio->odr &= ~pval;
 8003096:	6143      	str	r3, [r0, #20]
	}

	return 0;
}
 8003098:	2000      	movs	r0, #0
 800309a:	4770      	bx	lr
		gpio->odr &= ~pval;
 800309c:	ea23 0301 	bic.w	r3, r3, r1
 80030a0:	e7f9      	b.n	8003096 <stm32_gpio_set+0x10>

080030a2 <stm32_gpio_get>:

int stm32_gpio_get(u32_t *base, int pin)
{
	struct stm32l4x_gpio *gpio = (struct stm32l4x_gpio *)base;

	return (gpio->idr >> pin) & STM32L4X_IDR_PIN_MASK;
 80030a2:	6900      	ldr	r0, [r0, #16]
 80030a4:	40c8      	lsrs	r0, r1
}
 80030a6:	f000 0001 	and.w	r0, r0, #1
 80030aa:	4770      	bx	lr

080030ac <stm32_gpio_enable_int>:

int stm32_gpio_enable_int(int port, int pin)
{
 80030ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80030ae:	4605      	mov	r5, r0
 80030b0:	481d      	ldr	r0, [pc, #116]	; (8003128 <stm32_gpio_enable_int+0x7c>)
 80030b2:	460c      	mov	r4, r1
 80030b4:	f001 fd44 	bl	8004b40 <_impl_device_get_binding>
	struct stm32l4x_syscfg *syscfg = (struct stm32l4x_syscfg *)SYSCFG_BASE;
	struct device *clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	u32_t *reg;

	/* Enable SYSCFG clock */
	struct stm32_pclken pclken = {
 80030b8:	491c      	ldr	r1, [pc, #112]	; (800312c <stm32_gpio_enable_int+0x80>)
 80030ba:	4602      	mov	r2, r0
 80030bc:	c903      	ldmia	r1, {r0, r1}
 80030be:	e88d 0003 	stmia.w	sp, {r0, r1}
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
 80030c2:	6851      	ldr	r1, [r2, #4]
 80030c4:	4610      	mov	r0, r2
 80030c6:	680e      	ldr	r6, [r1, #0]
 80030c8:	4669      	mov	r1, sp
 80030ca:	47b0      	blx	r6
		.bus = STM32_CLOCK_BUS_APB2,
		.enr = LL_APB2_GRP1_PERIPH_SYSCFG
	};
	clock_control_on(clk, (clock_control_subsys_t *) &pclken);

	if (pin <= STM32L4X_PIN3) {
 80030cc:	2c03      	cmp	r4, #3
 80030ce:	dc15      	bgt.n	80030fc <stm32_gpio_enable_int+0x50>
		reg = &syscfg->exticr1;
 80030d0:	4b17      	ldr	r3, [pc, #92]	; (8003130 <stm32_gpio_enable_int+0x84>)
 80030d2:	4a18      	ldr	r2, [pc, #96]	; (8003134 <stm32_gpio_enable_int+0x88>)
 80030d4:	689b      	ldr	r3, [r3, #8]
		reg = &syscfg->exticr4;
	} else {
		return -EINVAL;
	}

	*reg &= ~(STM32L4X_SYSCFG_EXTICR_PIN_MASK << ((pin % 4) * 4));
 80030d6:	4261      	negs	r1, r4
 80030d8:	f001 0103 	and.w	r1, r1, #3
 80030dc:	f004 0403 	and.w	r4, r4, #3
 80030e0:	bf58      	it	pl
 80030e2:	424c      	negpl	r4, r1
 80030e4:	00a4      	lsls	r4, r4, #2
 80030e6:	2107      	movs	r1, #7
 80030e8:	40a1      	lsls	r1, r4
 80030ea:	ea23 0301 	bic.w	r3, r3, r1
	*reg |= port << ((pin % 4) * 4);
 80030ee:	fa05 f404 	lsl.w	r4, r5, r4
 80030f2:	431c      	orrs	r4, r3
 80030f4:	6014      	str	r4, [r2, #0]

	return 0; /* Nothing to do here for STM32L4s */
 80030f6:	2000      	movs	r0, #0
}
 80030f8:	b002      	add	sp, #8
 80030fa:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pin <= STM32L4X_PIN7) {
 80030fc:	2c07      	cmp	r4, #7
 80030fe:	dc03      	bgt.n	8003108 <stm32_gpio_enable_int+0x5c>
		reg = &syscfg->exticr2;
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <stm32_gpio_enable_int+0x84>)
 8003102:	4a0d      	ldr	r2, [pc, #52]	; (8003138 <stm32_gpio_enable_int+0x8c>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	e7e6      	b.n	80030d6 <stm32_gpio_enable_int+0x2a>
	} else if (pin <= STM32L4X_PIN11) {
 8003108:	2c0b      	cmp	r4, #11
 800310a:	dc03      	bgt.n	8003114 <stm32_gpio_enable_int+0x68>
		reg = &syscfg->exticr3;
 800310c:	4b08      	ldr	r3, [pc, #32]	; (8003130 <stm32_gpio_enable_int+0x84>)
 800310e:	4a0b      	ldr	r2, [pc, #44]	; (800313c <stm32_gpio_enable_int+0x90>)
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	e7e0      	b.n	80030d6 <stm32_gpio_enable_int+0x2a>
	} else if (pin <= STM32L4X_PIN15) {
 8003114:	2c0f      	cmp	r4, #15
 8003116:	dc03      	bgt.n	8003120 <stm32_gpio_enable_int+0x74>
		reg = &syscfg->exticr4;
 8003118:	4b05      	ldr	r3, [pc, #20]	; (8003130 <stm32_gpio_enable_int+0x84>)
 800311a:	4a09      	ldr	r2, [pc, #36]	; (8003140 <stm32_gpio_enable_int+0x94>)
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	e7da      	b.n	80030d6 <stm32_gpio_enable_int+0x2a>
		return -EINVAL;
 8003120:	f06f 0015 	mvn.w	r0, #21
 8003124:	e7e8      	b.n	80030f8 <stm32_gpio_enable_int+0x4c>
 8003126:	bf00      	nop
 8003128:	08005c07 	.word	0x08005c07
 800312c:	080059cc 	.word	0x080059cc
 8003130:	40010000 	.word	0x40010000
 8003134:	40010008 	.word	0x40010008
 8003138:	4001000c 	.word	0x4001000c
 800313c:	40010010 	.word	0x40010010
 8003140:	40010014 	.word	0x40010014

08003144 <LL_RTC_ALMA_Init>:
  *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
  *         @arg @ref LL_RTC_HOURFORMAT_AMPM
  */
__STATIC_INLINE uint32_t LL_RTC_GetHourFormat(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8003144:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_RTC_ALMA_MASK(RTC_AlarmStruct->AlarmMask));
  assert_param(IS_LL_RTC_ALMA_DATE_WEEKDAY_SEL(RTC_AlarmStruct->AlarmDateWeekDaySel));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8003146:	065b      	lsls	r3, r3, #25
      assert_param(IS_LL_RTC_HOUR12(RTC_AlarmStruct->AlarmTime.Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_AlarmStruct->AlarmTime.TimeFormat));
    }
    else
    {
      RTC_AlarmStruct->AlarmTime.TimeFormat = 0x00U;
 8003148:	bf58      	it	pl
 800314a:	2300      	movpl	r3, #0
{
 800314c:	b5f0      	push	{r4, r5, r6, r7, lr}
      RTC_AlarmStruct->AlarmTime.TimeFormat = 0x00U;
 800314e:	bf58      	it	pl
 8003150:	6013      	strpl	r3, [r2, #0]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8003152:	23ca      	movs	r3, #202	; 0xca
 8003154:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8003156:	2353      	movs	r3, #83	; 0x53
 8003158:	6243      	str	r3, [r0, #36]	; 0x24

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);

  /* Select weekday selection */
  if (RTC_AlarmStruct->AlarmDateWeekDaySel == LL_RTC_ALMA_DATEWEEKDAYSEL_DATE)
 800315a:	68d3      	ldr	r3, [r2, #12]
 800315c:	6817      	ldr	r7, [r2, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d154      	bne.n	800320c <LL_RTC_ALMA_Init+0xc8>
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ALMA_DisableWeekday(RTC_TypeDef *RTCx)
{
  CLEAR_BIT(RTCx->ALRMAR, RTC_ALRMAR_WDSEL);
 8003162:	69c3      	ldr	r3, [r0, #28]
 8003164:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003168:	61c3      	str	r3, [r0, #28]
 800316a:	7c14      	ldrb	r4, [r2, #16]
  {
    /* Set the date for ALARM */
    LL_RTC_ALMA_DisableWeekday(RTCx);
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 800316c:	b1f1      	cbz	r1, 80031ac <LL_RTC_ALMA_Init+0x68>
  * @param  Day Value between Min_Data=0x01 and Max_Data=0x31
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ALMA_SetDay(RTC_TypeDef *RTCx, uint32_t Day)
{
  MODIFY_REG(RTCx->ALRMAR, (RTC_ALRMAR_DT | RTC_ALRMAR_DU),
 800316e:	69c1      	ldr	r1, [r0, #28]
 8003170:	f021 517c 	bic.w	r1, r1, #1056964608	; 0x3f000000
 8003174:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8003178:	61c1      	str	r1, [r0, #28]

  temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos))    | \
         (((Minutes & 0xF0U) << (RTC_ALRMAR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_ALRMAR_MNU_Pos)) | \
         (((Seconds & 0xF0U) << (RTC_ALRMAR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_ALRMAR_SU_Pos));

  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALRMAR_MNU | RTC_ALRMAR_ST | RTC_ALRMAR_SU, temp);
 800317a:	69c1      	ldr	r1, [r0, #28]
  }

  /* Configure the Alarm register */
  if (RTC_Format != LL_RTC_FORMAT_BIN)
  {
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat, RTC_AlarmStruct->AlarmTime.Hours,
 800317c:	7993      	ldrb	r3, [r2, #6]
 800317e:	7954      	ldrb	r4, [r2, #5]
 8003180:	433b      	orrs	r3, r7
 8003182:	f021 117f 	bic.w	r1, r1, #8323199	; 0x7f007f
 8003186:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
 800318a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800318e:	430b      	orrs	r3, r1
 8003190:	7911      	ldrb	r1, [r2, #4]
 8003192:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003196:	61c3      	str	r3, [r0, #28]
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_MSK4 | RTC_ALRMAR_MSK3 | RTC_ALRMAR_MSK2 | RTC_ALRMAR_MSK1, Mask);
 8003198:	69c3      	ldr	r3, [r0, #28]
 800319a:	6892      	ldr	r2, [r2, #8]
 800319c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61c3      	str	r3, [r0, #28]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80031a4:	23ff      	movs	r3, #255	; 0xff
 80031a6:	6243      	str	r3, [r0, #36]	; 0x24

  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);

  return SUCCESS;
}
 80031a8:	2001      	movs	r0, #1
 80031aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(RTCx->ALRMAR, (RTC_ALRMAR_DT | RTC_ALRMAR_DU),
 80031ac:	69c3      	ldr	r3, [r0, #28]
      LL_RTC_ALMA_SetDay(RTCx, __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmDateWeekDay));
 80031ae:	210a      	movs	r1, #10
 80031b0:	fbb4 f5f1 	udiv	r5, r4, r1
 80031b4:	fb01 4115 	mls	r1, r1, r5, r4
 80031b8:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 80031bc:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80031c0:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 80031c4:	61c1      	str	r1, [r0, #28]
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Seconds));
 80031c6:	7993      	ldrb	r3, [r2, #6]
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALRMAR_MNU | RTC_ALRMAR_ST | RTC_ALRMAR_SU, temp);
 80031c8:	69c6      	ldr	r6, [r0, #28]
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Minutes),
 80031ca:	7954      	ldrb	r4, [r2, #5]
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Hours),
 80031cc:	7915      	ldrb	r5, [r2, #4]
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Seconds));
 80031ce:	210a      	movs	r1, #10
 80031d0:	f026 167f 	bic.w	r6, r6, #8323199	; 0x7f007f
 80031d4:	fbb3 fef1 	udiv	lr, r3, r1
 80031d8:	fb01 331e 	mls	r3, r1, lr, r3
 80031dc:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
 80031e0:	f426 46fe 	bic.w	r6, r6, #32512	; 0x7f00
 80031e4:	433e      	orrs	r6, r7
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat,
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	4333      	orrs	r3, r6
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Minutes),
 80031ea:	fbb4 f6f1 	udiv	r6, r4, r1
 80031ee:	fb01 4416 	mls	r4, r1, r6, r4
 80031f2:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat,
 80031f6:	b2e4      	uxtb	r4, r4
 80031f8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Hours),
 80031fc:	fbb5 f4f1 	udiv	r4, r5, r1
 8003200:	fb01 5114 	mls	r1, r1, r4, r5
 8003204:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat,
 8003208:	b2c9      	uxtb	r1, r1
 800320a:	e7c2      	b.n	8003192 <LL_RTC_ALMA_Init+0x4e>
  SET_BIT(RTCx->ALRMAR, RTC_ALRMAR_WDSEL);
 800320c:	69c3      	ldr	r3, [r0, #28]
 800320e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003212:	61c3      	str	r3, [r0, #28]
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_DU, WeekDay << RTC_ALRMAR_DU_Pos);
 8003214:	69c3      	ldr	r3, [r0, #28]
    LL_RTC_ALMA_SetWeekDay(RTCx, RTC_AlarmStruct->AlarmDateWeekDay);
 8003216:	7c14      	ldrb	r4, [r2, #16]
 8003218:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800321c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8003220:	61c3      	str	r3, [r0, #28]
  if (RTC_Format != LL_RTC_FORMAT_BIN)
 8003222:	2900      	cmp	r1, #0
 8003224:	d0cf      	beq.n	80031c6 <LL_RTC_ALMA_Init+0x82>
 8003226:	e7a8      	b.n	800317a <LL_RTC_ALMA_Init+0x36>

08003228 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8003228:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 800322a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800322e:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8003230:	68c3      	ldr	r3, [r0, #12]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8003232:	065a      	lsls	r2, r3, #25
 8003234:	d41c      	bmi.n	8003270 <LL_RTC_EnterInitMode+0x48>
  WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 8003236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800323a:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 800323c:	68c3      	ldr	r3, [r0, #12]
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800323e:	490d      	ldr	r1, [pc, #52]	; (8003274 <LL_RTC_EnterInitMode+0x4c>)
 8003240:	f3c3 1380 	ubfx	r3, r3, #6, #1
  ErrorStatus status = SUCCESS;
 8003244:	2201      	movs	r2, #1
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 8003246:	9c01      	ldr	r4, [sp, #4]
 8003248:	b104      	cbz	r4, 800324c <LL_RTC_EnterInitMode+0x24>
 800324a:	b113      	cbz	r3, 8003252 <LL_RTC_EnterInitMode+0x2a>
        status = ERROR;
      }
    }
  }
  return status;
}
 800324c:	4610      	mov	r0, r2
 800324e:	b002      	add	sp, #8
 8003250:	bd10      	pop	{r4, pc}
 8003252:	680b      	ldr	r3, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8003254:	03db      	lsls	r3, r3, #15
        timeout --;
 8003256:	bf42      	ittt	mi
 8003258:	9b01      	ldrmi	r3, [sp, #4]
 800325a:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 800325e:	9301      	strmi	r3, [sp, #4]
 8003260:	68c3      	ldr	r3, [r0, #12]
      if (timeout == 0U)
 8003262:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 8003264:	2c00      	cmp	r4, #0
 8003266:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800326a:	bf08      	it	eq
 800326c:	2200      	moveq	r2, #0
 800326e:	e7ea      	b.n	8003246 <LL_RTC_EnterInitMode+0x1e>
  ErrorStatus status = SUCCESS;
 8003270:	2201      	movs	r2, #1
 8003272:	e7eb      	b.n	800324c <LL_RTC_EnterInitMode+0x24>
 8003274:	e000e010 	.word	0xe000e010

08003278 <LL_RTC_Init>:
{
 8003278:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800327a:	23ca      	movs	r3, #202	; 0xca
 800327c:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800327e:	2353      	movs	r3, #83	; 0x53
 8003280:	6243      	str	r3, [r0, #36]	; 0x24
 8003282:	4604      	mov	r4, r0
 8003284:	460d      	mov	r5, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8003286:	f7ff ffcf 	bl	8003228 <LL_RTC_EnterInitMode>
 800328a:	b1c0      	cbz	r0, 80032be <LL_RTC_Init+0x46>
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 800328c:	68a3      	ldr	r3, [r4, #8]
 800328e:	682a      	ldr	r2, [r5, #0]
 8003290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003294:	4313      	orrs	r3, r2
 8003296:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8003298:	6923      	ldr	r3, [r4, #16]
 800329a:	68aa      	ldr	r2, [r5, #8]
 800329c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80032a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80032a4:	4313      	orrs	r3, r2
 80032a6:	6123      	str	r3, [r4, #16]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 80032a8:	6923      	ldr	r3, [r4, #16]
 80032aa:	686a      	ldr	r2, [r5, #4]
 80032ac:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80032b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80032b4:	6123      	str	r3, [r4, #16]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 80032b6:	f06f 0380 	mvn.w	r3, #128	; 0x80
 80032ba:	60e3      	str	r3, [r4, #12]
    status = SUCCESS;
 80032bc:	2001      	movs	r0, #1
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80032be:	23ff      	movs	r3, #255	; 0xff
 80032c0:	6263      	str	r3, [r4, #36]	; 0x24
}
 80032c2:	bd38      	pop	{r3, r4, r5, pc}

080032c4 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 80032c4:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 80032c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ca:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 80032cc:	68c3      	ldr	r3, [r0, #12]
 80032ce:	491e      	ldr	r1, [pc, #120]	; (8003348 <LL_RTC_WaitForSynchro+0x84>)
 80032d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d4:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 80032d8:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 80032da:	68c2      	ldr	r2, [r0, #12]
  ErrorStatus status = SUCCESS;
 80032dc:	2301      	movs	r3, #1
 80032de:	f3c2 1240 	ubfx	r2, r2, #5, #1
  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
  while ((timeout != 0U) && (tmp != 0U))
 80032e2:	9c01      	ldr	r4, [sp, #4]
 80032e4:	b91c      	cbnz	r4, 80032ee <LL_RTC_WaitForSynchro+0x2a>
    {
      status = ERROR;
    }
  }

  if (status != ERROR)
 80032e6:	b99b      	cbnz	r3, 8003310 <LL_RTC_WaitForSynchro+0x4c>
      }
    }
  }

  return (status);
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	b002      	add	sp, #8
 80032ec:	bd10      	pop	{r4, pc}
  while ((timeout != 0U) && (tmp != 0U))
 80032ee:	2a00      	cmp	r2, #0
 80032f0:	d0f9      	beq.n	80032e6 <LL_RTC_WaitForSynchro+0x22>
 80032f2:	680a      	ldr	r2, [r1, #0]
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80032f4:	03d4      	lsls	r4, r2, #15
      timeout--;
 80032f6:	bf42      	ittt	mi
 80032f8:	9a01      	ldrmi	r2, [sp, #4]
 80032fa:	f102 32ff 	addmi.w	r2, r2, #4294967295	; 0xffffffff
 80032fe:	9201      	strmi	r2, [sp, #4]
 8003300:	68c2      	ldr	r2, [r0, #12]
    if (timeout == 0U)
 8003302:	9c01      	ldr	r4, [sp, #4]
      status = ERROR;
 8003304:	2c00      	cmp	r4, #0
 8003306:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800330a:	bf08      	it	eq
 800330c:	2300      	moveq	r3, #0
 800330e:	e7e8      	b.n	80032e2 <LL_RTC_WaitForSynchro+0x1e>
    timeout = RTC_SYNCHRO_TIMEOUT;
 8003310:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003314:	9201      	str	r2, [sp, #4]
 8003316:	68c2      	ldr	r2, [r0, #12]
 8003318:	490b      	ldr	r1, [pc, #44]	; (8003348 <LL_RTC_WaitForSynchro+0x84>)
 800331a:	f3c2 1240 	ubfx	r2, r2, #5, #1
    while ((timeout != 0U) && (tmp != 1U))
 800331e:	9c01      	ldr	r4, [sp, #4]
 8003320:	2c00      	cmp	r4, #0
 8003322:	d0e1      	beq.n	80032e8 <LL_RTC_WaitForSynchro+0x24>
 8003324:	2a00      	cmp	r2, #0
 8003326:	d1df      	bne.n	80032e8 <LL_RTC_WaitForSynchro+0x24>
 8003328:	680a      	ldr	r2, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 800332a:	03d2      	lsls	r2, r2, #15
        timeout--;
 800332c:	bf42      	ittt	mi
 800332e:	9a01      	ldrmi	r2, [sp, #4]
 8003330:	f102 32ff 	addmi.w	r2, r2, #4294967295	; 0xffffffff
 8003334:	9201      	strmi	r2, [sp, #4]
 8003336:	68c2      	ldr	r2, [r0, #12]
      if (timeout == 0U)
 8003338:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 800333a:	2c00      	cmp	r4, #0
 800333c:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8003340:	bf08      	it	eq
 8003342:	2300      	moveq	r3, #0
 8003344:	e7eb      	b.n	800331e <LL_RTC_WaitForSynchro+0x5a>
 8003346:	bf00      	nop
 8003348:	e000e010 	.word	0xe000e010

0800334c <LL_RTC_DeInit>:
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800334c:	23ca      	movs	r3, #202	; 0xca
{
 800334e:	b510      	push	{r4, lr}
 8003350:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8003352:	2353      	movs	r3, #83	; 0x53
 8003354:	6243      	str	r3, [r0, #36]	; 0x24
 8003356:	4604      	mov	r4, r0
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8003358:	f7ff ff66 	bl	8003228 <LL_RTC_EnterInitMode>
 800335c:	b1c8      	cbz	r0, 8003392 <LL_RTC_DeInit+0x46>
    LL_RTC_WriteReg(RTCx, TR, 0x00000000U);
 800335e:	2300      	movs	r3, #0
    LL_RTC_WriteReg(RTCx, WUTR, RTC_WUTR_WUT);
 8003360:	f64f 72ff 	movw	r2, #65535	; 0xffff
    LL_RTC_WriteReg(RTCx, TR, 0x00000000U);
 8003364:	6023      	str	r3, [r4, #0]
    LL_RTC_WriteReg(RTCx, WUTR, RTC_WUTR_WUT);
 8003366:	6162      	str	r2, [r4, #20]
    LL_RTC_WriteReg(RTCx, DR, (RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 8003368:	f242 1201 	movw	r2, #8449	; 0x2101
 800336c:	6062      	str	r2, [r4, #4]
    LL_RTC_WriteReg(RTCx, CR, (LL_RTC_ReadReg(RTCx, CR) & RTC_CR_WUCKSEL));
 800336e:	68a2      	ldr	r2, [r4, #8]
 8003370:	f002 0207 	and.w	r2, r2, #7
 8003374:	60a2      	str	r2, [r4, #8]
    LL_RTC_WriteReg(RTCx, PRER,     (RTC_PRER_PREDIV_A | RTC_SYNCH_PRESC_DEFAULT));
 8003376:	4a08      	ldr	r2, [pc, #32]	; (8003398 <LL_RTC_DeInit+0x4c>)
 8003378:	6122      	str	r2, [r4, #16]
    status = LL_RTC_WaitForSynchro(RTCx);
 800337a:	4620      	mov	r0, r4
    LL_RTC_WriteReg(RTCx, ALRMAR,   0x00000000U);
 800337c:	61e3      	str	r3, [r4, #28]
    LL_RTC_WriteReg(RTCx, ALRMBR,   0x00000000U);
 800337e:	6223      	str	r3, [r4, #32]
    LL_RTC_WriteReg(RTCx, SHIFTR,   0x00000000U);
 8003380:	62e3      	str	r3, [r4, #44]	; 0x2c
    LL_RTC_WriteReg(RTCx, CALR,     0x00000000U);
 8003382:	63e3      	str	r3, [r4, #60]	; 0x3c
    LL_RTC_WriteReg(RTCx, ALRMASSR, 0x00000000U);
 8003384:	6463      	str	r3, [r4, #68]	; 0x44
    LL_RTC_WriteReg(RTCx, ALRMBSSR, 0x00000000U);
 8003386:	64a3      	str	r3, [r4, #72]	; 0x48
    LL_RTC_WriteReg(RTCx, ISR,      0x00000000U);
 8003388:	60e3      	str	r3, [r4, #12]
    LL_RTC_WriteReg(RTCx, TAMPCR, 0x00000000U);
 800338a:	6423      	str	r3, [r4, #64]	; 0x40
    LL_RTC_WriteReg(RTCx, OR, 0x00000000U);
 800338c:	64e3      	str	r3, [r4, #76]	; 0x4c
    status = LL_RTC_WaitForSynchro(RTCx);
 800338e:	f7ff ff99 	bl	80032c4 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8003392:	23ff      	movs	r3, #255	; 0xff
 8003394:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003396:	bd10      	pop	{r4, pc}
 8003398:	007f00ff 	.word	0x007f00ff

0800339c <LL_RTC_TIME_Init>:
{
 800339c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 800339e:	6883      	ldr	r3, [r0, #8]
 80033a0:	4615      	mov	r5, r2
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 80033a2:	065a      	lsls	r2, r3, #25
      RTC_TimeStruct->TimeFormat = 0x00U;
 80033a4:	bf5c      	itt	pl
 80033a6:	2300      	movpl	r3, #0
 80033a8:	602b      	strpl	r3, [r5, #0]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80033aa:	23ca      	movs	r3, #202	; 0xca
 80033ac:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80033ae:	2353      	movs	r3, #83	; 0x53
 80033b0:	6243      	str	r3, [r0, #36]	; 0x24
{
 80033b2:	4604      	mov	r4, r0
  if (RTC_Format == LL_RTC_FORMAT_BIN)
 80033b4:	460f      	mov	r7, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80033b6:	f7ff ff37 	bl	8003228 <LL_RTC_EnterInitMode>
 80033ba:	b1d0      	cbz	r0, 80033f2 <LL_RTC_TIME_Init+0x56>
 80033bc:	79ab      	ldrb	r3, [r5, #6]
 80033be:	682e      	ldr	r6, [r5, #0]
 80033c0:	7968      	ldrb	r0, [r5, #5]
 80033c2:	792d      	ldrb	r5, [r5, #4]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 80033c4:	b1c7      	cbz	r7, 80033f8 <LL_RTC_TIME_Init+0x5c>
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 80033c6:	6822      	ldr	r2, [r4, #0]
 80033c8:	4333      	orrs	r3, r6
 80033ca:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 80033ce:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80033d2:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80033d6:	4313      	orrs	r3, r2
 80033d8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80033dc:	6023      	str	r3, [r4, #0]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 80033de:	4b18      	ldr	r3, [pc, #96]	; (8003440 <LL_RTC_TIME_Init+0xa4>)
 80033e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033e4:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 80033e6:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 80033e8:	069b      	lsls	r3, r3, #26
 80033ea:	d427      	bmi.n	800343c <LL_RTC_TIME_Init+0xa0>
      status = LL_RTC_WaitForSynchro(RTCx);
 80033ec:	4620      	mov	r0, r4
 80033ee:	f7ff ff69 	bl	80032c4 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80033f2:	23ff      	movs	r3, #255	; 0xff
 80033f4:	6263      	str	r3, [r4, #36]	; 0x24
}
 80033f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 80033f8:	6821      	ldr	r1, [r4, #0]
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 80033fa:	220a      	movs	r2, #10
 80033fc:	f021 117f 	bic.w	r1, r1, #8323199	; 0x7f007f
 8003400:	fbb3 f7f2 	udiv	r7, r3, r2
 8003404:	fb02 3317 	mls	r3, r2, r7, r3
 8003408:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 800340c:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
 8003410:	4331      	orrs	r1, r6
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8003412:	b2db      	uxtb	r3, r3
 8003414:	430b      	orrs	r3, r1
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 8003416:	fbb0 f1f2 	udiv	r1, r0, r2
 800341a:	fb02 0011 	mls	r0, r2, r1, r0
 800341e:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8003422:	fbb5 f1f2 	udiv	r1, r5, r2
 8003426:	fb02 5211 	mls	r2, r2, r1, r5
 800342a:	b2c0      	uxtb	r0, r0
 800342c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8003430:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800343a:	e7cf      	b.n	80033dc <LL_RTC_TIME_Init+0x40>
      status = SUCCESS;
 800343c:	2001      	movs	r0, #1
 800343e:	e7d8      	b.n	80033f2 <LL_RTC_TIME_Init+0x56>
 8003440:	40002800 	.word	0x40002800

08003444 <LL_RTC_DATE_Init>:
{
 8003444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003446:	4604      	mov	r4, r0
 8003448:	4615      	mov	r5, r2
  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 800344a:	460f      	mov	r7, r1
 800344c:	b931      	cbnz	r1, 800345c <LL_RTC_DATE_Init+0x18>
 800344e:	7853      	ldrb	r3, [r2, #1]
 8003450:	06da      	lsls	r2, r3, #27
    RTC_DateStruct->Month = (uint8_t)((RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU);
 8003452:	bf42      	ittt	mi
 8003454:	f023 0310 	bicmi.w	r3, r3, #16
 8003458:	330a      	addmi	r3, #10
 800345a:	706b      	strbmi	r3, [r5, #1]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800345c:	23ca      	movs	r3, #202	; 0xca
 800345e:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8003460:	2353      	movs	r3, #83	; 0x53
 8003462:	6263      	str	r3, [r4, #36]	; 0x24
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8003464:	4620      	mov	r0, r4
 8003466:	f7ff fedf 	bl	8003228 <LL_RTC_EnterInitMode>
 800346a:	b1c8      	cbz	r0, 80034a0 <LL_RTC_DATE_Init+0x5c>
 800346c:	7868      	ldrb	r0, [r5, #1]
 800346e:	78ab      	ldrb	r3, [r5, #2]
 8003470:	782e      	ldrb	r6, [r5, #0]
 8003472:	78ed      	ldrb	r5, [r5, #3]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8003474:	b1bf      	cbz	r7, 80034a6 <LL_RTC_DATE_Init+0x62>
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8003476:	6861      	ldr	r1, [r4, #4]
 8003478:	4a1c      	ldr	r2, [pc, #112]	; (80034ec <LL_RTC_DATE_Init+0xa8>)
 800347a:	400a      	ands	r2, r1
 800347c:	4313      	orrs	r3, r2
 800347e:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
 8003482:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003486:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800348a:	6063      	str	r3, [r4, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 800348c:	4b18      	ldr	r3, [pc, #96]	; (80034f0 <LL_RTC_DATE_Init+0xac>)
 800348e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003492:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8003494:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8003496:	069b      	lsls	r3, r3, #26
 8003498:	d426      	bmi.n	80034e8 <LL_RTC_DATE_Init+0xa4>
      status = LL_RTC_WaitForSynchro(RTCx);
 800349a:	4620      	mov	r0, r4
 800349c:	f7ff ff12 	bl	80032c4 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80034a0:	23ff      	movs	r3, #255	; 0xff
 80034a2:	6263      	str	r3, [r4, #36]	; 0x24
}
 80034a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80034a6:	220a      	movs	r2, #10
 80034a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80034ac:	fb02 3311 	mls	r3, r2, r1, r3
 80034b0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 80034b4:	6867      	ldr	r7, [r4, #4]
 80034b6:	490d      	ldr	r1, [pc, #52]	; (80034ec <LL_RTC_DATE_Init+0xa8>)
 80034b8:	4039      	ands	r1, r7
 80034ba:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	430b      	orrs	r3, r1
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 80034c2:	fbb0 f1f2 	udiv	r1, r0, r2
 80034c6:	fb02 0011 	mls	r0, r2, r1, r0
 80034ca:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80034ce:	fbb5 f1f2 	udiv	r1, r5, r2
 80034d2:	fb02 5211 	mls	r2, r2, r1, r5
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80034d6:	b2c0      	uxtb	r0, r0
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 80034d8:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80034dc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80034e6:	e7d0      	b.n	800348a <LL_RTC_DATE_Init+0x46>
      status = SUCCESS;
 80034e8:	2001      	movs	r0, #1
 80034ea:	e7d9      	b.n	80034a0 <LL_RTC_DATE_Init+0x5c>
 80034ec:	ff0000c0 	.word	0xff0000c0
 80034f0:	40002800 	.word	0x40002800

080034f4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80034f4:	4a03      	ldr	r2, [pc, #12]	; (8003504 <LL_RCC_SetAHBPrescaler+0x10>)
 80034f6:	6893      	ldr	r3, [r2, #8]
 80034f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034fc:	4318      	orrs	r0, r3
 80034fe:	6090      	str	r0, [r2, #8]
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40021000 	.word	0x40021000

08003508 <UTILS_GetPLLOutputFrequency>:
  assert_param(IS_LL_UTILS_PLLN_VALUE(UTILS_PLLInitStruct->PLLN));
  assert_param(IS_LL_UTILS_PLLR_VALUE(UTILS_PLLInitStruct->PLLR));

  /* Check different PLL parameters according to RM                          */
  /*  - PLLM: ensure that the VCO input frequency ranges from 4 to 16 MHz.   */
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003508:	680b      	ldr	r3, [r1, #0]
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	3301      	adds	r3, #1
 800350e:	fbb0 f3f3 	udiv	r3, r0, r3
  assert_param(IS_LL_UTILS_PLLVCO_INPUT(pllfreq));

  /*  - PLLN: ensure that the VCO output frequency is between 64 and 344 MHz.*/
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8003512:	6848      	ldr	r0, [r1, #4]
 8003514:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003518:	4343      	muls	r3, r0
  assert_param(IS_LL_UTILS_PLLVCO_OUTPUT(pllfreq));

  /*  - PLLR: ensure that max frequency at 120000000 Hz is reached                   */
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 800351a:	6888      	ldr	r0, [r1, #8]
 800351c:	0e40      	lsrs	r0, r0, #25
 800351e:	3001      	adds	r0, #1
 8003520:	0040      	lsls	r0, r0, #1
  assert_param(IS_LL_UTILS_PLL_FREQUENCY(pllfreq));

  return pllfreq;
}
 8003522:	fbb3 f0f0 	udiv	r0, r3, r0
 8003526:	4770      	bx	lr

08003528 <UTILS_SetFlashLatency.part.0>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8003528:	4b18      	ldr	r3, [pc, #96]	; (800358c <UTILS_SetFlashLatency.part.0+0x64>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8003530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003534:	d11d      	bne.n	8003572 <UTILS_SetFlashLatency.part.0+0x4a>
      if(HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ)
 8003536:	4b16      	ldr	r3, [pc, #88]	; (8003590 <UTILS_SetFlashLatency.part.0+0x68>)
 8003538:	4298      	cmp	r0, r3
 800353a:	d81f      	bhi.n	800357c <UTILS_SetFlashLatency.part.0+0x54>
      else if(HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ)
 800353c:	4b15      	ldr	r3, [pc, #84]	; (8003594 <UTILS_SetFlashLatency.part.0+0x6c>)
 800353e:	4298      	cmp	r0, r3
 8003540:	d81e      	bhi.n	8003580 <UTILS_SetFlashLatency.part.0+0x58>
      else if(HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)
 8003542:	4b15      	ldr	r3, [pc, #84]	; (8003598 <UTILS_SetFlashLatency.part.0+0x70>)
 8003544:	4298      	cmp	r0, r3
 8003546:	d81d      	bhi.n	8003584 <UTILS_SetFlashLatency.part.0+0x5c>
      else if(HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)
 8003548:	4b14      	ldr	r3, [pc, #80]	; (800359c <UTILS_SetFlashLatency.part.0+0x74>)
 800354a:	4298      	cmp	r0, r3
 800354c:	d81c      	bhi.n	8003588 <UTILS_SetFlashLatency.part.0+0x60>
        if(HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)
 800354e:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <UTILS_SetFlashLatency.part.0+0x78>)
        if(HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)
 8003550:	4298      	cmp	r0, r3
 8003552:	bf94      	ite	ls
 8003554:	2000      	movls	r0, #0
 8003556:	2001      	movhi	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003558:	4a12      	ldr	r2, [pc, #72]	; (80035a4 <UTILS_SetFlashLatency.part.0+0x7c>)
 800355a:	6813      	ldr	r3, [r2, #0]
 800355c:	f023 030f 	bic.w	r3, r3, #15
 8003560:	4303      	orrs	r3, r0
 8003562:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003564:	6813      	ldr	r3, [r2, #0]
 8003566:	f003 030f 	and.w	r3, r3, #15
}
 800356a:	1a1b      	subs	r3, r3, r0
 800356c:	4258      	negs	r0, r3
 800356e:	4158      	adcs	r0, r3
 8003570:	4770      	bx	lr
      if(HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)
 8003572:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <UTILS_SetFlashLatency.part.0+0x80>)
 8003574:	4298      	cmp	r0, r3
 8003576:	d807      	bhi.n	8003588 <UTILS_SetFlashLatency.part.0+0x60>
        if(HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <UTILS_SetFlashLatency.part.0+0x84>)
 800357a:	e7e9      	b.n	8003550 <UTILS_SetFlashLatency.part.0+0x28>
        latency = LL_FLASH_LATENCY_5;
 800357c:	2005      	movs	r0, #5
 800357e:	e7eb      	b.n	8003558 <UTILS_SetFlashLatency.part.0+0x30>
        latency = LL_FLASH_LATENCY_4;
 8003580:	2004      	movs	r0, #4
 8003582:	e7e9      	b.n	8003558 <UTILS_SetFlashLatency.part.0+0x30>
        latency = LL_FLASH_LATENCY_3;
 8003584:	2003      	movs	r0, #3
 8003586:	e7e7      	b.n	8003558 <UTILS_SetFlashLatency.part.0+0x30>
        latency = LL_FLASH_LATENCY_2;
 8003588:	2002      	movs	r0, #2
 800358a:	e7e5      	b.n	8003558 <UTILS_SetFlashLatency.part.0+0x30>
 800358c:	40007000 	.word	0x40007000
 8003590:	05f5e100 	.word	0x05f5e100
 8003594:	04c4b400 	.word	0x04c4b400
 8003598:	03938700 	.word	0x03938700
 800359c:	02625a00 	.word	0x02625a00
 80035a0:	01312d00 	.word	0x01312d00
 80035a4:	40022000 	.word	0x40022000
 80035a8:	00f42400 	.word	0x00f42400
 80035ac:	007a1200 	.word	0x007a1200

080035b0 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80035b0:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <UTILS_PLL_IsBusy+0x20>)
 80035b2:	6818      	ldr	r0, [r3, #0]
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 80035b4:	681a      	ldr	r2, [r3, #0]
  * @rmtoll CR           PLLSAI2RDY    LL_RCC_PLLSAI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI2_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RCC_CR_PLLSAI2RDY) ? 1UL : 0UL);
 80035b6:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 80035b8:	0112      	lsls	r2, r2, #4
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80035ba:	bf56      	itet	pl
 80035bc:	f080 7000 	eorpl.w	r0, r0, #33554432	; 0x2000000
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 80035c0:	2000      	movmi	r0, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80035c2:	f3c0 6040 	ubfxpl	r0, r0, #25, #1
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RCC_CR_PLLSAI2RDY) ? 1UL : 0UL);
 80035c6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80035ca:	bf18      	it	ne
 80035cc:	2000      	movne	r0, #0
    status = ERROR;
  }
#endif /*RCC_PLLSAI2_SUPPORT*/

  return status;
}
 80035ce:	4770      	bx	lr
 80035d0:	40021000 	.word	0x40021000

080035d4 <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80035d4:	680b      	ldr	r3, [r1, #0]
 80035d6:	4a22      	ldr	r2, [pc, #136]	; (8003660 <UTILS_EnablePLLAndSwitchSystem+0x8c>)
 80035d8:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 80035dc:	b570      	push	{r4, r5, r6, lr}

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 80035de:	4d21      	ldr	r5, [pc, #132]	; (8003664 <UTILS_EnablePLLAndSwitchSystem+0x90>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80035e0:	5cd6      	ldrb	r6, [r2, r3]
  if(SystemCoreClock < hclk_frequency)
 80035e2:	682b      	ldr	r3, [r5, #0]
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80035e4:	fa20 f606 	lsr.w	r6, r0, r6
  if(SystemCoreClock < hclk_frequency)
 80035e8:	429e      	cmp	r6, r3
 80035ea:	d825      	bhi.n	8003638 <UTILS_EnablePLLAndSwitchSystem+0x64>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80035ec:	4c1e      	ldr	r4, [pc, #120]	; (8003668 <UTILS_EnablePLLAndSwitchSystem+0x94>)
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035f4:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80035f6:	68e3      	ldr	r3, [r4, #12]
 80035f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035fc:	60e3      	str	r3, [r4, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	019b      	lsls	r3, r3, #6
 8003602:	d5fc      	bpl.n	80035fe <UTILS_EnablePLLAndSwitchSystem+0x2a>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 8003604:	6808      	ldr	r0, [r1, #0]
 8003606:	f7ff ff75 	bl	80034f4 <LL_RCC_SetAHBPrescaler>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800360a:	68a3      	ldr	r3, [r4, #8]
 800360c:	f043 0303 	orr.w	r3, r3, #3
 8003610:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003612:	68a3      	ldr	r3, [r4, #8]
 8003614:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003618:	2b0c      	cmp	r3, #12
 800361a:	d1fa      	bne.n	8003612 <UTILS_EnablePLLAndSwitchSystem+0x3e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800361c:	68a3      	ldr	r3, [r4, #8]
 800361e:	684a      	ldr	r2, [r1, #4]
 8003620:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003624:	4313      	orrs	r3, r2
 8003626:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003628:	68a3      	ldr	r3, [r4, #8]
 800362a:	688a      	ldr	r2, [r1, #8]
 800362c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003630:	4313      	orrs	r3, r2
 8003632:	60a3      	str	r3, [r4, #8]
 8003634:	2001      	movs	r0, #1
 8003636:	e005      	b.n	8003644 <UTILS_EnablePLLAndSwitchSystem+0x70>
    status = ERROR;
 8003638:	4630      	mov	r0, r6
  if(HCLK_Frequency == 0U)
 800363a:	b11e      	cbz	r6, 8003644 <UTILS_EnablePLLAndSwitchSystem+0x70>
 800363c:	f7ff ff74 	bl	8003528 <UTILS_SetFlashLatency.part.0>
  if(status == SUCCESS)
 8003640:	2801      	cmp	r0, #1
 8003642:	d0d3      	beq.n	80035ec <UTILS_EnablePLLAndSwitchSystem+0x18>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8003644:	682b      	ldr	r3, [r5, #0]
 8003646:	429e      	cmp	r6, r3
 8003648:	d203      	bcs.n	8003652 <UTILS_EnablePLLAndSwitchSystem+0x7e>
    status = ERROR;
 800364a:	4630      	mov	r0, r6
  if(HCLK_Frequency == 0U)
 800364c:	b12e      	cbz	r6, 800365a <UTILS_EnablePLLAndSwitchSystem+0x86>
 800364e:	f7ff ff6b 	bl	8003528 <UTILS_SetFlashLatency.part.0>
    /* Set FLASH latency to lowest latency */
    status = UTILS_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8003652:	2801      	cmp	r0, #1
 8003654:	d102      	bne.n	800365c <UTILS_EnablePLLAndSwitchSystem+0x88>
  SystemCoreClock = HCLKFrequency;
 8003656:	602e      	str	r6, [r5, #0]
 8003658:	bd70      	pop	{r4, r5, r6, pc}
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
 800365a:	bd70      	pop	{r4, r5, r6, pc}
}
 800365c:	bd70      	pop	{r4, r5, r6, pc}
 800365e:	bf00      	nop
 8003660:	08005c50 	.word	0x08005c50
 8003664:	20001364 	.word	0x20001364
 8003668:	40021000 	.word	0x40021000

0800366c <LL_PLL_ConfigSystemClock_HSI>:
{
 800366c:	b538      	push	{r3, r4, r5, lr}
 800366e:	4605      	mov	r5, r0
 8003670:	460c      	mov	r4, r1
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8003672:	f7ff ff9d 	bl	80035b0 <UTILS_PLL_IsBusy>
 8003676:	2801      	cmp	r0, #1
 8003678:	d12b      	bne.n	80036d2 <LL_PLL_ConfigSystemClock_HSI+0x66>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 800367a:	4629      	mov	r1, r5
 800367c:	481a      	ldr	r0, [pc, #104]	; (80036e8 <LL_PLL_ConfigSystemClock_HSI+0x7c>)
 800367e:	f7ff ff43 	bl	8003508 <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8003682:	4a1a      	ldr	r2, [pc, #104]	; (80036ec <LL_PLL_ConfigSystemClock_HSI+0x80>)
 8003684:	6813      	ldr	r3, [r2, #0]
 8003686:	0559      	lsls	r1, r3, #21
 8003688:	d525      	bpl.n	80036d6 <LL_PLL_ConfigSystemClock_HSI+0x6a>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800368a:	68d1      	ldr	r1, [r2, #12]
 800368c:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <LL_PLL_ConfigSystemClock_HSI+0x84>)
 800368e:	400b      	ands	r3, r1
 8003690:	6829      	ldr	r1, [r5, #0]
 8003692:	f043 0302 	orr.w	r3, r3, #2
 8003696:	430b      	orrs	r3, r1
 8003698:	68a9      	ldr	r1, [r5, #8]
 800369a:	430b      	orrs	r3, r1
 800369c:	6869      	ldr	r1, [r5, #4]
 800369e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80036a2:	60d3      	str	r3, [r2, #12]
    if(pllfreq > 80000000U)
 80036a4:	4b13      	ldr	r3, [pc, #76]	; (80036f4 <LL_PLL_ConfigSystemClock_HSI+0x88>)
 80036a6:	4298      	cmp	r0, r3
 80036a8:	d80d      	bhi.n	80036c6 <LL_PLL_ConfigSystemClock_HSI+0x5a>
  uint32_t hpre = 0U;  /* Set default value */
 80036aa:	2500      	movs	r5, #0
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 80036ac:	4621      	mov	r1, r4
 80036ae:	f7ff ff91 	bl	80035d4 <UTILS_EnablePLLAndSwitchSystem>
    if((status == SUCCESS) && (hpre != 0U))
 80036b2:	2801      	cmp	r0, #1
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 80036b4:	4601      	mov	r1, r0
    if((status == SUCCESS) && (hpre != 0U))
 80036b6:	d104      	bne.n	80036c2 <LL_PLL_ConfigSystemClock_HSI+0x56>
 80036b8:	b11d      	cbz	r5, 80036c2 <LL_PLL_ConfigSystemClock_HSI+0x56>
      UTILS_ClkInitStruct->AHBCLKDivider = LL_RCC_SYSCLK_DIV_1;
 80036ba:	2000      	movs	r0, #0
 80036bc:	6020      	str	r0, [r4, #0]
      LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 80036be:	f7ff ff19 	bl	80034f4 <LL_RCC_SetAHBPrescaler>
}
 80036c2:	4608      	mov	r0, r1
 80036c4:	bd38      	pop	{r3, r4, r5, pc}
      hpre = UTILS_ClkInitStruct->AHBCLKDivider;
 80036c6:	6825      	ldr	r5, [r4, #0]
      if(hpre == LL_RCC_SYSCLK_DIV_1)
 80036c8:	2d00      	cmp	r5, #0
 80036ca:	d1ef      	bne.n	80036ac <LL_PLL_ConfigSystemClock_HSI+0x40>
        UTILS_ClkInitStruct->AHBCLKDivider = LL_RCC_SYSCLK_DIV_2;
 80036cc:	2380      	movs	r3, #128	; 0x80
 80036ce:	6023      	str	r3, [r4, #0]
 80036d0:	e7ec      	b.n	80036ac <LL_PLL_ConfigSystemClock_HSI+0x40>
    status = ERROR;
 80036d2:	2100      	movs	r1, #0
  return status;
 80036d4:	e7f5      	b.n	80036c2 <LL_PLL_ConfigSystemClock_HSI+0x56>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80036d6:	6813      	ldr	r3, [r2, #0]
 80036d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036dc:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80036de:	6813      	ldr	r3, [r2, #0]
 80036e0:	055b      	lsls	r3, r3, #21
 80036e2:	d5fc      	bpl.n	80036de <LL_PLL_ConfigSystemClock_HSI+0x72>
 80036e4:	e7d1      	b.n	800368a <LL_PLL_ConfigSystemClock_HSI+0x1e>
 80036e6:	bf00      	nop
 80036e8:	00f42400 	.word	0x00f42400
 80036ec:	40021000 	.word	0x40021000
 80036f0:	f9ff800c 	.word	0xf9ff800c
 80036f4:	04c4b400 	.word	0x04c4b400

080036f8 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 80036f8:	280a      	cmp	r0, #10
{
 80036fa:	b538      	push	{r3, r4, r5, lr}
 80036fc:	4604      	mov	r4, r0
 80036fe:	4d07      	ldr	r5, [pc, #28]	; (800371c <console_out+0x24>)
	if ('\n' == c) {
 8003700:	d104      	bne.n	800370c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 8003702:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
 8003704:	6843      	ldr	r3, [r0, #4]
 8003706:	210d      	movs	r1, #13
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
 800370c:	6828      	ldr	r0, [r5, #0]
 800370e:	6843      	ldr	r3, [r0, #4]
 8003710:	b2e1      	uxtb	r1, r4
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	4798      	blx	r3

	return c;
}
 8003716:	4620      	mov	r0, r4
 8003718:	bd38      	pop	{r3, r4, r5, pc}
 800371a:	bf00      	nop
 800371c:	20000034 	.word	0x20000034

08003720 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
 8003720:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
 8003722:	4c04      	ldr	r4, [pc, #16]	; (8003734 <uart_console_hook_install+0x14>)
 8003724:	4620      	mov	r0, r4
 8003726:	f000 fdcb 	bl	80042c0 <__stdout_hook_install>
	__printk_hook_install(console_out);
 800372a:	4620      	mov	r0, r4
}
 800372c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
 8003730:	f7ff bada 	b.w	8002ce8 <__printk_hook_install>
 8003734:	080036f9 	.word	0x080036f9

08003738 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
 8003738:	b508      	push	{r3, lr}
 800373a:	4804      	ldr	r0, [pc, #16]	; (800374c <uart_console_init+0x14>)
 800373c:	f001 fa00 	bl	8004b40 <_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8003740:	4b03      	ldr	r3, [pc, #12]	; (8003750 <uart_console_init+0x18>)
 8003742:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
 8003744:	f7ff ffec 	bl	8003720 <uart_console_hook_install>

	return 0;
}
 8003748:	2000      	movs	r0, #0
 800374a:	bd08      	pop	{r3, pc}
 800374c:	08005c60 	.word	0x08005c60
 8003750:	20000034 	.word	0x20000034

08003754 <stm32_exti_init>:
	IRQ_CONNECT(EXTI4_15_IRQn,
		CONFIG_EXTI_STM32_EXTI15_4_IRQ_PRI,
		__stm32_exti_isr_4_15, DEVICE_GET(exti_stm32),
		0);
#elif defined(CONFIG_SOC_SERIES_STM32L4X)
	IRQ_CONNECT(EXTI0_IRQn,
 8003754:	2200      	movs	r2, #0
{
 8003756:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8003758:	4611      	mov	r1, r2
 800375a:	2006      	movs	r0, #6
 800375c:	f000 fc3e 	bl	8003fdc <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8003760:	2200      	movs	r2, #0
 8003762:	4611      	mov	r1, r2
 8003764:	2007      	movs	r0, #7
 8003766:	f000 fc39 	bl	8003fdc <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI1_IRQ_PRI,
		__stm32_exti_isr_1, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI2_IRQn,
 800376a:	2200      	movs	r2, #0
 800376c:	4611      	mov	r1, r2
 800376e:	2008      	movs	r0, #8
 8003770:	f000 fc34 	bl	8003fdc <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI3_IRQn,
 8003774:	2200      	movs	r2, #0
 8003776:	4611      	mov	r1, r2
 8003778:	2009      	movs	r0, #9
 800377a:	f000 fc2f 	bl	8003fdc <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 800377e:	2200      	movs	r2, #0
 8003780:	4611      	mov	r1, r2
 8003782:	200a      	movs	r0, #10
 8003784:	f000 fc2a 	bl	8003fdc <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI9_5_IRQn,
 8003788:	2200      	movs	r2, #0
 800378a:	4611      	mov	r1, r2
 800378c:	2017      	movs	r0, #23
 800378e:	f000 fc25 	bl	8003fdc <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8003792:	2200      	movs	r2, #0
 8003794:	4611      	mov	r1, r2
 8003796:	2028      	movs	r0, #40	; 0x28
 8003798:	f000 fc20 	bl	8003fdc <_irq_priority_set>
}
 800379c:	2000      	movs	r0, #0
 800379e:	bd08      	pop	{r3, pc}

080037a0 <__stm32_exti_isr>:
{
 80037a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct stm32_exti_data *data = dev->driver_data;
 80037a4:	6895      	ldr	r5, [r2, #8]
	return base;
 80037a6:	4f11      	ldr	r7, [pc, #68]	; (80037ec <__stm32_exti_isr+0x4c>)
		return base + 1;
 80037a8:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80037f0 <__stm32_exti_isr+0x50>
{
 80037ac:	4604      	mov	r4, r0
 80037ae:	460e      	mov	r6, r1
	return (exti->pr & (1 << line)) ? 1 : 0;
 80037b0:	f04f 0901 	mov.w	r9, #1
	for (line = min; line < max; line++) {
 80037b4:	42b4      	cmp	r4, r6
 80037b6:	db01      	blt.n	80037bc <__stm32_exti_isr+0x1c>
}
 80037b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (*line > 31) {
 80037bc:	2c1f      	cmp	r4, #31
		return base + 1;
 80037be:	bfcb      	itete	gt
 80037c0:	4642      	movgt	r2, r8
	return base;
 80037c2:	463a      	movle	r2, r7
 80037c4:	f1a4 0320 	subgt.w	r3, r4, #32
	if (*line > 31) {
 80037c8:	4623      	movle	r3, r4
	return (exti->pr & (1 << line)) ? 1 : 0;
 80037ca:	6951      	ldr	r1, [r2, #20]
 80037cc:	fa09 f303 	lsl.w	r3, r9, r3
		if (stm32_exti_is_pending(line)) {
 80037d0:	4219      	tst	r1, r3
 80037d2:	d008      	beq.n	80037e6 <__stm32_exti_isr+0x46>
	exti->pr = 1 << line;
 80037d4:	6153      	str	r3, [r2, #20]
			if (!data->cb[line].cb) {
 80037d6:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 80037da:	b123      	cbz	r3, 80037e6 <__stm32_exti_isr+0x46>
			data->cb[line].cb(line, data->cb[line].data);
 80037dc:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
 80037e0:	4620      	mov	r0, r4
 80037e2:	6851      	ldr	r1, [r2, #4]
 80037e4:	4798      	blx	r3
	for (line = min; line < max; line++) {
 80037e6:	3401      	adds	r4, #1
 80037e8:	e7e4      	b.n	80037b4 <__stm32_exti_isr+0x14>
 80037ea:	bf00      	nop
 80037ec:	40010400 	.word	0x40010400
 80037f0:	40010418 	.word	0x40010418

080037f4 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 80037f4:	4602      	mov	r2, r0
 80037f6:	2101      	movs	r1, #1
 80037f8:	2000      	movs	r0, #0
 80037fa:	f7ff bfd1 	b.w	80037a0 <__stm32_exti_isr>

080037fe <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 80037fe:	4602      	mov	r2, r0
 8003800:	2102      	movs	r1, #2
 8003802:	2001      	movs	r0, #1
 8003804:	f7ff bfcc 	b.w	80037a0 <__stm32_exti_isr>

08003808 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 8003808:	4602      	mov	r2, r0
 800380a:	2103      	movs	r1, #3
 800380c:	2002      	movs	r0, #2
 800380e:	f7ff bfc7 	b.w	80037a0 <__stm32_exti_isr>

08003812 <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 8003812:	4602      	mov	r2, r0
 8003814:	2104      	movs	r1, #4
 8003816:	2003      	movs	r0, #3
 8003818:	f7ff bfc2 	b.w	80037a0 <__stm32_exti_isr>

0800381c <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 800381c:	4602      	mov	r2, r0
 800381e:	2105      	movs	r1, #5
 8003820:	2004      	movs	r0, #4
 8003822:	f7ff bfbd 	b.w	80037a0 <__stm32_exti_isr>

08003826 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 8003826:	4602      	mov	r2, r0
 8003828:	210a      	movs	r1, #10
 800382a:	2005      	movs	r0, #5
 800382c:	f7ff bfb8 	b.w	80037a0 <__stm32_exti_isr>

08003830 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 8003830:	4602      	mov	r2, r0
 8003832:	2110      	movs	r1, #16
 8003834:	200a      	movs	r0, #10
 8003836:	f7ff bfb3 	b.w	80037a0 <__stm32_exti_isr>
	...

0800383c <stm32_exti_enable>:
	if (*line > 31) {
 800383c:	281f      	cmp	r0, #31
		return base + 1;
 800383e:	bfca      	itet	gt
 8003840:	4a0c      	ldrgt	r2, [pc, #48]	; (8003874 <stm32_exti_enable+0x38>)
	return base;
 8003842:	4a0d      	ldrle	r2, [pc, #52]	; (8003878 <stm32_exti_enable+0x3c>)
		*line -= 32;
 8003844:	3820      	subgt	r0, #32
	exti->imr |= 1 << line;
 8003846:	6811      	ldr	r1, [r2, #0]
 8003848:	2301      	movs	r3, #1
 800384a:	4083      	lsls	r3, r0
 800384c:	430b      	orrs	r3, r1
 800384e:	6013      	str	r3, [r2, #0]
	if (line >= 5 && line <= 9) {
 8003850:	1f43      	subs	r3, r0, #5
 8003852:	2b04      	cmp	r3, #4
 8003854:	d908      	bls.n	8003868 <stm32_exti_enable+0x2c>
	} else if (line >= 10 && line <= 15) {
 8003856:	f1a0 030a 	sub.w	r3, r0, #10
 800385a:	2b05      	cmp	r3, #5
 800385c:	d906      	bls.n	800386c <stm32_exti_enable+0x30>
	} else if (line < 5) {
 800385e:	2804      	cmp	r0, #4
 8003860:	dc06      	bgt.n	8003870 <stm32_exti_enable+0x34>
		irqnum = EXTI0_IRQn + line;
 8003862:	3006      	adds	r0, #6
	irq_enable(irqnum);
 8003864:	f000 bbaa 	b.w	8003fbc <_arch_irq_enable>
		irqnum = EXTI9_5_IRQn;
 8003868:	2017      	movs	r0, #23
 800386a:	e7fb      	b.n	8003864 <stm32_exti_enable+0x28>
		irqnum = EXTI15_10_IRQn;
 800386c:	2028      	movs	r0, #40	; 0x28
 800386e:	e7f9      	b.n	8003864 <stm32_exti_enable+0x28>
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40010418 	.word	0x40010418
 8003878:	40010400 	.word	0x40010400

0800387c <stm32_exti_trigger>:
	if (*line > 31) {
 800387c:	281f      	cmp	r0, #31
{
 800387e:	b510      	push	{r4, lr}
		*line -= 32;
 8003880:	bfc6      	itte	gt
 8003882:	3820      	subgt	r0, #32
		return base + 1;
 8003884:	4b08      	ldrgt	r3, [pc, #32]	; (80038a8 <stm32_exti_trigger+0x2c>)
	return base;
 8003886:	4b09      	ldrle	r3, [pc, #36]	; (80038ac <stm32_exti_trigger+0x30>)
	if (trigger & STM32_EXTI_TRIG_RISING) {
 8003888:	07cc      	lsls	r4, r1, #31
 800388a:	d504      	bpl.n	8003896 <stm32_exti_trigger+0x1a>
		exti->rtsr |= 1 << line;
 800388c:	689c      	ldr	r4, [r3, #8]
 800388e:	2201      	movs	r2, #1
 8003890:	4082      	lsls	r2, r0
 8003892:	4322      	orrs	r2, r4
 8003894:	609a      	str	r2, [r3, #8]
	if (trigger & STM32_EXTI_TRIG_FALLING) {
 8003896:	078a      	lsls	r2, r1, #30
 8003898:	d505      	bpl.n	80038a6 <stm32_exti_trigger+0x2a>
		exti->ftsr |= 1 << line;
 800389a:	68d9      	ldr	r1, [r3, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	fa02 f000 	lsl.w	r0, r2, r0
 80038a2:	4308      	orrs	r0, r1
 80038a4:	60d8      	str	r0, [r3, #12]
 80038a6:	bd10      	pop	{r4, pc}
 80038a8:	40010418 	.word	0x40010418
 80038ac:	40010400 	.word	0x40010400

080038b0 <stm32_exti_set_callback>:
{
 80038b0:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <stm32_exti_set_callback+0x14>)
 80038b2:	b510      	push	{r4, lr}
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
	data->cb[line].cb = cb;
 80038ba:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 80038be:	6062      	str	r2, [r4, #4]
 80038c0:	bd10      	pop	{r4, pc}
 80038c2:	bf00      	nop
 80038c4:	200013c0 	.word	0x200013c0

080038c8 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 80038c8:	680b      	ldr	r3, [r1, #0]
{
 80038ca:	b086      	sub	sp, #24
	switch (pclken->bus) {
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d80d      	bhi.n	80038ec <stm32_clock_control_on+0x24>
 80038d0:	e8df f003 	tbb	[pc, r3]
 80038d4:	2d190f03 	.word	0x2d190f03
 80038d8:	23          	.byte	0x23
 80038d9:	00          	.byte	0x00
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80038da:	4a1a      	ldr	r2, [pc, #104]	; (8003944 <stm32_clock_control_on+0x7c>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 80038dc:	684b      	ldr	r3, [r1, #4]
 80038de:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80038e0:	4319      	orrs	r1, r3
 80038e2:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80038e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80038e6:	4013      	ands	r3, r2
 80038e8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80038ea:	9b01      	ldr	r3, [sp, #4]
		break;
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	}

	return 0;
}
 80038ec:	2000      	movs	r0, #0
 80038ee:	b006      	add	sp, #24
 80038f0:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80038f2:	4a14      	ldr	r2, [pc, #80]	; (8003944 <stm32_clock_control_on+0x7c>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 80038f4:	684b      	ldr	r3, [r1, #4]
 80038f6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80038f8:	4319      	orrs	r1, r3
 80038fa:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80038fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80038fe:	4013      	ands	r3, r2
 8003900:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8003902:	9b02      	ldr	r3, [sp, #8]
 8003904:	e7f2      	b.n	80038ec <stm32_clock_control_on+0x24>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003906:	4a0f      	ldr	r2, [pc, #60]	; (8003944 <stm32_clock_control_on+0x7c>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8003908:	684b      	ldr	r3, [r1, #4]
 800390a:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800390c:	4319      	orrs	r1, r3
 800390e:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003910:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003912:	4013      	ands	r3, r2
 8003914:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8003916:	9b03      	ldr	r3, [sp, #12]
 8003918:	e7e8      	b.n	80038ec <stm32_clock_control_on+0x24>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800391a:	4a0a      	ldr	r2, [pc, #40]	; (8003944 <stm32_clock_control_on+0x7c>)
		LL_APB1_GRP2_EnableClock(pclken->enr);
 800391c:	684b      	ldr	r3, [r1, #4]
 800391e:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8003920:	4319      	orrs	r1, r3
 8003922:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003924:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003926:	4013      	ands	r3, r2
 8003928:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 800392a:	9b04      	ldr	r3, [sp, #16]
 800392c:	e7de      	b.n	80038ec <stm32_clock_control_on+0x24>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800392e:	4a05      	ldr	r2, [pc, #20]	; (8003944 <stm32_clock_control_on+0x7c>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8003930:	684b      	ldr	r3, [r1, #4]
 8003932:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8003934:	4319      	orrs	r1, r3
 8003936:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003938:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800393a:	4013      	ands	r3, r2
 800393c:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 800393e:	9b05      	ldr	r3, [sp, #20]
 8003940:	e7d4      	b.n	80038ec <stm32_clock_control_on+0x24>
 8003942:	bf00      	nop
 8003944:	40021000 	.word	0x40021000

08003948 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8003948:	680b      	ldr	r3, [r1, #0]
 800394a:	2b04      	cmp	r3, #4
 800394c:	d80a      	bhi.n	8003964 <stm32_clock_control_off+0x1c>
 800394e:	e8df f003 	tbb	[pc, r3]
 8003952:	0b03      	.short	0x0b03
 8003954:	2012      	.short	0x2012
 8003956:	19          	.byte	0x19
 8003957:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8003958:	4a11      	ldr	r2, [pc, #68]	; (80039a0 <stm32_clock_control_off+0x58>)
 800395a:	6849      	ldr	r1, [r1, #4]
 800395c:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800395e:	ea23 0301 	bic.w	r3, r3, r1
 8003962:	6493      	str	r3, [r2, #72]	; 0x48
		break;
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	}

	return 0;
}
 8003964:	2000      	movs	r0, #0
 8003966:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8003968:	4a0d      	ldr	r2, [pc, #52]	; (80039a0 <stm32_clock_control_off+0x58>)
 800396a:	6849      	ldr	r1, [r1, #4]
 800396c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800396e:	ea23 0301 	bic.w	r3, r3, r1
 8003972:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003974:	e7f6      	b.n	8003964 <stm32_clock_control_off+0x1c>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003976:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <stm32_clock_control_off+0x58>)
 8003978:	6849      	ldr	r1, [r1, #4]
 800397a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800397c:	ea23 0301 	bic.w	r3, r3, r1
 8003980:	6593      	str	r3, [r2, #88]	; 0x58
 8003982:	e7ef      	b.n	8003964 <stm32_clock_control_off+0x1c>
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8003984:	4a06      	ldr	r2, [pc, #24]	; (80039a0 <stm32_clock_control_off+0x58>)
 8003986:	6849      	ldr	r1, [r1, #4]
 8003988:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800398a:	ea23 0301 	bic.w	r3, r3, r1
 800398e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003990:	e7e8      	b.n	8003964 <stm32_clock_control_off+0x1c>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003992:	4a03      	ldr	r2, [pc, #12]	; (80039a0 <stm32_clock_control_off+0x58>)
 8003994:	6849      	ldr	r1, [r1, #4]
 8003996:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8003998:	ea23 0301 	bic.w	r3, r3, r1
 800399c:	6613      	str	r3, [r2, #96]	; 0x60
 800399e:	e7e1      	b.n	8003964 <stm32_clock_control_off+0x1c>
 80039a0:	40021000 	.word	0x40021000

080039a4 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	u32_t ahb_clock = SystemCoreClock;
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <stm32_clock_control_get_subsys_rate+0x1c>)
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 80039a6:	6809      	ldr	r1, [r1, #0]
	u32_t ahb_clock = SystemCoreClock;
 80039a8:	681b      	ldr	r3, [r3, #0]
	switch (pclken->bus) {
 80039aa:	2904      	cmp	r1, #4
 80039ac:	d805      	bhi.n	80039ba <stm32_clock_control_get_subsys_rate+0x16>
 80039ae:	e8df f001 	tbb	[pc, r1]
 80039b2:	0303      	.short	0x0303
 80039b4:	0303      	.short	0x0303
 80039b6:	03          	.byte	0x03
 80039b7:	00          	.byte	0x00
#endif /* CONFIG_SOC_SERIES_STM32L4X || CONFIG_SOC_SERIES_STM32F0X  */
		*rate = apb1_clock;
		break;
#ifndef CONFIG_SOC_SERIES_STM32F0X
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 80039b8:	6013      	str	r3, [r2, #0]
		break;
#endif /* CONFIG_SOC_SERIES_STM32F0X */
	}

	return 0;
}
 80039ba:	2000      	movs	r0, #0
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20001364 	.word	0x20001364

080039c4 <stm32_clock_control_init>:
			 mco2_prescaler(CONFIG_CLOCK_STM32_MCO2_DIV));
#endif /* CONFIG_CLOCK_STM32_MCO2_SRC_NOCLOCK */
}

static int stm32_clock_control_init(struct device *dev)
{
 80039c4:	b510      	push	{r4, lr}
 80039c6:	b086      	sub	sp, #24
	clk_init->AHBCLKDivider = ahb_prescaler(
 80039c8:	2300      	movs	r3, #0
 80039ca:	4c22      	ldr	r4, [pc, #136]	; (8003a54 <stm32_clock_control_init+0x90>)
 80039cc:	9300      	str	r3, [sp, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(
 80039ce:	9301      	str	r3, [sp, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(
 80039d0:	9302      	str	r3, [sp, #8]

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 80039d2:	f000 f847 	bl	8003a64 <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 80039d6:	a803      	add	r0, sp, #12
 80039d8:	f000 f83e 	bl	8003a58 <config_pll_init>
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	055a      	lsls	r2, r3, #21
 80039e0:	d52f      	bpl.n	8003a42 <stm32_clock_control_init+0x7e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80039e2:	68a3      	ldr	r3, [r4, #8]
 80039e4:	f023 0303 	bic.w	r3, r3, #3
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80039ee:	68a3      	ldr	r3, [r4, #8]
 80039f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039f4:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80039f6:	68a3      	ldr	r3, [r4, #8]
 80039f8:	f003 030c 	and.w	r3, r3, #12
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d1fa      	bne.n	80039f6 <stm32_clock_control_init+0x32>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003a00:	6823      	ldr	r3, [r4, #0]
 8003a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a06:	6023      	str	r3, [r4, #0]
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
	LL_RCC_PLL_Disable();

#ifdef CONFIG_CLOCK_STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8003a08:	68e3      	ldr	r3, [r4, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0a:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8003a0e:	fa92 f2a2 	rbit	r2, r2
 8003a12:	2102      	movs	r1, #2
 8003a14:	fab2 f282 	clz	r2, r2
 8003a18:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif CONFIG_CLOCK_STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 8003a24:	4669      	mov	r1, sp
 8003a26:	a803      	add	r0, sp, #12
 8003a28:	f7ff fe20 	bl	800366c <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a32:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003a34:	6823      	ldr	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8003a36:	2000      	movs	r0, #0
 8003a38:	f023 0301 	bic.w	r3, r3, #1
 8003a3c:	6023      	str	r3, [r4, #0]
 8003a3e:	b006      	add	sp, #24
 8003a40:	bd10      	pop	{r4, pc}
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a48:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	055b      	lsls	r3, r3, #21
 8003a4e:	d5fc      	bpl.n	8003a4a <stm32_clock_control_init+0x86>
 8003a50:	e7c7      	b.n	80039e2 <stm32_clock_control_init+0x1e>
 8003a52:	bf00      	nop
 8003a54:	40021000 	.word	0x40021000

08003a58 <config_pll_init>:
 */
void config_pll_init(LL_UTILS_PLLInitTypeDef *pllinit)
{
	pllinit->PLLM = pllm(CONFIG_CLOCK_STM32_PLL_M_DIVISOR);
	pllinit->PLLN = CONFIG_CLOCK_STM32_PLL_N_MULTIPLIER;
	pllinit->PLLR = pllr(CONFIG_CLOCK_STM32_PLL_R_DIVISOR);
 8003a58:	2130      	movs	r1, #48	; 0x30
 8003a5a:	2228      	movs	r2, #40	; 0x28
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003a62:	4770      	bx	lr

08003a64 <config_enable_default_clocks>:

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8003a64:	4770      	bx	lr
	...

08003a68 <_pinmux_stm32_set>:
 *
 * @return 0 on success, error otherwise
 */
int _pinmux_stm32_set(u32_t pin, u32_t func,
				struct device *clk)
{
 8003a68:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a6a:	4604      	mov	r4, r0
	/* make sure to enable port clock first */
	if (enable_port(STM32_PORT(pin), clk)) {
 8003a6c:	0906      	lsrs	r6, r0, #4
{
 8003a6e:	460d      	mov	r5, r1
	if (!clk) {
 8003a70:	4610      	mov	r0, r2
 8003a72:	b912      	cbnz	r2, 8003a7a <_pinmux_stm32_set+0x12>
 8003a74:	480f      	ldr	r0, [pc, #60]	; (8003ab4 <_pinmux_stm32_set+0x4c>)
 8003a76:	f001 f863 	bl	8004b40 <_impl_device_get_binding>
	pclken.bus = STM32_CLOCK_BUS_GPIO;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 8003a7e:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <_pinmux_stm32_set+0x50>)
 8003a80:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8003a84:	9301      	str	r3, [sp, #4]
	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 8003a86:	3301      	adds	r3, #1
 8003a88:	d011      	beq.n	8003aae <_pinmux_stm32_set+0x46>
 8003a8a:	6843      	ldr	r3, [r0, #4]
 8003a8c:	4669      	mov	r1, sp
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4798      	blx	r3
	if (enable_port(STM32_PORT(pin), clk)) {
 8003a92:	b960      	cbnz	r0, 8003aae <_pinmux_stm32_set+0x46>
	u32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 8003a94:	1120      	asrs	r0, r4, #4
 8003a96:	0280      	lsls	r0, r0, #10
	return stm32_gpio_configure((u32_t *)port_base,
 8003a98:	f005 030f 	and.w	r3, r5, #15
 8003a9c:	462a      	mov	r2, r5
 8003a9e:	f004 010f 	and.w	r1, r4, #15
 8003aa2:	f100 4090 	add.w	r0, r0, #1207959552	; 0x48000000
 8003aa6:	f7ff faa8 	bl	8002ffa <stm32_gpio_configure>
		return -EIO;
	}

	return stm32_pin_configure(pin, func, func & STM32_AFR_MASK);
}
 8003aaa:	b002      	add	sp, #8
 8003aac:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 8003aae:	f06f 0004 	mvn.w	r0, #4
 8003ab2:	e7fa      	b.n	8003aaa <_pinmux_stm32_set+0x42>
 8003ab4:	08005c07 	.word	0x08005c07
 8003ab8:	08005c74 	.word	0x08005c74

08003abc <stm32_setup_pins>:
 * @param pinconf  board pin configuration array
 * @param pins     array size
 */
void stm32_setup_pins(const struct pin_config *pinconf,
		      size_t pins)
{
 8003abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003abe:	4604      	mov	r4, r0
 8003ac0:	4809      	ldr	r0, [pc, #36]	; (8003ae8 <stm32_setup_pins+0x2c>)
 8003ac2:	460e      	mov	r6, r1
 8003ac4:	f001 f83c 	bl	8004b40 <_impl_device_get_binding>
	struct device *clk;
	int i;

	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (i = 0; i < pins; i++) {
 8003ac8:	2500      	movs	r5, #0
 8003aca:	4607      	mov	r7, r0
 8003acc:	42b5      	cmp	r5, r6
 8003ace:	f104 0408 	add.w	r4, r4, #8
 8003ad2:	d100      	bne.n	8003ad6 <stm32_setup_pins+0x1a>
		_pinmux_stm32_set(pinconf[i].pin_num,
				  pinconf[i].mode,
				  clk);
	}
}
 8003ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_pinmux_stm32_set(pinconf[i].pin_num,
 8003ad6:	463a      	mov	r2, r7
 8003ad8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8003adc:	f814 0c08 	ldrb.w	r0, [r4, #-8]
 8003ae0:	f7ff ffc2 	bl	8003a68 <_pinmux_stm32_set>
	for (i = 0; i < pins; i++) {
 8003ae4:	3501      	adds	r5, #1
 8003ae6:	e7f1      	b.n	8003acc <stm32_setup_pins+0x10>
 8003ae8:	08005c07 	.word	0x08005c07

08003aec <elapsed>:
static u32_t announced_cycles;

static volatile u32_t ctrl_cache; /* overflow bit clears on read! */

static u32_t elapsed(void)
{
 8003aec:	b510      	push	{r4, lr}
	u32_t val, ov;

	do {
		val = SysTick->VAL & COUNTER_MAX;
 8003aee:	4a0b      	ldr	r2, [pc, #44]	; (8003b1c <elapsed+0x30>)
		ctrl_cache |= SysTick->CTRL;
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <elapsed+0x34>)
		val = SysTick->VAL & COUNTER_MAX;
 8003af2:	6890      	ldr	r0, [r2, #8]
		ctrl_cache |= SysTick->CTRL;
 8003af4:	6811      	ldr	r1, [r2, #0]
 8003af6:	681c      	ldr	r4, [r3, #0]
 8003af8:	4321      	orrs	r1, r4
 8003afa:	6019      	str	r1, [r3, #0]
	} while (SysTick->VAL > val);
 8003afc:	6891      	ldr	r1, [r2, #8]
		val = SysTick->VAL & COUNTER_MAX;
 8003afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while (SysTick->VAL > val);
 8003b02:	4288      	cmp	r0, r1
 8003b04:	d3f5      	bcc.n	8003af2 <elapsed+0x6>

	ov = (ctrl_cache & SysTick_CTRL_COUNTFLAG_Msk) ? last_load : 0;
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a06      	ldr	r2, [pc, #24]	; (8003b24 <elapsed+0x38>)
 8003b0a:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8003b0e:	bf18      	it	ne
 8003b10:	6813      	ldrne	r3, [r2, #0]
	return (last_load - val) + ov;
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	1a10      	subs	r0, r2, r0
}
 8003b16:	4418      	add	r0, r3
 8003b18:	bd10      	pop	{r4, pc}
 8003b1a:	bf00      	nop
 8003b1c:	e000e010 	.word	0xe000e010
 8003b20:	2000017c 	.word	0x2000017c
 8003b24:	20000184 	.word	0x20000184

08003b28 <_timer_int_handler>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void _timer_int_handler(void *arg)
{
 8003b28:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	u32_t dticks;

	cycle_count += last_load;
 8003b2a:	4a0d      	ldr	r2, [pc, #52]	; (8003b60 <_timer_int_handler+0x38>)
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <_timer_int_handler+0x3c>)
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	4410      	add	r0, r2
	dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8003b34:	4a0c      	ldr	r2, [pc, #48]	; (8003b68 <_timer_int_handler+0x40>)
	cycle_count += last_load;
 8003b36:	6018      	str	r0, [r3, #0]
	dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8003b38:	6811      	ldr	r1, [r2, #0]
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <_timer_int_handler+0x44>)
 8003b3c:	1a40      	subs	r0, r0, r1
 8003b3e:	fbb0 f0f3 	udiv	r0, r0, r3
	announced_cycles += dticks * CYC_PER_TICK;
 8003b42:	fb03 1300 	mla	r3, r3, r0, r1
 8003b46:	6013      	str	r3, [r2, #0]

	ctrl_cache = SysTick->CTRL; /* Reset overflow flag */
 8003b48:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <_timer_int_handler+0x48>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <_timer_int_handler+0x4c>)
 8003b4e:	601a      	str	r2, [r3, #0]
	ctrl_cache = 0;
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]

	z_clock_announce(TICKLESS ? dticks : 1);
 8003b54:	f001 fcaa 	bl	80054ac <z_clock_announce>
	_ExcExit();
}
 8003b58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
 8003b5c:	f000 b888 	b.w	8003c70 <_ExcExit>
 8003b60:	20000184 	.word	0x20000184
 8003b64:	20000180 	.word	0x20000180
 8003b68:	20000178 	.word	0x20000178
 8003b6c:	000c3500 	.word	0x000c3500
 8003b70:	e000e010 	.word	0xe000e010
 8003b74:	2000017c 	.word	0x2000017c

08003b78 <z_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b78:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <z_clock_driver_init+0x20>)
 8003b7a:	2210      	movs	r2, #16
 8003b7c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

int z_clock_driver_init(struct device *device)
{
	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK;
 8003b80:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <z_clock_driver_init+0x24>)
 8003b82:	4a07      	ldr	r2, [pc, #28]	; (8003ba0 <z_clock_driver_init+0x28>)
 8003b84:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = last_load;
 8003b86:	4b07      	ldr	r3, [pc, #28]	; (8003ba4 <z_clock_driver_init+0x2c>)
	SysTick->VAL = 0; /* resets timer to last_load */
 8003b88:	2000      	movs	r0, #0
	SysTick->LOAD = last_load;
 8003b8a:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8003b8c:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	f042 0207 	orr.w	r2, r2, #7
 8003b94:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8003b96:	4770      	bx	lr
 8003b98:	e000ed00 	.word	0xe000ed00
 8003b9c:	20000184 	.word	0x20000184
 8003ba0:	000c3500 	.word	0x000c3500
 8003ba4:	e000e010 	.word	0xe000e010

08003ba8 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	4c1e      	ldr	r4, [pc, #120]	; (8003c24 <z_clock_set_timeout+0x7c>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle && ticks == K_FOREVER) {
 8003bac:	b151      	cbz	r1, 8003bc4 <z_clock_set_timeout+0x1c>
 8003bae:	1c43      	adds	r3, r0, #1
 8003bb0:	d108      	bne.n	8003bc4 <z_clock_set_timeout+0x1c>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8003bb2:	4a1d      	ldr	r2, [pc, #116]	; (8003c28 <z_clock_set_timeout+0x80>)
 8003bb4:	6813      	ldr	r3, [r2, #0]
 8003bb6:	f023 0301 	bic.w	r3, r3, #1
 8003bba:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 8003bbc:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003bc0:	6023      	str	r3, [r4, #0]
 8003bc2:	bd70      	pop	{r4, r5, r6, pc}
	}

#if defined(CONFIG_TICKLESS_KERNEL) && !defined(CONFIG_QEMU_TICKLESS_WORKAROUND)
	u32_t delay;

	ticks = min(MAX_TICKS, max(ticks - 1, 0));
 8003bc4:	3801      	subs	r0, #1
 8003bc6:	2813      	cmp	r0, #19
 8003bc8:	dc26      	bgt.n	8003c18 <z_clock_set_timeout+0x70>
 8003bca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

	/* Desired delay in the future */
	delay = (ticks == 0) ? MIN_DELAY : ticks * CYC_PER_TICK;
 8003bce:	b328      	cbz	r0, 8003c1c <z_clock_set_timeout+0x74>
 8003bd0:	4e16      	ldr	r6, [pc, #88]	; (8003c2c <z_clock_set_timeout+0x84>)
 8003bd2:	4346      	muls	r6, r0
	__asm__ volatile(
 8003bd4:	f04f 0310 	mov.w	r3, #16
 8003bd8:	f3ef 8511 	mrs	r5, BASEPRI
 8003bdc:	f383 8811 	msr	BASEPRI, r3

	k_spinlock_key_t key = k_spin_lock(&lock);

	cycle_count += elapsed();
 8003be0:	f7ff ff84 	bl	8003aec <elapsed>
 8003be4:	4b12      	ldr	r3, [pc, #72]	; (8003c30 <z_clock_set_timeout+0x88>)

	/* Round delay up to next tick boundary */
	delay = delay + (cycle_count - announced_cycles);
	delay = ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8003be6:	4911      	ldr	r1, [pc, #68]	; (8003c2c <z_clock_set_timeout+0x84>)
	cycle_count += elapsed();
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4410      	add	r0, r2
 8003bec:	6018      	str	r0, [r3, #0]
	delay = delay + (cycle_count - announced_cycles);
 8003bee:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <z_clock_set_timeout+0x8c>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
	delay = ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8003bf2:	f5c2 2343 	rsb	r3, r2, #798720	; 0xc3000
 8003bf6:	f203 43ff 	addw	r3, r3, #1279	; 0x4ff
 8003bfa:	4433      	add	r3, r6
 8003bfc:	4403      	add	r3, r0
	last_load = delay - (cycle_count - announced_cycles);
 8003bfe:	1a10      	subs	r0, r2, r0
	delay = ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8003c00:	fbb3 f3f1 	udiv	r3, r3, r1
	last_load = delay - (cycle_count - announced_cycles);
 8003c04:	fb01 0003 	mla	r0, r1, r3, r0

	SysTick->LOAD = last_load;
 8003c08:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <z_clock_set_timeout+0x80>)
	last_load = delay - (cycle_count - announced_cycles);
 8003c0a:	6020      	str	r0, [r4, #0]
	SysTick->VAL = 0; /* resets timer to last_load */
 8003c0c:	2200      	movs	r2, #0
	SysTick->LOAD = last_load;
 8003c0e:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8003c10:	609a      	str	r2, [r3, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8003c12:	f385 8811 	msr	BASEPRI, r5
 8003c16:	bd70      	pop	{r4, r5, r6, pc}
	ticks = min(MAX_TICKS, max(ticks - 1, 0));
 8003c18:	2013      	movs	r0, #19
 8003c1a:	e7d9      	b.n	8003bd0 <z_clock_set_timeout+0x28>
	delay = (ticks == 0) ? MIN_DELAY : ticks * CYC_PER_TICK;
 8003c1c:	f44f 7600 	mov.w	r6, #512	; 0x200
 8003c20:	e7d8      	b.n	8003bd4 <z_clock_set_timeout+0x2c>
 8003c22:	bf00      	nop
 8003c24:	20000184 	.word	0x20000184
 8003c28:	e000e010 	.word	0xe000e010
 8003c2c:	000c3500 	.word	0x000c3500
 8003c30:	20000180 	.word	0x20000180
 8003c34:	20000178 	.word	0x20000178

08003c38 <z_clock_elapsed>:
	k_spin_unlock(&lock, key);
#endif
}

u32_t z_clock_elapsed(void)
{
 8003c38:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003c3a:	f04f 0310 	mov.w	r3, #16
 8003c3e:	f3ef 8411 	mrs	r4, BASEPRI
 8003c42:	f383 8811 	msr	BASEPRI, r3
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc = elapsed() + cycle_count - announced_cycles;
 8003c46:	f7ff ff51 	bl	8003aec <elapsed>
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <z_clock_elapsed+0x2c>)
 8003c4c:	4a06      	ldr	r2, [pc, #24]	; (8003c68 <z_clock_elapsed+0x30>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	4418      	add	r0, r3
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8003c56:	f384 8811 	msr	BASEPRI, r4

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 8003c5a:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <z_clock_elapsed+0x34>)
 8003c5c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c60:	bd10      	pop	{r4, pc}
 8003c62:	bf00      	nop
 8003c64:	20000180 	.word	0x20000180
 8003c68:	20000178 	.word	0x20000178
 8003c6c:	000c3500 	.word	0x000c3500

08003c70 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
 8003c70:	4804      	ldr	r0, [pc, #16]	; (8003c84 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
 8003c72:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
 8003c74:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
 8003c76:	4288      	cmp	r0, r1
    beq _EXIT_EXC
 8003c78:	d003      	beq.n	8003c82 <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
 8003c7a:	4903      	ldr	r1, [pc, #12]	; (8003c88 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
 8003c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
 8003c80:	600a      	str	r2, [r1, #0]

08003c82 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
 8003c82:	4770      	bx	lr
    ldr r0, =_kernel
 8003c84:	20000308 	.word	0x20000308
    ldr r1, =_SCS_ICSR
 8003c88:	e000ed04 	.word	0xe000ed04

08003c8c <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8c:	4804      	ldr	r0, [pc, #16]	; (8003ca0 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	2110      	movs	r1, #16
 8003c92:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8003c94:	3301      	adds	r3, #1
 8003c96:	2b5f      	cmp	r3, #95	; 0x5f
 8003c98:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8003c9c:	d1f9      	bne.n	8003c92 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8003c9e:	4770      	bx	lr
 8003ca0:	e000e100 	.word	0xe000e100

08003ca4 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
 8003ca4:	4a08      	ldr	r2, [pc, #32]	; (8003cc8 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8003ca6:	4909      	ldr	r1, [pc, #36]	; (8003ccc <__swap+0x28>)
	_current->arch.basepri = key;
 8003ca8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8003caa:	6809      	ldr	r1, [r1, #0]
 8003cac:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003cae:	4908      	ldr	r1, [pc, #32]	; (8003cd0 <__swap+0x2c>)
	_current->arch.basepri = key;
 8003cb0:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003cb2:	684b      	ldr	r3, [r1, #4]
 8003cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	604b      	str	r3, [r1, #4]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
 8003cc0:	6893      	ldr	r3, [r2, #8]
}
 8003cc2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	20000308 	.word	0x20000308
 8003ccc:	08006270 	.word	0x08006270
 8003cd0:	e000ed00 	.word	0xe000ed00

08003cd4 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003cd4:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8003cd6:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8003cda:	490d      	ldr	r1, [pc, #52]	; (8003d10 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8003cdc:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8003cde:	2028      	movs	r0, #40	; 0x28
    add r0, r2
 8003ce0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
 8003ce2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8003ce6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
 8003cea:	4f0a      	ldr	r7, [pc, #40]	; (8003d14 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8003cec:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
 8003cf0:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 8003cf2:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
 8003cf4:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8003cf6:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
 8003cf8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8003cfa:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8003cfc:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8003d00:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
 8003d04:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r3, #0
    msr PSPLIM, r3
    pop {r3}
#endif

    msr PSP, ip
 8003d08:	f38c 8809 	msr	PSP, ip
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
 8003d0c:	4770      	bx	lr
 8003d0e:	0000      	.short	0x0000
    ldr r1, =_kernel
 8003d10:	20000308 	.word	0x20000308
    ldr v4, =_SCS_ICSR
 8003d14:	e000ed04 	.word	0xe000ed04

08003d18 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
 8003d18:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8003d1c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8003d1e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8003d22:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8003d26:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
 8003d28:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
 8003d2c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
 8003d30:	2902      	cmp	r1, #2
    beq _oops
 8003d32:	d0ff      	beq.n	8003d34 <_oops>

08003d34 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
 8003d34:	b500      	push	{lr}
    blx _do_kernel_oops
 8003d36:	f000 f9e5 	bl	8004104 <_do_kernel_oops>
    pop {pc}
 8003d3a:	bd00      	pop	{pc}

08003d3c <_MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
 8003d3c:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 8003d3e:	4c19      	ldr	r4, [pc, #100]	; (8003da4 <_MpuFault.isra.2+0x68>)
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
 8003d40:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
 8003d42:	4819      	ldr	r0, [pc, #100]	; (8003da8 <_MpuFault.isra.2+0x6c>)
 8003d44:	f7ff f916 	bl	8002f74 <printk>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 8003d48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d4a:	06d9      	lsls	r1, r3, #27
 8003d4c:	d502      	bpl.n	8003d54 <_MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error\n");
 8003d4e:	4817      	ldr	r0, [pc, #92]	; (8003dac <_MpuFault.isra.2+0x70>)
 8003d50:	f7ff f910 	bl	8002f74 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
 8003d54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d56:	071a      	lsls	r2, r3, #28
 8003d58:	d502      	bpl.n	8003d60 <_MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
 8003d5a:	4815      	ldr	r0, [pc, #84]	; (8003db0 <_MpuFault.isra.2+0x74>)
 8003d5c:	f7ff f90a 	bl	8002f74 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
 8003d60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d62:	079b      	lsls	r3, r3, #30
 8003d64:	d50e      	bpl.n	8003d84 <_MpuFault.isra.2+0x48>
		PR_FAULT_INFO("  Data Access Violation\n");
 8003d66:	4813      	ldr	r0, [pc, #76]	; (8003db4 <_MpuFault.isra.2+0x78>)
 8003d68:	f7ff f904 	bl	8002f74 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
 8003d6c:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
 8003d6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d70:	0618      	lsls	r0, r3, #24
 8003d72:	d507      	bpl.n	8003d84 <_MpuFault.isra.2+0x48>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
 8003d74:	4810      	ldr	r0, [pc, #64]	; (8003db8 <_MpuFault.isra.2+0x7c>)
 8003d76:	f7ff f8fd 	bl	8002f74 <printk>
			if (fromHardFault) {
 8003d7a:	b11d      	cbz	r5, 8003d84 <_MpuFault.isra.2+0x48>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8003d7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d82:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
 8003d84:	4c07      	ldr	r4, [pc, #28]	; (8003da4 <_MpuFault.isra.2+0x68>)
 8003d86:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003d88:	07d2      	lsls	r2, r2, #31
 8003d8a:	d502      	bpl.n	8003d92 <_MpuFault.isra.2+0x56>
		PR_FAULT_INFO("  Instruction Access Violation\n");
 8003d8c:	480b      	ldr	r0, [pc, #44]	; (8003dbc <_MpuFault.isra.2+0x80>)
 8003d8e:	f7ff f8f1 	bl	8002f74 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
 8003d92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d94:	069b      	lsls	r3, r3, #26
 8003d96:	d502      	bpl.n	8003d9e <_MpuFault.isra.2+0x62>
		PR_FAULT_INFO(
 8003d98:	4809      	ldr	r0, [pc, #36]	; (8003dc0 <_MpuFault.isra.2+0x84>)
 8003d9a:	f7ff f8eb 	bl	8002f74 <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
 8003d9e:	2000      	movs	r0, #0
 8003da0:	bd38      	pop	{r3, r4, r5, pc}
 8003da2:	bf00      	nop
 8003da4:	e000ed00 	.word	0xe000ed00
 8003da8:	08005df9 	.word	0x08005df9
 8003dac:	08005e10 	.word	0x08005e10
 8003db0:	08005e22 	.word	0x08005e22
 8003db4:	08005e36 	.word	0x08005e36
 8003db8:	08005e4f 	.word	0x08005e4f
 8003dbc:	08005e66 	.word	0x08005e66
 8003dc0:	08005e86 	.word	0x08005e86

08003dc4 <_BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int _BusFault(NANO_ESF *esf, int fromHardFault)
 8003dc4:	b538      	push	{r3, r4, r5, lr}
{
	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8003dc6:	4c1b      	ldr	r4, [pc, #108]	; (8003e34 <_BusFault.isra.3+0x70>)
static int _BusFault(NANO_ESF *esf, int fromHardFault)
 8003dc8:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
 8003dca:	481b      	ldr	r0, [pc, #108]	; (8003e38 <_BusFault.isra.3+0x74>)
 8003dcc:	f7ff f8d2 	bl	8002f74 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8003dd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003dd2:	04d8      	lsls	r0, r3, #19
 8003dd4:	d504      	bpl.n	8003de0 <_BusFault.isra.3+0x1c>
		PR_FAULT_INFO("  Stacking error\n");
 8003dd6:	4819      	ldr	r0, [pc, #100]	; (8003e3c <_BusFault.isra.3+0x78>)
		PR_FAULT_INFO("  Instruction bus error\n");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
 8003dd8:	f7ff f8cc 	bl	8002f74 <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		return _NANO_ERR_RECOVERABLE;
	}

	return _NANO_ERR_HW_EXCEPTION;
}
 8003ddc:	2000      	movs	r0, #0
 8003dde:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8003de0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003de2:	0519      	lsls	r1, r3, #20
 8003de4:	d501      	bpl.n	8003dea <_BusFault.isra.3+0x26>
		PR_FAULT_INFO("  Unstacking error\n");
 8003de6:	4816      	ldr	r0, [pc, #88]	; (8003e40 <_BusFault.isra.3+0x7c>)
 8003de8:	e7f6      	b.n	8003dd8 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8003dea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003dec:	059a      	lsls	r2, r3, #22
 8003dee:	d514      	bpl.n	8003e1a <_BusFault.isra.3+0x56>
		PR_FAULT_INFO("  Precise data bus error\n");
 8003df0:	4814      	ldr	r0, [pc, #80]	; (8003e44 <_BusFault.isra.3+0x80>)
 8003df2:	f7ff f8bf 	bl	8002f74 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
 8003df6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
 8003df8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003dfa:	041b      	lsls	r3, r3, #16
 8003dfc:	d507      	bpl.n	8003e0e <_BusFault.isra.3+0x4a>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
 8003dfe:	4812      	ldr	r0, [pc, #72]	; (8003e48 <_BusFault.isra.3+0x84>)
 8003e00:	f7ff f8b8 	bl	8002f74 <printk>
			if (fromHardFault) {
 8003e04:	b11d      	cbz	r5, 8003e0e <_BusFault.isra.3+0x4a>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8003e06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e0c:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8003e0e:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <_BusFault.isra.3+0x70>)
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	0558      	lsls	r0, r3, #21
 8003e14:	d5e2      	bpl.n	8003ddc <_BusFault.isra.3+0x18>
			PR_FAULT_INFO("  Imprecise data bus error\n");
 8003e16:	480d      	ldr	r0, [pc, #52]	; (8003e4c <_BusFault.isra.3+0x88>)
 8003e18:	e7de      	b.n	8003dd8 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8003e1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e1c:	0559      	lsls	r1, r3, #21
 8003e1e:	d4fa      	bmi.n	8003e16 <_BusFault.isra.3+0x52>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
 8003e20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e22:	05da      	lsls	r2, r3, #23
 8003e24:	d501      	bpl.n	8003e2a <_BusFault.isra.3+0x66>
		PR_FAULT_INFO("  Instruction bus error\n");
 8003e26:	480a      	ldr	r0, [pc, #40]	; (8003e50 <_BusFault.isra.3+0x8c>)
 8003e28:	e7d6      	b.n	8003dd8 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8003e2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e2c:	049b      	lsls	r3, r3, #18
 8003e2e:	d5d5      	bpl.n	8003ddc <_BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
 8003e30:	4808      	ldr	r0, [pc, #32]	; (8003e54 <_BusFault.isra.3+0x90>)
 8003e32:	e7d1      	b.n	8003dd8 <_BusFault.isra.3+0x14>
 8003e34:	e000ed00 	.word	0xe000ed00
 8003e38:	08005caa 	.word	0x08005caa
 8003e3c:	08005e10 	.word	0x08005e10
 8003e40:	08005e22 	.word	0x08005e22
 8003e44:	08005cc1 	.word	0x08005cc1
 8003e48:	08005cdb 	.word	0x08005cdb
 8003e4c:	08005cf1 	.word	0x08005cf1
 8003e50:	08005d0d 	.word	0x08005d0d
 8003e54:	08005e86 	.word	0x08005e86

08003e58 <_UsageFault.isra.5>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
 8003e58:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
 8003e5a:	4c19      	ldr	r4, [pc, #100]	; (8003ec0 <_UsageFault.isra.5+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
 8003e5c:	4819      	ldr	r0, [pc, #100]	; (8003ec4 <_UsageFault.isra.5+0x6c>)
 8003e5e:	f7ff f889 	bl	8002f74 <printk>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
 8003e62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e64:	019a      	lsls	r2, r3, #6
 8003e66:	d502      	bpl.n	8003e6e <_UsageFault.isra.5+0x16>
		PR_FAULT_INFO("  Division by zero\n");
 8003e68:	4817      	ldr	r0, [pc, #92]	; (8003ec8 <_UsageFault.isra.5+0x70>)
 8003e6a:	f7ff f883 	bl	8002f74 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
 8003e6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e70:	01db      	lsls	r3, r3, #7
 8003e72:	d502      	bpl.n	8003e7a <_UsageFault.isra.5+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
 8003e74:	4815      	ldr	r0, [pc, #84]	; (8003ecc <_UsageFault.isra.5+0x74>)
 8003e76:	f7ff f87d 	bl	8002f74 <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
 8003e7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e7c:	0318      	lsls	r0, r3, #12
 8003e7e:	d502      	bpl.n	8003e86 <_UsageFault.isra.5+0x2e>
		PR_FAULT_INFO("  No coprocessor instructions\n");
 8003e80:	4813      	ldr	r0, [pc, #76]	; (8003ed0 <_UsageFault.isra.5+0x78>)
 8003e82:	f7ff f877 	bl	8002f74 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
 8003e86:	4c0e      	ldr	r4, [pc, #56]	; (8003ec0 <_UsageFault.isra.5+0x68>)
 8003e88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e8a:	0359      	lsls	r1, r3, #13
 8003e8c:	d502      	bpl.n	8003e94 <_UsageFault.isra.5+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
 8003e8e:	4811      	ldr	r0, [pc, #68]	; (8003ed4 <_UsageFault.isra.5+0x7c>)
 8003e90:	f7ff f870 	bl	8002f74 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
 8003e94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e96:	039a      	lsls	r2, r3, #14
 8003e98:	d502      	bpl.n	8003ea0 <_UsageFault.isra.5+0x48>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
 8003e9a:	480f      	ldr	r0, [pc, #60]	; (8003ed8 <_UsageFault.isra.5+0x80>)
 8003e9c:	f7ff f86a 	bl	8002f74 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
 8003ea0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ea2:	03db      	lsls	r3, r3, #15
 8003ea4:	d502      	bpl.n	8003eac <_UsageFault.isra.5+0x54>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
 8003ea6:	480d      	ldr	r0, [pc, #52]	; (8003edc <_UsageFault.isra.5+0x84>)
 8003ea8:	f7ff f864 	bl	8002f74 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8003eac:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <_UsageFault.isra.5+0x68>)
 8003eae:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003eb0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003eb4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003eb8:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 8003eba:	2000      	movs	r0, #0
 8003ebc:	bd10      	pop	{r4, pc}
 8003ebe:	bf00      	nop
 8003ec0:	e000ed00 	.word	0xe000ed00
 8003ec4:	08005eb6 	.word	0x08005eb6
 8003ec8:	08005ecf 	.word	0x08005ecf
 8003ecc:	08005ee3 	.word	0x08005ee3
 8003ed0:	08005efe 	.word	0x08005efe
 8003ed4:	08005f1d 	.word	0x08005f1d
 8003ed8:	08005f43 	.word	0x08005f43
 8003edc:	08005f5e 	.word	0x08005f5e

08003ee0 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
 8003ee0:	b538      	push	{r3, r4, r5, lr}
	u32_t reason;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8003ee2:	4c27      	ldr	r4, [pc, #156]	; (8003f80 <_Fault+0xa0>)
 8003ee4:	6863      	ldr	r3, [r4, #4]
 8003ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
 8003eea:	1eda      	subs	r2, r3, #3
{
 8003eec:	4605      	mov	r5, r0
	switch (fault) {
 8003eee:	2a09      	cmp	r2, #9
 8003ef0:	d83a      	bhi.n	8003f68 <_Fault+0x88>
 8003ef2:	e8df f002 	tbb	[pc, r2]
 8003ef6:	3305      	.short	0x3305
 8003ef8:	39393035 	.word	0x39393035
 8003efc:	37393939 	.word	0x37393939
	PR_FAULT_INFO("***** HARD FAULT *****\n");
 8003f00:	4820      	ldr	r0, [pc, #128]	; (8003f84 <_Fault+0xa4>)
 8003f02:	f7ff f837 	bl	8002f74 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
 8003f06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003f08:	079a      	lsls	r2, r3, #30
 8003f0a:	d503      	bpl.n	8003f14 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
 8003f0c:	481e      	ldr	r0, [pc, #120]	; (8003f88 <_Fault+0xa8>)
	PR_FAULT_INFO(
 8003f0e:	f7ff f831 	bl	8002f74 <printk>
 8003f12:	e002      	b.n	8003f1a <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
 8003f14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	d405      	bmi.n	8003f26 <_Fault+0x46>
	PR_FAULT_INFO(
 8003f1a:	2000      	movs	r0, #0

#if defined(CONFIG_ARM_SECURE_FIRMWARE)
_exit_fatal:
	reason = _NANO_ERR_HW_EXCEPTION;
#endif
	_NanoFatalErrorHandler(reason, esf);
 8003f1c:	4629      	mov	r1, r5
}
 8003f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_NanoFatalErrorHandler(reason, esf);
 8003f22:	f000 b8bd 	b.w	80040a0 <_NanoFatalErrorHandler>
		PR_EXC("  Fault escalation (see below)\n");
 8003f26:	4819      	ldr	r0, [pc, #100]	; (8003f8c <_Fault+0xac>)
 8003f28:	f7ff f824 	bl	8002f74 <printk>
		if (SCB_MMFSR) {
 8003f2c:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <_Fault+0xb0>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	b12b      	cbz	r3, 8003f3e <_Fault+0x5e>
			reason = _MpuFault(esf, 1);
 8003f32:	2001      	movs	r0, #1
		reason = _MpuFault(esf, 0);
 8003f34:	f7ff ff02 	bl	8003d3c <_MpuFault.isra.2>
	if (reason == _NANO_ERR_RECOVERABLE) {
 8003f38:	2806      	cmp	r0, #6
 8003f3a:	d1ef      	bne.n	8003f1c <_Fault+0x3c>
 8003f3c:	bd38      	pop	{r3, r4, r5, pc}
		} else if (SCB_BFSR) {
 8003f3e:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <_Fault+0xb4>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	b11b      	cbz	r3, 8003f4c <_Fault+0x6c>
			reason = _BusFault(esf, 1);
 8003f44:	2001      	movs	r0, #1
		reason = _BusFault(esf, 0);
 8003f46:	f7ff ff3d 	bl	8003dc4 <_BusFault.isra.3>
 8003f4a:	e7f5      	b.n	8003f38 <_Fault+0x58>
		} else if (SCB_UFSR) {
 8003f4c:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <_Fault+0xb8>)
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0e1      	beq.n	8003f1a <_Fault+0x3a>
		reason = _UsageFault(esf);
 8003f56:	f7ff ff7f 	bl	8003e58 <_UsageFault.isra.5>
 8003f5a:	e7ed      	b.n	8003f38 <_Fault+0x58>
		reason = _MpuFault(esf, 0);
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	e7e9      	b.n	8003f34 <_Fault+0x54>
		reason = _BusFault(esf, 0);
 8003f60:	2000      	movs	r0, #0
 8003f62:	e7f0      	b.n	8003f46 <_Fault+0x66>
	PR_FAULT_INFO(
 8003f64:	480d      	ldr	r0, [pc, #52]	; (8003f9c <_Fault+0xbc>)
 8003f66:	e7d2      	b.n	8003f0e <_Fault+0x2e>
	PR_FAULT_INFO("***** %s %d) *****\n",
 8003f68:	480d      	ldr	r0, [pc, #52]	; (8003fa0 <_Fault+0xc0>)
 8003f6a:	490e      	ldr	r1, [pc, #56]	; (8003fa4 <_Fault+0xc4>)
 8003f6c:	f1a3 0210 	sub.w	r2, r3, #16
 8003f70:	2b0f      	cmp	r3, #15
 8003f72:	bfd8      	it	le
 8003f74:	4601      	movle	r1, r0
 8003f76:	480c      	ldr	r0, [pc, #48]	; (8003fa8 <_Fault+0xc8>)
 8003f78:	f7fe fffc 	bl	8002f74 <printk>
 8003f7c:	e7cd      	b.n	8003f1a <_Fault+0x3a>
 8003f7e:	bf00      	nop
 8003f80:	e000ed00 	.word	0xe000ed00
 8003f84:	08005d54 	.word	0x08005d54
 8003f88:	08005d6c 	.word	0x08005d6c
 8003f8c:	08005d8e 	.word	0x08005d8e
 8003f90:	e000ed28 	.word	0xe000ed28
 8003f94:	e000ed29 	.word	0xe000ed29
 8003f98:	e000ed2a 	.word	0xe000ed2a
 8003f9c:	08005dae 	.word	0x08005dae
 8003fa0:	08005d26 	.word	0x08005d26
 8003fa4:	08005d3b 	.word	0x08005d3b
 8003fa8:	08005de5 	.word	0x08005de5

08003fac <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8003fac:	4a02      	ldr	r2, [pc, #8]	; (8003fb8 <_FaultInit+0xc>)
 8003fae:	6953      	ldr	r3, [r2, #20]
 8003fb0:	f043 0310 	orr.w	r3, r3, #16
 8003fb4:	6153      	str	r3, [r2, #20]
 8003fb6:	4770      	bx	lr
 8003fb8:	e000ed00 	.word	0xe000ed00

08003fbc <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8003fbc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	db08      	blt.n	8003fd4 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f000 001f 	and.w	r0, r0, #31
 8003fc8:	fa02 f000 	lsl.w	r0, r2, r0
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	4a02      	ldr	r2, [pc, #8]	; (8003fd8 <_arch_irq_enable+0x1c>)
 8003fd0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	e000e100 	.word	0xe000e100

08003fdc <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8003fdc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8003fde:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe0:	bfa8      	it	ge
 8003fe2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
 8003fe6:	f101 0101 	add.w	r1, r1, #1
 8003fea:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8003fee:	bfad      	iteet	ge
 8003ff0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff4:	f000 000f 	andlt.w	r0, r0, #15
 8003ff8:	4b03      	ldrlt	r3, [pc, #12]	; (8004008 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ffa:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ffc:	bfb6      	itet	lt
 8003ffe:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004000:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004004:	5419      	strblt	r1, [r3, r0]
 8004006:	4770      	bx	lr
 8004008:	e000ed14 	.word	0xe000ed14

0800400c <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
 800400c:	f000 b834 	b.w	8004078 <__bus_fault>

08004010 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
 8004010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004012:	460c      	mov	r4, r1
 8004014:	4616      	mov	r6, r2
 8004016:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
 8004018:	2204      	movs	r2, #4
 800401a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800401c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800401e:	4605      	mov	r5, r0
 8004020:	f001 f998 	bl	8005354 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 8004024:	f1a6 0120 	sub.w	r1, r6, #32
 8004028:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
 800402a:	4a0c      	ldr	r2, [pc, #48]	; (800405c <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
 800402c:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 800402e:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
 8004032:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
 8004034:	f022 0201 	bic.w	r2, r2, #1
 8004038:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
 800403a:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
 800403c:	65ee      	str	r6, [r5, #92]	; 0x5c
 800403e:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
 8004040:	9a06      	ldr	r2, [sp, #24]
 8004042:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
 8004044:	9a07      	ldr	r2, [sp, #28]
 8004046:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
 8004048:	9a08      	ldr	r2, [sp, #32]
 800404a:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
 800404c:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
 800404e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004052:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
 8004054:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
 8004056:	666b      	str	r3, [r5, #100]	; 0x64
 8004058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800405a:	bf00      	nop
 800405c:	08002b41 	.word	0x08002b41

08004060 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
 8004060:	4901      	ldr	r1, [pc, #4]	; (8004068 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
 8004062:	2210      	movs	r2, #16
	str r2, [r1]
 8004064:	600a      	str	r2, [r1, #0]
	bx lr
 8004066:	4770      	bx	lr
	ldr r1, =_SCB_SCR
 8004068:	e000ed10 	.word	0xe000ed10

0800406c <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
 800406c:	4040      	eors	r0, r0
	msr BASEPRI, r0
 800406e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
 8004072:	bf30      	wfi

	bx lr
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop

08004078 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
 8004078:	4040      	eors	r0, r0
	msr BASEPRI, r0
 800407a:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
 800407e:	f8df c01c 	ldr.w	ip, [pc, #28]	; 800409c <__bus_fault+0x24>
	ldr ip, [ip]
 8004082:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
 8004086:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
 800408a:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
 800408c:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
 8004090:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
 8004094:	b500      	push	{lr}
	bl _Fault
 8004096:	f7ff ff23 	bl	8003ee0 <_Fault>

	pop {pc}
 800409a:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
 800409c:	e000ed04 	.word	0xe000ed04

080040a0 <_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
 80040a0:	b538      	push	{r3, r4, r5, lr}
 80040a2:	4604      	mov	r4, r0
 80040a4:	460d      	mov	r5, r1
	LOG_PANIC();

	switch (reason) {
 80040a6:	2805      	cmp	r0, #5
 80040a8:	d81a      	bhi.n	80040e0 <_NanoFatalErrorHandler+0x40>
 80040aa:	e8df f000 	tbb	[pc, r0]
 80040ae:	1903      	.short	0x1903
 80040b0:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
 80040b4:	480d      	ldr	r0, [pc, #52]	; (80040ec <_NanoFatalErrorHandler+0x4c>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
 80040b6:	f7fe ff5d 	bl	8002f74 <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
 80040ba:	f001 f82b 	bl	8005114 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
 80040be:	69aa      	ldr	r2, [r5, #24]
 80040c0:	4601      	mov	r1, r0
 80040c2:	480b      	ldr	r0, [pc, #44]	; (80040f0 <_NanoFatalErrorHandler+0x50>)
 80040c4:	f7fe ff56 	bl	8002f74 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
 80040c8:	4629      	mov	r1, r5
 80040ca:	4620      	mov	r0, r4
}
 80040cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
 80040d0:	f000 b81c 	b.w	800410c <_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
 80040d4:	4807      	ldr	r0, [pc, #28]	; (80040f4 <_NanoFatalErrorHandler+0x54>)
 80040d6:	e7ee      	b.n	80040b6 <_NanoFatalErrorHandler+0x16>
		printk("***** Kernel OOPS! *****\n");
 80040d8:	4807      	ldr	r0, [pc, #28]	; (80040f8 <_NanoFatalErrorHandler+0x58>)
 80040da:	e7ec      	b.n	80040b6 <_NanoFatalErrorHandler+0x16>
		printk("***** Kernel Panic! *****\n");
 80040dc:	4807      	ldr	r0, [pc, #28]	; (80040fc <_NanoFatalErrorHandler+0x5c>)
 80040de:	e7ea      	b.n	80040b6 <_NanoFatalErrorHandler+0x16>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
 80040e0:	4601      	mov	r1, r0
 80040e2:	4807      	ldr	r0, [pc, #28]	; (8004100 <_NanoFatalErrorHandler+0x60>)
 80040e4:	f7fe ff46 	bl	8002f74 <printk>
		break;
 80040e8:	e7e7      	b.n	80040ba <_NanoFatalErrorHandler+0x1a>
 80040ea:	bf00      	nop
 80040ec:	08005f8a 	.word	0x08005f8a
 80040f0:	08006028 	.word	0x08006028
 80040f4:	08005faa 	.word	0x08005faa
 80040f8:	08005fd0 	.word	0x08005fd0
 80040fc:	08005fea 	.word	0x08005fea
 8004100:	08006005 	.word	0x08006005

08004104 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
 8004104:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
 8004106:	6800      	ldr	r0, [r0, #0]
 8004108:	f7ff bfca 	b.w	80040a0 <_NanoFatalErrorHandler>

0800410c <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
 800410c:	2805      	cmp	r0, #5
{
 800410e:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
 8004110:	d00c      	beq.n	800412c <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
 8004112:	f001 f869 	bl	80051e8 <k_is_in_isr>
 8004116:	b160      	cbz	r0, 8004132 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
 8004118:	f001 f866 	bl	80051e8 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
 800411c:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <_SysFatalErrorHandler+0x44>)
 800411e:	490d      	ldr	r1, [pc, #52]	; (8004154 <_SysFatalErrorHandler+0x48>)
 8004120:	2800      	cmp	r0, #0
 8004122:	bf08      	it	eq
 8004124:	4619      	moveq	r1, r3
 8004126:	480c      	ldr	r0, [pc, #48]	; (8004158 <_SysFatalErrorHandler+0x4c>)
 8004128:	f7fe ff24 	bl	8002f74 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
 800412c:	f7ff ff9e 	bl	800406c <k_cpu_idle>
 8004130:	e7fc      	b.n	800412c <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
 8004132:	f001 f869 	bl	8005208 <_is_thread_essential>
 8004136:	2800      	cmp	r0, #0
 8004138:	d1ee      	bne.n	8004118 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
 800413a:	4c08      	ldr	r4, [pc, #32]	; (800415c <_SysFatalErrorHandler+0x50>)
 800413c:	4808      	ldr	r0, [pc, #32]	; (8004160 <_SysFatalErrorHandler+0x54>)
 800413e:	68a1      	ldr	r1, [r4, #8]
 8004140:	f7fe ff18 	bl	8002f74 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
 8004144:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
 8004146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800414a:	f000 b80b 	b.w	8004164 <_impl_k_thread_abort>
 800414e:	bf00      	nop
 8004150:	08006068 	.word	0x08006068
 8004154:	08006064 	.word	0x08006064
 8004158:	08006079 	.word	0x08006079
 800415c:	20000308 	.word	0x20000308
 8004160:	08006099 	.word	0x08006099

08004164 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
 8004164:	b538      	push	{r3, r4, r5, lr}
 8004166:	4605      	mov	r5, r0
	__asm__ volatile(
 8004168:	f04f 0310 	mov.w	r3, #16
 800416c:	f3ef 8411 	mrs	r4, BASEPRI
 8004170:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
 8004174:	f001 f882 	bl	800527c <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
 8004178:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <_impl_k_thread_abort+0x40>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	429d      	cmp	r5, r3
 800417e:	d10b      	bne.n	8004198 <_impl_k_thread_abort+0x34>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
 8004180:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <_impl_k_thread_abort+0x44>)
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004188:	b912      	cbnz	r2, 8004190 <_impl_k_thread_abort+0x2c>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
 800418a:	4620      	mov	r0, r4
 800418c:	f7ff fd8a 	bl	8003ca4 <__swap>
			(void)_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004196:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
 8004198:	4620      	mov	r0, r4
}
 800419a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
 800419e:	f000 be51 	b.w	8004e44 <_reschedule>
 80041a2:	bf00      	nop
 80041a4:	20000308 	.word	0x20000308
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
 80041ac:	b500      	push	{lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
#endif

	mrs r0, IPSR	/* get exception number */
 80041ae:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 80041b2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 80041b6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
 80041ba:	4904      	ldr	r1, [pc, #16]	; (80041cc <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 80041bc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 80041be:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
 80041c0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
 80041c2:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
 80041c6:	4802      	ldr	r0, [pc, #8]	; (80041d0 <_isr_wrapper+0x24>)
	bx r0
 80041c8:	4700      	bx	r0
 80041ca:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 80041cc:	080055f0 	.word	0x080055f0
	ldr r0, =_IntExit
 80041d0:	08003c71 	.word	0x08003c71

080041d4 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80041d4:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80041d6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
 80041da:	4806      	ldr	r0, [pc, #24]	; (80041f4 <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
 80041dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 80041e0:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80041e2:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
 80041e6:	2002      	movs	r0, #2
    msr CONTROL, r0
 80041e8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
 80041ec:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
 80041f0:	f000 f806 	bl	8004200 <_PrepC>
    ldr r0, =_interrupt_stack
 80041f4:	20000878 	.word	0x20000878

080041f8 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
 80041f8:	bf30      	wfi
    b _SysNmiOnReset
 80041fa:	f7ff bffd 	b.w	80041f8 <_SysNmiOnReset>
 80041fe:	bf00      	nop

08004200 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
 8004200:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8004202:	4b08      	ldr	r3, [pc, #32]	; (8004224 <_PrepC+0x24>)
 8004204:	4a08      	ldr	r2, [pc, #32]	; (8004228 <_PrepC+0x28>)
 8004206:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800420a:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 800420c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004210:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
 8004214:	f000 fcba 	bl	8004b8c <_bss_zero>
	_data_copy();
 8004218:	f000 fcc2 	bl	8004ba0 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_IntLibInit();
 800421c:	f7ff fd36 	bl	8003c8c <_IntLibInit>
	_Cstart();
 8004220:	f000 fce2 	bl	8004be8 <_Cstart>
 8004224:	08000000 	.word	0x08000000
 8004228:	e000ed00 	.word	0xe000ed00

0800422c <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
 800422c:	b508      	push	{r3, lr}
	handler();
 800422e:	f7ff ffe3 	bl	80041f8 <_SysNmiOnReset>
	_ExcExit();
}
 8004232:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
 8004236:	f7ff bd1b 	b.w	8003c70 <_ExcExit>
	...

0800423c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 800423c:	4b03      	ldr	r3, [pc, #12]	; (800424c <arm_core_mpu_enable+0x10>)
 800423e:	2205      	movs	r2, #5
 8004240:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8004242:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	4770      	bx	lr
 800424c:	e000ed90 	.word	0xe000ed90

08004250 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004250:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8004254:	4b01      	ldr	r3, [pc, #4]	; (800425c <arm_core_mpu_disable+0xc>)
 8004256:	2200      	movs	r2, #0
 8004258:	605a      	str	r2, [r3, #4]
 800425a:	4770      	bx	lr
 800425c:	e000ed90 	.word	0xe000ed90

08004260 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
 8004260:	4912      	ldr	r1, [pc, #72]	; (80042ac <arm_mpu_init+0x4c>)
{
 8004262:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
 8004264:	680c      	ldr	r4, [r1, #0]
 8004266:	2c08      	cmp	r4, #8
 8004268:	d81c      	bhi.n	80042a4 <arm_mpu_init+0x44>
		return -1;
	}

	LOG_DBG("total region count: %d", _get_num_regions());

	arm_core_mpu_disable();
 800426a:	f7ff fff1 	bl	8004250 <arm_core_mpu_disable>
 *   The caller must provide a valid region index.
 */
static void _region_init(u32_t index, const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
 800426e:	4810      	ldr	r0, [pc, #64]	; (80042b0 <arm_mpu_init+0x50>)
 8004270:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	_mpu_init();

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
 8004272:	2200      	movs	r2, #0
 8004274:	42a2      	cmp	r2, r4
 8004276:	f101 010c 	add.w	r1, r1, #12
 800427a:	d103      	bne.n	8004284 <arm_mpu_init+0x24>
	if (size > 0) {
		_region_init(index, &region_conf);
	}
#endif

	arm_core_mpu_enable();
 800427c:	f7ff ffde 	bl	800423c <arm_core_mpu_enable>
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
 8004280:	2000      	movs	r0, #0
 8004282:	bd10      	pop	{r4, pc}
	/* Configure the region */
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8004284:	f851 3c0c 	ldr.w	r3, [r1, #-12]
	MPU->RNR = index;
 8004288:	6082      	str	r2, [r0, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800428a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 800428e:	f043 0310 	orr.w	r3, r3, #16
 8004292:	4313      	orrs	r3, r2
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8004294:	60c3      	str	r3, [r0, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8004296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6103      	str	r3, [r0, #16]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
 80042a0:	3201      	adds	r2, #1
 80042a2:	e7e7      	b.n	8004274 <arm_mpu_init+0x14>
		return -1;
 80042a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80042a8:	bd10      	pop	{r4, pc}
 80042aa:	bf00      	nop
 80042ac:	08005c10 	.word	0x08005c10
 80042b0:	e000ed90 	.word	0xe000ed90

080042b4 <_stdin_hook_default>:
}

static unsigned char _stdin_hook_default(void)
{
	return 0;
}
 80042b4:	2000      	movs	r0, #0
 80042b6:	4770      	bx	lr

080042b8 <_stdout_hook_default>:
 80042b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042bc:	4770      	bx	lr
	...

080042c0 <__stdout_hook_install>:
	_stdout_hook = hook;
 80042c0:	4b01      	ldr	r3, [pc, #4]	; (80042c8 <__stdout_hook_install+0x8>)
 80042c2:	6018      	str	r0, [r3, #0]
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	20001378 	.word	0x20001378

080042cc <_impl__zephyr_read>:
{
	_stdin_hook = hook;
}

int _impl__zephyr_read(char *buf, int nbytes)
{
 80042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
 80042ce:	4f08      	ldr	r7, [pc, #32]	; (80042f0 <_impl__zephyr_read+0x24>)
{
 80042d0:	4606      	mov	r6, r0
 80042d2:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
 80042d4:	2400      	movs	r4, #0
 80042d6:	42ac      	cmp	r4, r5
 80042d8:	da08      	bge.n	80042ec <_impl__zephyr_read+0x20>
		*(buf + i) = _stdin_hook();
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 80042de:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
 80042e0:	5530      	strb	r0, [r6, r4]
 80042e2:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 80042e6:	d001      	beq.n	80042ec <_impl__zephyr_read+0x20>
 80042e8:	280d      	cmp	r0, #13
 80042ea:	d1f4      	bne.n	80042d6 <_impl__zephyr_read+0xa>
			i++;
			break;
		}
	}
	return i;
}
 80042ec:	4620      	mov	r0, r4
 80042ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042f0:	20001374 	.word	0x20001374

080042f4 <_impl__zephyr_write>:
	return _impl__zephyr_read((char *)buf, nbytes);
}
#endif

int _impl__zephyr_write(const void *buffer, int nbytes)
{
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	4f0a      	ldr	r7, [pc, #40]	; (8004320 <_impl__zephyr_write+0x2c>)
 80042f8:	4606      	mov	r6, r0
 80042fa:	460d      	mov	r5, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 80042fc:	4604      	mov	r4, r0
 80042fe:	1ba3      	subs	r3, r4, r6
 8004300:	429d      	cmp	r5, r3
 8004302:	dc01      	bgt.n	8004308 <_impl__zephyr_write+0x14>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
 8004304:	4628      	mov	r0, r5
 8004306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
 8004308:	f814 3b01 	ldrb.w	r3, [r4], #1
 800430c:	2b0a      	cmp	r3, #10
 800430e:	d102      	bne.n	8004316 <_impl__zephyr_write+0x22>
			_stdout_hook('\r');
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	200d      	movs	r0, #13
 8004314:	4798      	blx	r3
		_stdout_hook(*(buf + i));
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	f814 0c01 	ldrb.w	r0, [r4, #-1]
 800431c:	4798      	blx	r3
 800431e:	e7ee      	b.n	80042fe <_impl__zephyr_write+0xa>
 8004320:	20001378 	.word	0x20001378

08004324 <_read>:
}
#endif

#ifndef CONFIG_POSIX_API
int _read(int fd, char *buf, int nbytes)
{
 8004324:	4608      	mov	r0, r1

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE2(K_SYSCALL__ZEPHYR_READ, _zephyr_read, int, char *, buf, int, nbytes)
 8004326:	4611      	mov	r1, r2
 8004328:	f7ff bfd0 	b.w	80042cc <_impl__zephyr_read>

0800432c <_write>:
	return _zephyr_read(buf, nbytes);
}
FUNC_ALIAS(_read, read, int);

int _write(int fd, const void *buf, int nbytes)
{
 800432c:	4608      	mov	r0, r1

K_SYSCALL_DECLARE2(K_SYSCALL__ZEPHYR_WRITE, _zephyr_write, int, const void *, buf, int, nbytes)
 800432e:	4611      	mov	r1, r2
 8004330:	f7ff bfe0 	b.w	80042f4 <_impl__zephyr_write>

08004334 <_close>:
FUNC_ALIAS(_open, open, int);

int _close(int file)
{
	return -1;
}
 8004334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004338:	4770      	bx	lr

0800433a <_lseek>:
FUNC_ALIAS(_close, close, int);

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800433a:	2000      	movs	r0, #0
 800433c:	4770      	bx	lr
	...

08004340 <_sbrk>:
	}
}

void *_sbrk(int count)
{
	void *ptr = heap_base + heap_sz;
 8004340:	4907      	ldr	r1, [pc, #28]	; (8004360 <_sbrk+0x20>)
 8004342:	680b      	ldr	r3, [r1, #0]
{
 8004344:	b510      	push	{r4, lr}

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 8004346:	18c4      	adds	r4, r0, r3
 8004348:	4806      	ldr	r0, [pc, #24]	; (8004364 <_sbrk+0x24>)
 800434a:	f1c0 5200 	rsb	r2, r0, #536870912	; 0x20000000
 800434e:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
 8004352:	4294      	cmp	r4, r2
	void *ptr = heap_base + heap_sz;
 8004354:	bf3a      	itte	cc
 8004356:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
 8004358:	600c      	strcc	r4, [r1, #0]
		return ptr;
	} else {
		return (void *)-1;
 800435a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}
}
 800435e:	bd10      	pop	{r4, pc}
 8004360:	20000188 	.word	0x20000188
 8004364:	2000147c 	.word	0x2000147c

08004368 <pinmux_stm32_init>:
	{STM32_PIN_PA12, STM32L4X_PINMUX_FUNC_PA12_OTG_FS_DP},
#endif	/* CONFIG_USB_DC_STM */
};

static int pinmux_stm32_init(struct device *port)
{
 8004368:	b508      	push	{r3, lr}
	ARG_UNUSED(port);

	stm32_setup_pins(pinconf, ARRAY_SIZE(pinconf));
 800436a:	2104      	movs	r1, #4
 800436c:	4802      	ldr	r0, [pc, #8]	; (8004378 <pinmux_stm32_init+0x10>)
 800436e:	f7ff fba5 	bl	8003abc <stm32_setup_pins>

	return 0;
}
 8004372:	2000      	movs	r0, #0
 8004374:	bd08      	pop	{r3, pc}
 8004376:	bf00      	nop
 8004378:	080060c0 	.word	0x080060c0

0800437c <gpio_stm32_isr>:
 * @brief EXTI interrupt callback
 */
static void gpio_stm32_isr(int line, void *arg)
{
	struct device *dev = arg;
	struct gpio_stm32_data *data = dev->driver_data;
 800437c:	688a      	ldr	r2, [r1, #8]

	if (BIT(line) & data->cb_pins) {
 800437e:	6813      	ldr	r3, [r2, #0]
 8004380:	40c3      	lsrs	r3, r0
 8004382:	07db      	lsls	r3, r3, #31
{
 8004384:	b570      	push	{r4, r5, r6, lr}
 8004386:	460e      	mov	r6, r1
	if (BIT(line) & data->cb_pins) {
 8004388:	d50d      	bpl.n	80043a6 <gpio_stm32_isr+0x2a>
		_gpio_fire_callbacks(&data->cb, dev, BIT(line));
 800438a:	2501      	movs	r5, #1
 800438c:	6854      	ldr	r4, [r2, #4]
 800438e:	4085      	lsls	r5, r0
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
 8004390:	b14c      	cbz	r4, 80043a6 <gpio_stm32_isr+0x2a>
		if (cb->pin_mask & pins) {
 8004392:	68a3      	ldr	r3, [r4, #8]
 8004394:	421d      	tst	r5, r3
 8004396:	d004      	beq.n	80043a2 <gpio_stm32_isr+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
 8004398:	6863      	ldr	r3, [r4, #4]
 800439a:	462a      	mov	r2, r5
 800439c:	4621      	mov	r1, r4
 800439e:	4630      	mov	r0, r6
 80043a0:	4798      	blx	r3

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
 80043a2:	6824      	ldr	r4, [r4, #0]
 80043a4:	e7f4      	b.n	8004390 <gpio_stm32_isr+0x14>
 80043a6:	bd70      	pop	{r4, r5, r6, pc}

080043a8 <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
	struct gpio_stm32_data *data = dev->driver_data;
 80043a8:	6883      	ldr	r3, [r0, #8]
 80043aa:	6858      	ldr	r0, [r3, #4]
	if (set) {
 80043ac:	b172      	cbz	r2, 80043cc <gpio_stm32_manage_callback+0x24>
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
 80043ae:	6008      	str	r0, [r1, #0]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node);

Z_GENLIST_PREPEND(slist, snode)
 80043b0:	689a      	ldr	r2, [r3, #8]
	list->head = node;
 80043b2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 80043b4:	b902      	cbnz	r2, 80043b8 <gpio_stm32_manage_callback+0x10>
	list->tail = node;
 80043b6:	6099      	str	r1, [r3, #8]

	_gpio_manage_callback(&data->cb, callback, set);

	return 0;
}
 80043b8:	2000      	movs	r0, #0
 80043ba:	4770      	bx	lr
	parent->next = child;
 80043bc:	6010      	str	r0, [r2, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 80043be:	6898      	ldr	r0, [r3, #8]
 80043c0:	4281      	cmp	r1, r0
	list->tail = node;
 80043c2:	bf08      	it	eq
 80043c4:	609a      	streq	r2, [r3, #8]
 80043c6:	e00d      	b.n	80043e4 <gpio_stm32_manage_callback+0x3c>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80043c8:	4602      	mov	r2, r0
 80043ca:	6800      	ldr	r0, [r0, #0]
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d0f3      	beq.n	80043b8 <gpio_stm32_manage_callback+0x10>
 80043d0:	4281      	cmp	r1, r0
 80043d2:	d1f9      	bne.n	80043c8 <gpio_stm32_manage_callback+0x20>
 80043d4:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 80043d6:	2a00      	cmp	r2, #0
 80043d8:	d1f0      	bne.n	80043bc <gpio_stm32_manage_callback+0x14>
 80043da:	689a      	ldr	r2, [r3, #8]
	list->head = node;
 80043dc:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 80043de:	4291      	cmp	r1, r2
 80043e0:	d100      	bne.n	80043e4 <gpio_stm32_manage_callback+0x3c>
	list->tail = node;
 80043e2:	6098      	str	r0, [r3, #8]
	parent->next = child;
 80043e4:	2300      	movs	r3, #0
 80043e6:	600b      	str	r3, [r1, #0]
 80043e8:	e7e6      	b.n	80043b8 <gpio_stm32_manage_callback+0x10>

080043ea <gpio_stm32_enable_callback>:

static int gpio_stm32_enable_callback(struct device *dev,
				      int access_op, u32_t pin)
{
	struct gpio_stm32_data *data = dev->driver_data;
 80043ea:	6880      	ldr	r0, [r0, #8]

	if (access_op != GPIO_ACCESS_BY_PIN) {
 80043ec:	b939      	cbnz	r1, 80043fe <gpio_stm32_enable_callback+0x14>
		return -ENOTSUP;
	}

	data->cb_pins |= BIT(pin);
 80043ee:	2301      	movs	r3, #1
 80043f0:	fa03 f202 	lsl.w	r2, r3, r2
 80043f4:	6803      	ldr	r3, [r0, #0]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	6003      	str	r3, [r0, #0]

	return 0;
}
 80043fa:	4608      	mov	r0, r1
 80043fc:	4770      	bx	lr
		return -ENOTSUP;
 80043fe:	f06f 0185 	mvn.w	r1, #133	; 0x85
 8004402:	e7fa      	b.n	80043fa <gpio_stm32_enable_callback+0x10>

08004404 <gpio_stm32_disable_callback>:

static int gpio_stm32_disable_callback(struct device *dev,
				       int access_op, u32_t pin)
{
	struct gpio_stm32_data *data = dev->driver_data;
 8004404:	6880      	ldr	r0, [r0, #8]

	if (access_op != GPIO_ACCESS_BY_PIN) {
 8004406:	b941      	cbnz	r1, 800441a <gpio_stm32_disable_callback+0x16>
		return -ENOTSUP;
	}

	data->cb_pins &= ~BIT(pin);
 8004408:	2301      	movs	r3, #1
 800440a:	fa03 f202 	lsl.w	r2, r3, r2
 800440e:	6803      	ldr	r3, [r0, #0]
 8004410:	ea23 0302 	bic.w	r3, r3, r2
 8004414:	6003      	str	r3, [r0, #0]

	return 0;
}
 8004416:	4608      	mov	r0, r1
 8004418:	4770      	bx	lr
		return -ENOTSUP;
 800441a:	f06f 0185 	mvn.w	r1, #133	; 0x85
 800441e:	e7fa      	b.n	8004416 <gpio_stm32_disable_callback+0x12>

08004420 <gpio_stm32_init>:
 *
 * @return 0
 */
static int gpio_stm32_init(struct device *device)
{
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8004420:	6803      	ldr	r3, [r0, #0]
 8004422:	4806      	ldr	r0, [pc, #24]	; (800443c <gpio_stm32_init+0x1c>)
{
 8004424:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8004426:	689c      	ldr	r4, [r3, #8]
 8004428:	f000 fb8a 	bl	8004b40 <_impl_device_get_binding>
 800442c:	6843      	ldr	r3, [r0, #4]
 800442e:	f104 0108 	add.w	r1, r4, #8
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4798      	blx	r3
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	clock_control_on(clk, (clock_control_subsys_t *) &cfg->pclken);

	return 0;
}
 8004436:	2000      	movs	r0, #0
 8004438:	bd10      	pop	{r4, pc}
 800443a:	bf00      	nop
 800443c:	08005c07 	.word	0x08005c07

08004440 <gpio_stm32_read>:
{
 8004440:	b538      	push	{r3, r4, r5, lr}
 8004442:	461d      	mov	r5, r3
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8004444:	6803      	ldr	r3, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8004446:	460c      	mov	r4, r1
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8004448:	689b      	ldr	r3, [r3, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 800444a:	b931      	cbnz	r1, 800445a <gpio_stm32_read+0x1a>
	*value = stm32_gpio_get(cfg->base, pin);
 800444c:	4611      	mov	r1, r2
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	f7fe fe27 	bl	80030a2 <stm32_gpio_get>
 8004454:	6028      	str	r0, [r5, #0]
}
 8004456:	4620      	mov	r0, r4
 8004458:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
 800445a:	f06f 0485 	mvn.w	r4, #133	; 0x85
 800445e:	e7fa      	b.n	8004456 <gpio_stm32_read+0x16>

08004460 <gpio_stm32_write>:
{
 8004460:	b410      	push	{r4}
 8004462:	4614      	mov	r4, r2
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8004464:	6802      	ldr	r2, [r0, #0]
 8004466:	6890      	ldr	r0, [r2, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8004468:	b929      	cbnz	r1, 8004476 <gpio_stm32_write+0x16>
	return stm32_gpio_set(cfg->base, pin, value);
 800446a:	4621      	mov	r1, r4
 800446c:	461a      	mov	r2, r3
 800446e:	6800      	ldr	r0, [r0, #0]
}
 8004470:	bc10      	pop	{r4}
	return stm32_gpio_set(cfg->base, pin, value);
 8004472:	f7fe be08 	b.w	8003086 <stm32_gpio_set>
}
 8004476:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800447a:	bc10      	pop	{r4}
 800447c:	4770      	bx	lr
	...

08004480 <gpio_stm32_config>:
{
 8004480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004482:	461c      	mov	r4, r3
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8004484:	6803      	ldr	r3, [r0, #0]
{
 8004486:	4607      	mov	r7, r0
 8004488:	4615      	mov	r5, r2
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 800448a:	689e      	ldr	r6, [r3, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 800448c:	bb59      	cbnz	r1, 80044e6 <gpio_stm32_config+0x66>
	map_res = stm32_gpio_flags_to_conf(flags, &pincfg);
 800448e:	a901      	add	r1, sp, #4
 8004490:	4620      	mov	r0, r4
 8004492:	f7fe fd95 	bl	8002fc0 <stm32_gpio_flags_to_conf>
	if (map_res) {
 8004496:	bb10      	cbnz	r0, 80044de <gpio_stm32_config+0x5e>
	if (stm32_gpio_configure(cfg->base, pin, pincfg, 0)) {
 8004498:	4603      	mov	r3, r0
 800449a:	9a01      	ldr	r2, [sp, #4]
 800449c:	6830      	ldr	r0, [r6, #0]
 800449e:	4629      	mov	r1, r5
 80044a0:	f7fe fdab 	bl	8002ffa <stm32_gpio_configure>
 80044a4:	bb10      	cbnz	r0, 80044ec <gpio_stm32_config+0x6c>
	if (flags & GPIO_INT) {
 80044a6:	f014 0002 	ands.w	r0, r4, #2
 80044aa:	d018      	beq.n	80044de <gpio_stm32_config+0x5e>
		stm32_exti_set_callback(pin, gpio_stm32_isr, dev);
 80044ac:	463a      	mov	r2, r7
 80044ae:	4911      	ldr	r1, [pc, #68]	; (80044f4 <gpio_stm32_config+0x74>)
 80044b0:	4628      	mov	r0, r5
 80044b2:	f7ff f9fd 	bl	80038b0 <stm32_exti_set_callback>
		stm32_gpio_enable_int(cfg->port, pin);
 80044b6:	4629      	mov	r1, r5
 80044b8:	6870      	ldr	r0, [r6, #4]
 80044ba:	f7fe fdf7 	bl	80030ac <stm32_gpio_enable_int>
		if (flags & GPIO_INT_EDGE) {
 80044be:	06a2      	lsls	r2, r4, #26
 80044c0:	d509      	bpl.n	80044d6 <gpio_stm32_config+0x56>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
 80044c2:	0663      	lsls	r3, r4, #25
 80044c4:	d40d      	bmi.n	80044e2 <gpio_stm32_config+0x62>
				edge = STM32_EXTI_TRIG_FALLING;
 80044c6:	f014 0f04 	tst.w	r4, #4
 80044ca:	bf14      	ite	ne
 80044cc:	2101      	movne	r1, #1
 80044ce:	2102      	moveq	r1, #2
			stm32_exti_trigger(pin, edge);
 80044d0:	4628      	mov	r0, r5
 80044d2:	f7ff f9d3 	bl	800387c <stm32_exti_trigger>
		stm32_exti_enable(pin);
 80044d6:	4628      	mov	r0, r5
 80044d8:	f7ff f9b0 	bl	800383c <stm32_exti_enable>
	return 0;
 80044dc:	2000      	movs	r0, #0
}
 80044de:	b003      	add	sp, #12
 80044e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				edge = STM32_EXTI_TRIG_RISING |
 80044e2:	2103      	movs	r1, #3
 80044e4:	e7f4      	b.n	80044d0 <gpio_stm32_config+0x50>
		return -ENOTSUP;
 80044e6:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80044ea:	e7f8      	b.n	80044de <gpio_stm32_config+0x5e>
		return -EIO;
 80044ec:	f06f 0004 	mvn.w	r0, #4
 80044f0:	e7f5      	b.n	80044de <gpio_stm32_config+0x5e>
 80044f2:	bf00      	nop
 80044f4:	0800437d 	.word	0x0800437d

080044f8 <rtc_stm32_disable>:
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80044f8:	4a03      	ldr	r2, [pc, #12]	; (8004508 <rtc_stm32_disable+0x10>)
 80044fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80044fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004506:	4770      	bx	lr
 8004508:	40021000 	.word	0x40021000

0800450c <rtc_stm32_get_pending_int>:
  return (READ_BIT(RTCx->ISR, RTC_ISR_ALRAF) == (RTC_ISR_ALRAF));
 800450c:	4b02      	ldr	r3, [pc, #8]	; (8004518 <rtc_stm32_get_pending_int+0xc>)
 800450e:	68d8      	ldr	r0, [r3, #12]
}

static u32_t rtc_stm32_get_pending_int(struct device *dev)
{
	return LL_RTC_IsActiveFlag_ALRA(RTC) != 0;
}
 8004510:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40002800 	.word	0x40002800

0800451c <rtc_stm32_read>:
{
 800451c:	b510      	push	{r4, lr}
 800451e:	b08a      	sub	sp, #40	; 0x28
	struct tm now = { 0 };
 8004520:	2224      	movs	r2, #36	; 0x24
 8004522:	2100      	movs	r1, #0
 8004524:	a801      	add	r0, sp, #4
 8004526:	f7fb ffcd 	bl	80004c4 <memset>
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU));
 800452a:	4b34      	ldr	r3, [pc, #208]	; (80045fc <rtc_stm32_read+0xe0>)
 800452c:	4834      	ldr	r0, [pc, #208]	; (8004600 <rtc_stm32_read+0xe4>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4010      	ands	r0, r2
  return (uint32_t)((((((temp & RTC_TR_HT) >> RTC_TR_HT_Pos) << 4U) | ((temp & RTC_TR_HU) >> RTC_TR_HU_Pos)) << RTC_OFFSET_HOUR) |  \
 8004532:	f400 117c 	and.w	r1, r0, #4128768	; 0x3f0000
                    (((((temp & RTC_TR_MNT) >> RTC_TR_MNT_Pos) << 4U) | ((temp & RTC_TR_MNU) >> RTC_TR_MNU_Pos)) << RTC_OFFSET_MINUTE) | \
 8004536:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
  return (uint32_t)((((((temp & RTC_TR_HT) >> RTC_TR_HT_Pos) << 4U) | ((temp & RTC_TR_HU) >> RTC_TR_HU_Pos)) << RTC_OFFSET_HOUR) |  \
 800453a:	4308      	orrs	r0, r1
                    ((((temp & RTC_TR_ST) >> RTC_TR_ST_Pos) << 4U) | ((temp & RTC_TR_SU) >> RTC_TR_SU_Pos)));
 800453c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  return (uint32_t)((((((temp & RTC_TR_HT) >> RTC_TR_HT_Pos) << 4U) | ((temp & RTC_TR_HU) >> RTC_TR_HU_Pos)) << RTC_OFFSET_HOUR) |  \
 8004540:	ea40 0102 	orr.w	r1, r0, r2
  temp = READ_BIT(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU));
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800454a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
                    (((((temp & RTC_DR_DT) >> RTC_DR_DT_Pos) << 4U) | ((temp & RTC_DR_DU) >> RTC_DR_DU_Pos)) << RTC_OFFSET_DAY) | \
 800454e:	0413      	lsls	r3, r2, #16
                    ((((temp & RTC_DR_YT) >> RTC_DR_YT_Pos) << 4U) | ((temp & RTC_DR_YU) >> RTC_DR_YU_Pos)));
 8004550:	0d10      	lsrs	r0, r2, #20
                    (((((temp & RTC_DR_DT) >> RTC_DR_DT_Pos) << 4U) | ((temp & RTC_DR_DU) >> RTC_DR_DU_Pos)) << RTC_OFFSET_DAY) | \
 8004552:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
  return (uint32_t)((((temp & RTC_DR_WDU) >> RTC_DR_WDU_Pos) << RTC_OFFSET_WEEKDAY) | \
 8004556:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
                    ((((temp & RTC_DR_YT) >> RTC_DR_YT_Pos) << 4U) | ((temp & RTC_DR_YU) >> RTC_DR_YU_Pos)));
 800455a:	f3c2 4003 	ubfx	r0, r2, #16, #4
  return (uint32_t)((((temp & RTC_DR_WDU) >> RTC_DR_WDU_Pos) << RTC_OFFSET_WEEKDAY) | \
 800455e:	4303      	orrs	r3, r0
 8004560:	02d0      	lsls	r0, r2, #11
 8004562:	f000 60e0 	and.w	r0, r0, #117440512	; 0x7000000
 8004566:	4303      	orrs	r3, r0
                    (((((temp & RTC_DR_MT) >> RTC_DR_MT_Pos) << 4U) | ((temp & RTC_DR_MU) >> RTC_DR_MU_Pos)) << RTC_OFFSET_MONTH) | \
 8004568:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
  return (uint32_t)((((temp & RTC_DR_WDU) >> RTC_DR_WDU_Pos) << RTC_OFFSET_WEEKDAY) | \
 800456c:	4313      	orrs	r3, r2
	now.tm_year = 100 + __LL_RTC_CONVERT_BCD2BIN(
 800456e:	b2da      	uxtb	r2, r3
 8004570:	0910      	lsrs	r0, r2, #4
 8004572:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004576:	f002 020f 	and.w	r2, r2, #15
 800457a:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	3264      	adds	r2, #100	; 0x64
 8004582:	9206      	str	r2, [sp, #24]
	now.tm_mon = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_MONTH(rtc_date));
 8004584:	f3c3 2204 	ubfx	r2, r3, #8, #5
 8004588:	0910      	lsrs	r0, r2, #4
 800458a:	0084      	lsls	r4, r0, #2
 800458c:	4420      	add	r0, r4
 800458e:	f002 020f 	and.w	r2, r2, #15
 8004592:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8004596:	9205      	str	r2, [sp, #20]
	now.tm_mday = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_DAY(rtc_date));
 8004598:	f3c3 4205 	ubfx	r2, r3, #16, #6
 800459c:	0913      	lsrs	r3, r2, #4
 800459e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80045a2:	f002 020f 	and.w	r2, r2, #15
 80045a6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
	now.tm_hour = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_HOUR(rtc_time));
 80045aa:	0c0b      	lsrs	r3, r1, #16
	now.tm_mday = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_DAY(rtc_date));
 80045ac:	9204      	str	r2, [sp, #16]
	now.tm_hour = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_HOUR(rtc_time));
 80045ae:	091a      	lsrs	r2, r3, #4
 80045b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80045b4:	f003 030f 	and.w	r3, r3, #15
 80045b8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80045bc:	9303      	str	r3, [sp, #12]
	now.tm_min = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_MINUTE(rtc_time));
 80045be:	f3c1 2306 	ubfx	r3, r1, #8, #7
 80045c2:	091a      	lsrs	r2, r3, #4
 80045c4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80045c8:	f003 030f 	and.w	r3, r3, #15
 80045cc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80045d0:	9302      	str	r3, [sp, #8]
	now.tm_sec = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_SECOND(rtc_time));
 80045d2:	b2cb      	uxtb	r3, r1
 80045d4:	091a      	lsrs	r2, r3, #4
 80045d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	ts = mktime(&now);
 80045e2:	a801      	add	r0, sp, #4
	now.tm_sec = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_SECOND(rtc_time));
 80045e4:	9301      	str	r3, [sp, #4]
	ts = mktime(&now);
 80045e6:	f7fc f8bf 	bl	8000768 <mktime>
}
 80045ea:	f1a0 5061 	sub.w	r0, r0, #943718400	; 0x38400000
 80045ee:	f5a0 1035 	sub.w	r0, r0, #2965504	; 0x2d4000
 80045f2:	f5a0 7060 	sub.w	r0, r0, #896	; 0x380
 80045f6:	b00a      	add	sp, #40	; 0x28
 80045f8:	bd10      	pop	{r4, pc}
 80045fa:	bf00      	nop
 80045fc:	40002800 	.word	0x40002800
 8004600:	003f7f7f 	.word	0x003f7f7f

08004604 <rtc_stm32_set_alarm>:
{
 8004604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004606:	b091      	sub	sp, #68	; 0x44
 8004608:	460c      	mov	r4, r1
	u32_t now = rtc_stm32_read(dev);
 800460a:	f7ff ff87 	bl	800451c <rtc_stm32_read>
	if ((alarm_val - now) > (RTC_ALARM_DAY * 28)) {
 800460e:	4b22      	ldr	r3, [pc, #136]	; (8004698 <rtc_stm32_set_alarm+0x94>)
 8004610:	1a20      	subs	r0, r4, r0
 8004612:	4298      	cmp	r0, r3
 8004614:	d83a      	bhi.n	800468c <rtc_stm32_set_alarm+0x88>
	alarm_ts += EPOCH_OFFSET;
 8004616:	4b21      	ldr	r3, [pc, #132]	; (800469c <rtc_stm32_set_alarm+0x98>)
	gmtime_r(&alarm_ts, &alarm_tm);
 8004618:	a907      	add	r1, sp, #28
	alarm_ts += EPOCH_OFFSET;
 800461a:	4423      	add	r3, r4
	gmtime_r(&alarm_ts, &alarm_tm);
 800461c:	a801      	add	r0, sp, #4
	alarm_ts += EPOCH_OFFSET;
 800461e:	9301      	str	r3, [sp, #4]
	gmtime_r(&alarm_ts, &alarm_tm);
 8004620:	f7fb fdcc 	bl	80001bc <gmtime_r>
	rtc_alarm.AlarmTime.Hours = alarm_tm.tm_hour;
 8004624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004626:	f88d 300c 	strb.w	r3, [sp, #12]
	rtc_alarm.AlarmTime.Minutes = alarm_tm.tm_min;
 800462a:	9b08      	ldr	r3, [sp, #32]
 800462c:	f88d 300d 	strb.w	r3, [sp, #13]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8004630:	4c1b      	ldr	r4, [pc, #108]	; (80046a0 <rtc_stm32_set_alarm+0x9c>)
	rtc_alarm.AlarmTime.Seconds = alarm_tm.tm_sec;
 8004632:	9b07      	ldr	r3, [sp, #28]
 8004634:	f88d 300e 	strb.w	r3, [sp, #14]
	rtc_alarm.AlarmTime.TimeFormat = LL_RTC_TIME_FORMAT_AM_OR_24;
 8004638:	2500      	movs	r5, #0
	rtc_alarm.AlarmDateWeekDay = alarm_tm.tm_mday;
 800463a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	rtc_alarm.AlarmTime.TimeFormat = LL_RTC_TIME_FORMAT_AM_OR_24;
 800463c:	9502      	str	r5, [sp, #8]
 800463e:	27ca      	movs	r7, #202	; 0xca
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8004640:	2653      	movs	r6, #83	; 0x53
	rtc_alarm.AlarmMask = LL_RTC_ALMA_MASK_NONE;
 8004642:	9504      	str	r5, [sp, #16]
	rtc_alarm.AlarmDateWeekDaySel = LL_RTC_ALMA_DATEWEEKDAYSEL_DATE;
 8004644:	9505      	str	r5, [sp, #20]
	rtc_alarm.AlarmDateWeekDay = alarm_tm.tm_mday;
 8004646:	f88d 3018 	strb.w	r3, [sp, #24]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800464a:	6267      	str	r7, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800464c:	6266      	str	r6, [r4, #36]	; 0x24
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAE);
 800464e:	68a3      	ldr	r3, [r4, #8]
 8004650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004654:	60a3      	str	r3, [r4, #8]
	if (LL_RTC_ALMA_Init(RTC, LL_RTC_FORMAT_BIN, &rtc_alarm) != SUCCESS) {
 8004656:	aa02      	add	r2, sp, #8
 8004658:	4629      	mov	r1, r5
 800465a:	4620      	mov	r0, r4
 800465c:	f7fe fd72 	bl	8003144 <LL_RTC_ALMA_Init>
 8004660:	2801      	cmp	r0, #1
 8004662:	d116      	bne.n	8004692 <rtc_stm32_set_alarm+0x8e>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8004664:	6267      	str	r7, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8004666:	6266      	str	r6, [r4, #36]	; 0x24
  SET_BIT(RTCx->CR, RTC_CR_ALRAE);
 8004668:	68a3      	ldr	r3, [r4, #8]
 800466a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466e:	60a3      	str	r3, [r4, #8]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_ALRAF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8004670:	68e3      	ldr	r3, [r4, #12]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8004678:	60e3      	str	r3, [r4, #12]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableIT_ALRA(RTC_TypeDef *RTCx)
{
  SET_BIT(RTCx->CR, RTC_CR_ALRAIE);
 800467a:	68a3      	ldr	r3, [r4, #8]
 800467c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004680:	60a3      	str	r3, [r4, #8]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8004682:	23ff      	movs	r3, #255	; 0xff
 8004684:	6263      	str	r3, [r4, #36]	; 0x24
	return 0;
 8004686:	4628      	mov	r0, r5
}
 8004688:	b011      	add	sp, #68	; 0x44
 800468a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
 800468c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004690:	e7fa      	b.n	8004688 <rtc_stm32_set_alarm+0x84>
		return -EIO;
 8004692:	f06f 0004 	mvn.w	r0, #4
 8004696:	e7f7      	b.n	8004688 <rtc_stm32_set_alarm+0x84>
 8004698:	0024ea00 	.word	0x0024ea00
 800469c:	386d4380 	.word	0x386d4380
 80046a0:	40002800 	.word	0x40002800

080046a4 <rtc_stm32_init>:

	LL_EXTI_ClearFlag_0_31(EXTI_LINE);
}

static int rtc_stm32_init(struct device *dev)
{
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	4604      	mov	r4, r0
 80046a8:	4832      	ldr	r0, [pc, #200]	; (8004774 <rtc_stm32_init+0xd0>)
 80046aa:	f000 fa49 	bl	8004b40 <_impl_device_get_binding>
 80046ae:	4606      	mov	r6, r0
	struct device *clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	const struct rtc_stm32_config *cfg = DEV_CFG(dev);

	__ASSERT_NO_MSG(clk);

	k_sem_init(DEV_SEM(dev), 1, UINT_MAX);
 80046b0:	68a0      	ldr	r0, [r4, #8]
	const struct rtc_stm32_config *cfg = DEV_CFG(dev);
 80046b2:	6823      	ldr	r3, [r4, #0]

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
 80046b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046b8:	2101      	movs	r1, #1
 80046ba:	3004      	adds	r0, #4
 80046bc:	689d      	ldr	r5, [r3, #8]
 80046be:	f000 fd2f 	bl	8005120 <_impl_k_sem_init>
	DEV_DATA(dev)->cb_fn = NULL;
 80046c2:	68a3      	ldr	r3, [r4, #8]
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	6873      	ldr	r3, [r6, #4]
 80046ca:	4629      	mov	r1, r5
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4630      	mov	r0, r6
 80046d0:	4798      	blx	r3
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046d2:	4a29      	ldr	r2, [pc, #164]	; (8004778 <rtc_stm32_init+0xd4>)
 80046d4:	6813      	ldr	r3, [r2, #0]
 80046d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046da:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80046dc:	4b27      	ldr	r3, [pc, #156]	; (800477c <rtc_stm32_init+0xd8>)
 80046de:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80046e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80046e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80046ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80046ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80046f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80046f6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 8004702:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004706:	0792      	lsls	r2, r2, #30
 8004708:	d5fb      	bpl.n	8004702 <rtc_stm32_init+0x5e>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800470a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90

#endif /* CONFIG_RTC_STM32_CLOCK_SRC */

	LL_RCC_EnableRTC();

	if (LL_RTC_DeInit(RTC) != SUCCESS) {
 800470e:	4c1c      	ldr	r4, [pc, #112]	; (8004780 <rtc_stm32_init+0xdc>)
 8004710:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004718:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800471c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004720:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004724:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004728:	4620      	mov	r0, r4
 800472a:	f7fe fe0f 	bl	800334c <LL_RTC_DeInit>
 800472e:	2801      	cmp	r0, #1
 8004730:	d106      	bne.n	8004740 <rtc_stm32_init+0x9c>
		return -EIO;
	}

	if (LL_RTC_Init(RTC, ((LL_RTC_InitTypeDef *)
 8004732:	f105 0108 	add.w	r1, r5, #8
 8004736:	4620      	mov	r0, r4
 8004738:	f7fe fd9e 	bl	8003278 <LL_RTC_Init>
 800473c:	2801      	cmp	r0, #1
 800473e:	d002      	beq.n	8004746 <rtc_stm32_init+0xa2>
			      &cfg->ll_rtc_config)) != SUCCESS) {
		return -EIO;
 8004740:	f06f 0004 	mvn.w	r0, #4
 8004744:	bd70      	pop	{r4, r5, r6, pc}
  SET_BIT(RTCx->CR, RTC_CR_BYPSHAD);
 8004746:	68a3      	ldr	r3, [r4, #8]
 8004748:	f043 0320 	orr.w	r3, r3, #32
 800474c:	60a3      	str	r3, [r4, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 800474e:	4b0d      	ldr	r3, [pc, #52]	; (8004784 <rtc_stm32_init+0xe0>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004756:	601a      	str	r2, [r3, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800475e:	609a      	str	r2, [r3, #8]
		    &rtc_data, &rtc_config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE, &rtc_api);

static void rtc_stm32_irq_config(struct device *dev)
{
	IRQ_CONNECT(DT_RTC_0_IRQ, CONFIG_RTC_0_IRQ_PRI,
 8004760:	2200      	movs	r2, #0
 8004762:	4611      	mov	r1, r2
 8004764:	2029      	movs	r0, #41	; 0x29
 8004766:	f7ff fc39 	bl	8003fdc <_irq_priority_set>
		    rtc_stm32_isr, DEVICE_GET(rtc_stm32), 0);
	irq_enable(DT_RTC_0_IRQ);
 800476a:	2029      	movs	r0, #41	; 0x29
 800476c:	f7ff fc26 	bl	8003fbc <_arch_irq_enable>
	return 0;
 8004770:	2000      	movs	r0, #0
 8004772:	bd70      	pop	{r4, r5, r6, pc}
 8004774:	08005c07 	.word	0x08005c07
 8004778:	40007000 	.word	0x40007000
 800477c:	40021000 	.word	0x40021000
 8004780:	40002800 	.word	0x40002800
 8004784:	40010400 	.word	0x40010400

08004788 <rtc_stm32_set_config>:
{
 8004788:	b570      	push	{r4, r5, r6, lr}
 800478a:	460e      	mov	r6, r1
 800478c:	b08e      	sub	sp, #56	; 0x38
 800478e:	4605      	mov	r5, r0
	struct tm init_tm = { 0 };
 8004790:	2224      	movs	r2, #36	; 0x24
 8004792:	2100      	movs	r1, #0
 8004794:	a805      	add	r0, sp, #20
 8004796:	f7fb fe95 	bl	80004c4 <memset>
	init_ts += EPOCH_OFFSET;
 800479a:	6832      	ldr	r2, [r6, #0]
 800479c:	4b28      	ldr	r3, [pc, #160]	; (8004840 <rtc_stm32_set_config+0xb8>)
 800479e:	a80e      	add	r0, sp, #56	; 0x38
 80047a0:	4413      	add	r3, r2
	LL_RTC_DateTypeDef rtc_date = { 0 };
 80047a2:	2400      	movs	r4, #0
	init_ts += EPOCH_OFFSET;
 80047a4:	f840 3d34 	str.w	r3, [r0, #-52]!
	gmtime_r(&init_ts, &init_tm);
 80047a8:	a905      	add	r1, sp, #20
	LL_RTC_DateTypeDef rtc_date = { 0 };
 80047aa:	9402      	str	r4, [sp, #8]
	LL_RTC_TimeTypeDef rtc_time = { 0 };
 80047ac:	9403      	str	r4, [sp, #12]
 80047ae:	9404      	str	r4, [sp, #16]
	gmtime_r(&init_ts, &init_tm);
 80047b0:	f7fb fd04 	bl	80001bc <gmtime_r>
	rtc_date.Year = init_tm.tm_year % 100;
 80047b4:	990a      	ldr	r1, [sp, #40]	; 0x28
	k_sem_take(DEV_SEM(dev), K_FOREVER);
 80047b6:	68a8      	ldr	r0, [r5, #8]
	rtc_time.TimeFormat = LL_RTC_TIME_FORMAT_AM_OR_24;
 80047b8:	9403      	str	r4, [sp, #12]
	rtc_date.Year = init_tm.tm_year % 100;
 80047ba:	2264      	movs	r2, #100	; 0x64
 80047bc:	fb91 f3f2 	sdiv	r3, r1, r2
 80047c0:	fb02 1313 	mls	r3, r2, r3, r1
 80047c4:	f88d 300b 	strb.w	r3, [sp, #11]
	rtc_date.Month = init_tm.tm_mon;
 80047c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ca:	f88d 3009 	strb.w	r3, [sp, #9]
	rtc_date.Day = init_tm.tm_mday;
 80047ce:	9b08      	ldr	r3, [sp, #32]
 80047d0:	f88d 300a 	strb.w	r3, [sp, #10]
	rtc_date.WeekDay = init_tm.tm_wday + 1;
 80047d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047d6:	3301      	adds	r3, #1
 80047d8:	f88d 3008 	strb.w	r3, [sp, #8]
	rtc_time.Hours = init_tm.tm_hour;
 80047dc:	9b07      	ldr	r3, [sp, #28]
 80047de:	f88d 3010 	strb.w	r3, [sp, #16]
	rtc_time.Minutes = init_tm.tm_min;
 80047e2:	9b06      	ldr	r3, [sp, #24]
 80047e4:	f88d 3011 	strb.w	r3, [sp, #17]

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
 80047e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	rtc_time.Seconds = init_tm.tm_sec;
 80047ec:	9b05      	ldr	r3, [sp, #20]
 80047ee:	f88d 3012 	strb.w	r3, [sp, #18]
 80047f2:	3004      	adds	r0, #4
 80047f4:	f000 fcbb 	bl	800516e <_impl_k_sem_take>
	if (cfg->cb_fn != NULL) {
 80047f8:	68f3      	ldr	r3, [r6, #12]
 80047fa:	b10b      	cbz	r3, 8004800 <rtc_stm32_set_config+0x78>
		DEV_DATA(dev)->cb_fn = cfg->cb_fn;
 80047fc:	68aa      	ldr	r2, [r5, #8]
 80047fe:	6013      	str	r3, [r2, #0]
	if (LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &rtc_date) != SUCCESS) {
 8004800:	aa02      	add	r2, sp, #8
 8004802:	2100      	movs	r1, #0
 8004804:	480f      	ldr	r0, [pc, #60]	; (8004844 <rtc_stm32_set_config+0xbc>)
 8004806:	f7fe fe1d 	bl	8003444 <LL_RTC_DATE_Init>
 800480a:	2801      	cmp	r0, #1
 800480c:	d008      	beq.n	8004820 <rtc_stm32_set_config+0x98>
		result = -EIO;
 800480e:	f06f 0404 	mvn.w	r4, #4
	k_sem_give(DEV_SEM(dev));
 8004812:	68a8      	ldr	r0, [r5, #8]

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
 8004814:	3004      	adds	r0, #4
 8004816:	f000 fc88 	bl	800512a <_impl_k_sem_give>
}
 800481a:	4620      	mov	r0, r4
 800481c:	b00e      	add	sp, #56	; 0x38
 800481e:	bd70      	pop	{r4, r5, r6, pc}
	if (LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &rtc_time) != SUCCESS) {
 8004820:	aa03      	add	r2, sp, #12
 8004822:	2100      	movs	r1, #0
 8004824:	4807      	ldr	r0, [pc, #28]	; (8004844 <rtc_stm32_set_config+0xbc>)
 8004826:	f7fe fdb9 	bl	800339c <LL_RTC_TIME_Init>
 800482a:	2801      	cmp	r0, #1
 800482c:	d1ef      	bne.n	800480e <rtc_stm32_set_config+0x86>
	if (cfg->alarm_enable) {
 800482e:	7934      	ldrb	r4, [r6, #4]
 8004830:	2c00      	cmp	r4, #0
 8004832:	d0ee      	beq.n	8004812 <rtc_stm32_set_config+0x8a>
		rtc_stm32_set_alarm(dev, cfg->alarm_val);
 8004834:	68b1      	ldr	r1, [r6, #8]
 8004836:	4628      	mov	r0, r5
 8004838:	f7ff fee4 	bl	8004604 <rtc_stm32_set_alarm>
	int result = 0;
 800483c:	2400      	movs	r4, #0
 800483e:	e7e8      	b.n	8004812 <rtc_stm32_set_config+0x8a>
 8004840:	386d4380 	.word	0x386d4380
 8004844:	40002800 	.word	0x40002800

08004848 <rtc_stm32_enable>:
 8004848:	4a03      	ldr	r2, [pc, #12]	; (8004858 <rtc_stm32_enable+0x10>)
 800484a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800484e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004856:	4770      	bx	lr
 8004858:	40021000 	.word	0x40021000

0800485c <rtc_stm32_isr>:
{
 800485c:	b510      	push	{r4, lr}
  return (READ_BIT(RTCx->ISR, RTC_ISR_ALRAF) == (RTC_ISR_ALRAF));
 800485e:	4c0b      	ldr	r4, [pc, #44]	; (800488c <rtc_stm32_isr+0x30>)
 8004860:	68e2      	ldr	r2, [r4, #12]
	if (LL_RTC_IsActiveFlag_ALRA(RTC) != 0) {
 8004862:	05d2      	lsls	r2, r2, #23
 8004864:	d50c      	bpl.n	8004880 <rtc_stm32_isr+0x24>
		if (DEV_DATA(dev)->cb_fn != NULL) {
 8004866:	6883      	ldr	r3, [r0, #8]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	b103      	cbz	r3, 800486e <rtc_stm32_isr+0x12>
			DEV_DATA(dev)->cb_fn(dev);
 800486c:	4798      	blx	r3
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_ALRAF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 800486e:	68e3      	ldr	r3, [r4, #12]
 8004870:	b2db      	uxtb	r3, r3
 8004872:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8004876:	60e3      	str	r3, [r4, #12]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableIT_ALRA(RTC_TypeDef *RTCx)
{
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAIE);
 8004878:	68a3      	ldr	r3, [r4, #8]
 800487a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800487e:	60a3      	str	r3, [r4, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004880:	4b03      	ldr	r3, [pc, #12]	; (8004890 <rtc_stm32_isr+0x34>)
 8004882:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004886:	615a      	str	r2, [r3, #20]
 8004888:	bd10      	pop	{r4, pc}
 800488a:	bf00      	nop
 800488c:	40002800 	.word	0x40002800
 8004890:	40010400 	.word	0x40010400

08004894 <uart_stm32_irq_tx_enable>:
	return num_rx;
}

static void uart_stm32_irq_tx_enable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004894:	6803      	ldr	r3, [r0, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	681a      	ldr	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800489a:	6813      	ldr	r3, [r2, #0]
 800489c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	4770      	bx	lr

080048a4 <uart_stm32_irq_tx_disable>:
	LL_USART_EnableIT_TC(UartInstance);
}

static void uart_stm32_irq_tx_disable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80048a4:	6803      	ldr	r3, [r0, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	681a      	ldr	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80048aa:	6813      	ldr	r3, [r2, #0]
 80048ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	4770      	bx	lr

080048b4 <uart_stm32_irq_rx_enable>:
	return LL_USART_IsActiveFlag_TXE(UartInstance);
}

static void uart_stm32_irq_rx_enable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80048b4:	6803      	ldr	r3, [r0, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80048ba:	6813      	ldr	r3, [r2, #0]
 80048bc:	f043 0320 	orr.w	r3, r3, #32
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	4770      	bx	lr

080048c4 <uart_stm32_irq_rx_disable>:
	LL_USART_EnableIT_RXNE(UartInstance);
}

static void uart_stm32_irq_rx_disable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80048c4:	6803      	ldr	r3, [r0, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80048ca:	6813      	ldr	r3, [r2, #0]
 80048cc:	f023 0320 	bic.w	r3, r3, #32
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	4770      	bx	lr

080048d4 <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(UartInstance);
}

static void uart_stm32_irq_err_enable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80048d4:	6803      	ldr	r3, [r0, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	681b      	ldr	r3, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	f042 0201 	orr.w	r2, r2, #1
 80048e0:	609a      	str	r2, [r3, #8]

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 80048e2:	4a0e      	ldr	r2, [pc, #56]	; (800491c <uart_stm32_irq_err_enable+0x48>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d00f      	beq.n	8004908 <uart_stm32_irq_err_enable+0x34>
 80048e8:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00b      	beq.n	8004908 <uart_stm32_irq_err_enable+0x34>
 80048f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d007      	beq.n	8004908 <uart_stm32_irq_err_enable+0x34>
 80048f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <uart_stm32_irq_err_enable+0x34>
 8004900:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004904:	4293      	cmp	r3, r2
 8004906:	d103      	bne.n	8004910 <uart_stm32_irq_err_enable+0x3c>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800490e:	605a      	str	r2, [r3, #4]
  SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40013800 	.word	0x40013800

08004920 <uart_stm32_irq_err_disable>:
	LL_USART_EnableIT_PE(UartInstance);
}

static void uart_stm32_irq_err_disable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004920:	6803      	ldr	r3, [r0, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	f022 0201 	bic.w	r2, r2, #1
 800492c:	609a      	str	r2, [r3, #8]

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 800492e:	4a0e      	ldr	r2, [pc, #56]	; (8004968 <uart_stm32_irq_err_disable+0x48>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00f      	beq.n	8004954 <uart_stm32_irq_err_disable+0x34>
 8004934:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8004938:	4293      	cmp	r3, r2
 800493a:	d00b      	beq.n	8004954 <uart_stm32_irq_err_disable+0x34>
 800493c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004940:	4293      	cmp	r3, r2
 8004942:	d007      	beq.n	8004954 <uart_stm32_irq_err_disable+0x34>
 8004944:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <uart_stm32_irq_err_disable+0x34>
 800494c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004950:	4293      	cmp	r3, r2
 8004952:	d103      	bne.n	800495c <uart_stm32_irq_err_disable+0x3c>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800495a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40013800 	.word	0x40013800

0800496c <uart_stm32_irq_is_pending>:
	LL_USART_DisableIT_PE(UartInstance);
}

static int uart_stm32_irq_is_pending(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800496c:	6803      	ldr	r3, [r0, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	0691      	lsls	r1, r2, #26
 8004976:	d404      	bmi.n	8004982 <uart_stm32_irq_is_pending+0x16>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8004978:	69d8      	ldr	r0, [r3, #28]
 800497a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800497e:	d105      	bne.n	800498c <uart_stm32_irq_is_pending+0x20>
 8004980:	4770      	bx	lr
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	0692      	lsls	r2, r2, #26
 8004986:	d5f7      	bpl.n	8004978 <uart_stm32_irq_is_pending+0xc>

	return ((LL_USART_IsActiveFlag_RXNE(UartInstance) &&
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 8004988:	2001      	movs	r0, #1
 800498a:	4770      	bx	lr
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
		(LL_USART_IsActiveFlag_TXE(UartInstance) &&
		 LL_USART_IsEnabledIT_TXE(UartInstance)));
}
 8004992:	4770      	bx	lr

08004994 <uart_stm32_irq_update>:

static int uart_stm32_irq_update(struct device *dev)
{
	return 1;
}
 8004994:	2001      	movs	r0, #1
 8004996:	4770      	bx	lr

08004998 <uart_stm32_irq_callback_set>:

static void uart_stm32_irq_callback_set(struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *cb_data)
{
	struct uart_stm32_data *data = DEV_DATA(dev);
 8004998:	6883      	ldr	r3, [r0, #8]

	data->user_cb = cb;
 800499a:	6059      	str	r1, [r3, #4]
	data->user_data = cb_data;
 800499c:	609a      	str	r2, [r3, #8]
 800499e:	4770      	bx	lr

080049a0 <uart_stm32_isr>:
}

static void uart_stm32_isr(void *arg)
{
	struct device *dev = arg;
	struct uart_stm32_data *data = DEV_DATA(dev);
 80049a0:	6882      	ldr	r2, [r0, #8]

	if (data->user_cb) {
 80049a2:	6853      	ldr	r3, [r2, #4]
 80049a4:	b10b      	cbz	r3, 80049aa <uart_stm32_isr+0xa>
		data->user_cb(data->user_data);
 80049a6:	6890      	ldr	r0, [r2, #8]
 80049a8:	4718      	bx	r3
 80049aa:	4770      	bx	lr

080049ac <uart_stm32_irq_config_func_USART_1>:
									\
STM32_UART_IRQ_HANDLER(name)


#ifdef CONFIG_UART_STM32_PORT_1
STM32_UART_INIT(USART_1)
 80049ac:	b508      	push	{r3, lr}
 80049ae:	2200      	movs	r2, #0
 80049b0:	2025      	movs	r0, #37	; 0x25
 80049b2:	4611      	mov	r1, r2
 80049b4:	f7ff fb12 	bl	8003fdc <_irq_priority_set>
 80049b8:	2025      	movs	r0, #37	; 0x25
 80049ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80049be:	f7ff bafd 	b.w	8003fbc <_arch_irq_enable>

080049c2 <uart_stm32_irq_config_func_USART_2>:
#endif	/* CONFIG_UART_STM32_PORT_1 */

#ifdef CONFIG_UART_STM32_PORT_2
STM32_UART_INIT(USART_2)
 80049c2:	b508      	push	{r3, lr}
 80049c4:	2200      	movs	r2, #0
 80049c6:	2026      	movs	r0, #38	; 0x26
 80049c8:	4611      	mov	r1, r2
 80049ca:	f7ff fb07 	bl	8003fdc <_irq_priority_set>
 80049ce:	2026      	movs	r0, #38	; 0x26
 80049d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80049d4:	f7ff baf2 	b.w	8003fbc <_arch_irq_enable>

080049d8 <uart_stm32_init>:
{
 80049d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 80049dc:	6803      	ldr	r3, [r0, #0]
	struct uart_stm32_data *data = DEV_DATA(dev);
 80049de:	f8d0 8008 	ldr.w	r8, [r0, #8]
	const struct uart_stm32_config *config = DEV_CFG(dev);
 80049e2:	689e      	ldr	r6, [r3, #8]
{
 80049e4:	4605      	mov	r5, r0
 80049e6:	4820      	ldr	r0, [pc, #128]	; (8004a68 <uart_stm32_init+0x90>)
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80049e8:	6834      	ldr	r4, [r6, #0]
	u32_t baud_rate = config->baud_rate;
 80049ea:	6977      	ldr	r7, [r6, #20]
 80049ec:	f000 f8a8 	bl	8004b40 <_impl_device_get_binding>
 80049f0:	6843      	ldr	r3, [r0, #4]
	data->clock = clk;
 80049f2:	f8c8 0000 	str.w	r0, [r8]
			(clock_control_subsys_t *)&config->pclken);
 80049f6:	f106 090c 	add.w	r9, r6, #12
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4649      	mov	r1, r9
 80049fe:	4798      	blx	r3
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8004a00:	6823      	ldr	r3, [r4, #0]
	clock_control_get_rate(data->clock,
 8004a02:	f8d8 0000 	ldr.w	r0, [r8]
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	f043 030c 	orr.w	r3, r3, #12
 8004a12:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8004a14:	6822      	ldr	r2, [r4, #0]
	const struct clock_control_driver_api *api = dev->driver_api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->config->name);

	return api->get_rate(dev, sys, rate);
 8004a16:	6843      	ldr	r3, [r0, #4]
 8004a18:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004a1c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8004a20:	6022      	str	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004a22:	6862      	ldr	r2, [r4, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004a2a:	6062      	str	r2, [r4, #4]
 8004a2c:	4649      	mov	r1, r9
 8004a2e:	aa01      	add	r2, sp, #4
 8004a30:	4798      	blx	r3
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004a32:	682b      	ldr	r3, [r5, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	681a      	ldr	r2, [r3, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 8004a38:	9b01      	ldr	r3, [sp, #4]
 8004a3a:	eb03 0357 	add.w	r3, r3, r7, lsr #1
 8004a3e:	fbb3 f3f7 	udiv	r3, r3, r7
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	60d3      	str	r3, [r2, #12]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	f043 0301 	orr.w	r3, r3, #1
 8004a4c:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8004a4e:	69e3      	ldr	r3, [r4, #28]
 8004a50:	029a      	lsls	r2, r3, #10
 8004a52:	d5fc      	bpl.n	8004a4e <uart_stm32_init+0x76>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8004a54:	69e3      	ldr	r3, [r4, #28]
 8004a56:	025b      	lsls	r3, r3, #9
 8004a58:	d5fc      	bpl.n	8004a54 <uart_stm32_init+0x7c>
	config->uconf.irq_config_func(dev);
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	68b3      	ldr	r3, [r6, #8]
 8004a5e:	4798      	blx	r3
}
 8004a60:	2000      	movs	r0, #0
 8004a62:	b003      	add	sp, #12
 8004a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a68:	08005c07 	.word	0x08005c07

08004a6c <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004a6c:	6803      	ldr	r3, [r0, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8004a72:	69da      	ldr	r2, [r3, #28]
 8004a74:	0612      	lsls	r2, r2, #24
 8004a76:	d5fc      	bpl.n	8004a72 <uart_stm32_poll_out+0x6>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004a78:	2240      	movs	r2, #64	; 0x40
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8004a7a:	b289      	uxth	r1, r1
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004a7c:	621a      	str	r2, [r3, #32]
  USARTx->TDR = Value;
 8004a7e:	8519      	strh	r1, [r3, #40]	; 0x28
 8004a80:	4770      	bx	lr

08004a82 <uart_stm32_fifo_fill>:
{
 8004a82:	b530      	push	{r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004a84:	6803      	ldr	r3, [r0, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	681c      	ldr	r4, [r3, #0]
	while ((size - num_tx > 0) &&
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	b2d8      	uxtb	r0, r3
 8004a8e:	1a15      	subs	r5, r2, r0
 8004a90:	2d00      	cmp	r5, #0
 8004a92:	dd07      	ble.n	8004aa4 <uart_stm32_fifo_fill+0x22>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8004a94:	69e5      	ldr	r5, [r4, #28]
 8004a96:	062d      	lsls	r5, r5, #24
 8004a98:	f103 0301 	add.w	r3, r3, #1
 8004a9c:	d502      	bpl.n	8004aa4 <uart_stm32_fifo_fill+0x22>
  USARTx->TDR = Value;
 8004a9e:	5c08      	ldrb	r0, [r1, r0]
 8004aa0:	8520      	strh	r0, [r4, #40]	; 0x28
 8004aa2:	e7f3      	b.n	8004a8c <uart_stm32_fifo_fill+0xa>
}
 8004aa4:	bd30      	pop	{r4, r5, pc}

08004aa6 <uart_stm32_fifo_read>:
{
 8004aa6:	b570      	push	{r4, r5, r6, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004aa8:	6803      	ldr	r3, [r0, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	681b      	ldr	r3, [r3, #0]
	while ((size - num_rx > 0) &&
 8004aae:	2400      	movs	r4, #0
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8004ab0:	2508      	movs	r5, #8
 8004ab2:	b2e0      	uxtb	r0, r4
 8004ab4:	1a16      	subs	r6, r2, r0
 8004ab6:	2e00      	cmp	r6, #0
 8004ab8:	dd0a      	ble.n	8004ad0 <uart_stm32_fifo_read+0x2a>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8004aba:	69de      	ldr	r6, [r3, #28]
 8004abc:	06b6      	lsls	r6, r6, #26
 8004abe:	d507      	bpl.n	8004ad0 <uart_stm32_fifo_read+0x2a>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8004ac0:	8c9e      	ldrh	r6, [r3, #36]	; 0x24
 8004ac2:	540e      	strb	r6, [r1, r0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004ac4:	69d8      	ldr	r0, [r3, #28]
 8004ac6:	0700      	lsls	r0, r0, #28
 8004ac8:	d500      	bpl.n	8004acc <uart_stm32_fifo_read+0x26>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8004aca:	621d      	str	r5, [r3, #32]
 8004acc:	3401      	adds	r4, #1
 8004ace:	e7f0      	b.n	8004ab2 <uart_stm32_fifo_read+0xc>
}
 8004ad0:	bd70      	pop	{r4, r5, r6, pc}

08004ad2 <uart_stm32_irq_tx_complete>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004ad2:	6803      	ldr	r3, [r0, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8004ad8:	69d8      	ldr	r0, [r3, #28]
}
 8004ada:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8004ade:	4770      	bx	lr

08004ae0 <uart_stm32_irq_tx_ready>:
 8004ae0:	f7ff bff7 	b.w	8004ad2 <uart_stm32_irq_tx_complete>

08004ae4 <uart_stm32_irq_rx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004ae4:	6803      	ldr	r3, [r0, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8004aea:	69d8      	ldr	r0, [r3, #28]
}
 8004aec:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8004af0:	4770      	bx	lr

08004af2 <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004af2:	6803      	ldr	r3, [r0, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004af8:	69da      	ldr	r2, [r3, #28]
 8004afa:	0710      	lsls	r0, r2, #28
 8004afc:	d405      	bmi.n	8004b0a <uart_stm32_poll_in+0x18>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	0692      	lsls	r2, r2, #26
 8004b02:	d405      	bmi.n	8004b10 <uart_stm32_poll_in+0x1e>
		return -1;
 8004b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b08:	4770      	bx	lr
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8004b0a:	2208      	movs	r2, #8
 8004b0c:	621a      	str	r2, [r3, #32]
 8004b0e:	e7f6      	b.n	8004afe <uart_stm32_poll_in+0xc>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8004b10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b12:	700b      	strb	r3, [r1, #0]
	return 0;
 8004b14:	2000      	movs	r0, #0
}
 8004b16:	4770      	bx	lr

08004b18 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(s32_t level)
{
 8004b18:	b538      	push	{r3, r4, r5, lr}
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
 8004b1a:	4b08      	ldr	r3, [pc, #32]	; (8004b3c <_sys_device_do_config_level+0x24>)
 8004b1c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8004b20:	3001      	adds	r0, #1
 8004b22:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8004b26:	4620      	mov	r0, r4
 8004b28:	42a8      	cmp	r0, r5
 8004b2a:	f104 040c 	add.w	r4, r4, #12
 8004b2e:	d300      	bcc.n	8004b32 <_sys_device_do_config_level+0x1a>
		struct device_config *device_conf = info->config;

		(void)device_conf->init(info);
		_k_object_init(info);
	}
}
 8004b30:	bd38      	pop	{r3, r4, r5, pc}
		(void)device_conf->init(info);
 8004b32:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	4798      	blx	r3
 8004b3a:	e7f4      	b.n	8004b26 <_sys_device_do_config_level+0xe>
 8004b3c:	0800625c 	.word	0x0800625c

08004b40 <_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004b40:	4b10      	ldr	r3, [pc, #64]	; (8004b84 <_impl_device_get_binding+0x44>)
{
 8004b42:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004b44:	4c10      	ldr	r4, [pc, #64]	; (8004b88 <_impl_device_get_binding+0x48>)
{
 8004b46:	4605      	mov	r5, r0
 8004b48:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004b4a:	429c      	cmp	r4, r3
 8004b4c:	d104      	bne.n	8004b58 <_impl_device_get_binding+0x18>
 8004b4e:	4c0e      	ldr	r4, [pc, #56]	; (8004b88 <_impl_device_get_binding+0x48>)
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
 8004b50:	42b4      	cmp	r4, r6
 8004b52:	d109      	bne.n	8004b68 <_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
 8004b54:	2400      	movs	r4, #0
 8004b56:	e012      	b.n	8004b7e <_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
 8004b58:	6862      	ldr	r2, [r4, #4]
 8004b5a:	b11a      	cbz	r2, 8004b64 <_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
 8004b5c:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	42aa      	cmp	r2, r5
 8004b62:	d00c      	beq.n	8004b7e <_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004b64:	340c      	adds	r4, #12
 8004b66:	e7f0      	b.n	8004b4a <_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
 8004b68:	6863      	ldr	r3, [r4, #4]
 8004b6a:	b90b      	cbnz	r3, 8004b70 <_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004b6c:	340c      	adds	r4, #12
 8004b6e:	e7ef      	b.n	8004b50 <_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	4628      	mov	r0, r5
 8004b74:	6819      	ldr	r1, [r3, #0]
 8004b76:	f7fb fff7 	bl	8000b68 <strcmp>
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	d1f6      	bne.n	8004b6c <_impl_device_get_binding+0x2c>
}
 8004b7e:	4620      	mov	r0, r4
 8004b80:	bd70      	pop	{r4, r5, r6, pc}
 8004b82:	bf00      	nop
 8004b84:	20001468 	.word	0x20001468
 8004b88:	20001384 	.word	0x20001384

08004b8c <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	(void)memset(&__bss_start, 0,
 8004b8c:	4802      	ldr	r0, [pc, #8]	; (8004b98 <_bss_zero+0xc>)
 8004b8e:	4a03      	ldr	r2, [pc, #12]	; (8004b9c <_bss_zero+0x10>)
 8004b90:	2100      	movs	r1, #0
 8004b92:	1a12      	subs	r2, r2, r0
 8004b94:	f7fb bc96 	b.w	80004c4 <memset>
 8004b98:	20000000 	.word	0x20000000
 8004b9c:	20000338 	.word	0x20000338

08004ba0 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 8004ba0:	4802      	ldr	r0, [pc, #8]	; (8004bac <_data_copy+0xc>)
 8004ba2:	4a03      	ldr	r2, [pc, #12]	; (8004bb0 <_data_copy+0x10>)
 8004ba4:	4903      	ldr	r1, [pc, #12]	; (8004bb4 <_data_copy+0x14>)
 8004ba6:	1a12      	subs	r2, r2, r0
 8004ba8:	f7fb bbf2 	b.w	8000390 <memcpy>
 8004bac:	20001078 	.word	0x20001078
 8004bb0:	2000147c 	.word	0x2000147c
 8004bb4:	08006340 	.word	0x08006340

08004bb8 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8004bb8:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8004bba:	2002      	movs	r0, #2
 8004bbc:	f7ff ffac 	bl	8004b18 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
 8004bc0:	4807      	ldr	r0, [pc, #28]	; (8004be0 <bg_thread_main+0x28>)
 8004bc2:	f7fe f9d7 	bl	8002f74 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
 8004bc6:	2003      	movs	r0, #3
 8004bc8:	f7ff ffa6 	bl	8004b18 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
 8004bcc:	f000 fb76 	bl	80052bc <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
 8004bd0:	f7fd ffa4 	bl	8002b1c <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
 8004bd4:	4a03      	ldr	r2, [pc, #12]	; (8004be4 <bg_thread_main+0x2c>)
 8004bd6:	7b13      	ldrb	r3, [r2, #12]
 8004bd8:	f023 0301 	bic.w	r3, r3, #1
 8004bdc:	7313      	strb	r3, [r2, #12]
 8004bde:	bd08      	pop	{r3, pc}
 8004be0:	08006284 	.word	0x08006284
 8004be4:	20000284 	.word	0x20000284

08004be8 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
 8004bec:	4b32      	ldr	r3, [pc, #200]	; (8004cb8 <_Cstart+0xd0>)
 8004bee:	af06      	add	r7, sp, #24
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8004bf0:	f383 8808 	msr	MSP, r3
 8004bf4:	4b31      	ldr	r3, [pc, #196]	; (8004cbc <_Cstart+0xd4>)
	_kernel.ready_q.cache = _main_thread;
 8004bf6:	4e32      	ldr	r6, [pc, #200]	; (8004cc0 <_Cstart+0xd8>)
 8004bf8:	4d32      	ldr	r5, [pc, #200]	; (8004cc4 <_Cstart+0xdc>)
 8004bfa:	2400      	movs	r4, #0
 8004bfc:	22f0      	movs	r2, #240	; 0xf0
 8004bfe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004c02:	77dc      	strb	r4, [r3, #31]
 8004c04:	761c      	strb	r4, [r3, #24]
 8004c06:	765c      	strb	r4, [r3, #25]
 8004c08:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8004c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c0c:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
 8004c10:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
 8004c12:	f7ff f9cb 	bl	8003fac <_FaultInit>
	_CpuIdleInit();
 8004c16:	f7ff fa23 	bl	8004060 <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	f7ff ff7c 	bl	8004b18 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8004c20:	2001      	movs	r0, #1
 8004c22:	f7ff ff79 	bl	8004b18 <_sys_device_do_config_level>
	_sched_init();
 8004c26:	f000 fa0d 	bl	8005044 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
 8004c2a:	4b27      	ldr	r3, [pc, #156]	; (8004cc8 <_Cstart+0xe0>)
	_kernel.ready_q.cache = _main_thread;
 8004c2c:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
 8004c2e:	9305      	str	r3, [sp, #20]
 8004c30:	2301      	movs	r3, #1
 8004c32:	9304      	str	r3, [sp, #16]
 8004c34:	9403      	str	r4, [sp, #12]
 8004c36:	9402      	str	r4, [sp, #8]
 8004c38:	9401      	str	r4, [sp, #4]
 8004c3a:	9400      	str	r4, [sp, #0]
 8004c3c:	4b23      	ldr	r3, [pc, #140]	; (8004ccc <_Cstart+0xe4>)
 8004c3e:	4924      	ldr	r1, [pc, #144]	; (8004cd0 <_Cstart+0xe8>)
 8004c40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c44:	4628      	mov	r0, r5
 8004c46:	f000 faff 	bl	8005248 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004c4a:	7b6b      	ldrb	r3, [r5, #13]
 8004c4c:	f023 0204 	bic.w	r2, r3, #4
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
 8004c50:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004c54:	736a      	strb	r2, [r5, #13]
 8004c56:	4634      	mov	r4, r6
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
 8004c58:	d105      	bne.n	8004c66 <_Cstart+0x7e>
 8004c5a:	6a2b      	ldr	r3, [r5, #32]
	return true;
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	d102      	bne.n	8004c66 <_Cstart+0x7e>
		_add_thread_to_ready_q(thread);
 8004c60:	4628      	mov	r0, r5
 8004c62:	f000 f941 	bl	8004ee8 <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
 8004c66:	4b1b      	ldr	r3, [pc, #108]	; (8004cd4 <_Cstart+0xec>)
 8004c68:	9305      	str	r3, [sp, #20]
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4e1a      	ldr	r6, [pc, #104]	; (8004cd8 <_Cstart+0xf0>)
 8004c6e:	9304      	str	r3, [sp, #16]
 8004c70:	230f      	movs	r3, #15
 8004c72:	9303      	str	r3, [sp, #12]
 8004c74:	2300      	movs	r3, #0
 8004c76:	9302      	str	r3, [sp, #8]
 8004c78:	9301      	str	r3, [sp, #4]
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004c80:	4b16      	ldr	r3, [pc, #88]	; (8004cdc <_Cstart+0xf4>)
 8004c82:	4917      	ldr	r1, [pc, #92]	; (8004ce0 <_Cstart+0xf8>)
 8004c84:	4630      	mov	r0, r6
 8004c86:	f000 fadf 	bl	8005248 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004c8a:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
 8004c8c:	60e6      	str	r6, [r4, #12]
 8004c8e:	f023 0304 	bic.w	r3, r3, #4
 8004c92:	7373      	strb	r3, [r6, #13]
	list->head = (sys_dnode_t *)list;
 8004c94:	4b13      	ldr	r3, [pc, #76]	; (8004ce4 <_Cstart+0xfc>)
 8004c96:	61a3      	str	r3, [r4, #24]
	list->tail = (sys_dnode_t *)list;
 8004c98:	61e3      	str	r3, [r4, #28]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
 8004c9a:	4b13      	ldr	r3, [pc, #76]	; (8004ce8 <_Cstart+0x100>)

#ifdef CONFIG_TRACING
	z_sys_trace_thread_switched_out();
#endif
	_current = main_thread;
 8004c9c:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
 8004c9e:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
 8004ca2:	4c12      	ldr	r4, [pc, #72]	; (8004cec <_Cstart+0x104>)
 8004ca4:	4a09      	ldr	r2, [pc, #36]	; (8004ccc <_Cstart+0xe4>)
 8004ca6:	f383 8809 	msr	PSP, r3
 8004caa:	b663      	cpsie	if
 8004cac:	2100      	movs	r1, #0
 8004cae:	f381 8811 	msr	BASEPRI, r1
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	4720      	bx	r4
 8004cb6:	bf00      	nop
 8004cb8:	20001078 	.word	0x20001078
 8004cbc:	e000ed00 	.word	0xe000ed00
 8004cc0:	20000308 	.word	0x20000308
 8004cc4:	20000284 	.word	0x20000284
 8004cc8:	08006274 	.word	0x08006274
 8004ccc:	08004bb9 	.word	0x08004bb9
 8004cd0:	20000338 	.word	0x20000338
 8004cd4:	08006279 	.word	0x08006279
 8004cd8:	20000218 	.word	0x20000218
 8004cdc:	080055a1 	.word	0x080055a1
 8004ce0:	20000738 	.word	0x20000738
 8004ce4:	20000320 	.word	0x20000320
 8004ce8:	20000738 	.word	0x20000738
 8004cec:	08002b41 	.word	0x08002b41

08004cf0 <sys_dlist_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 8004cf0:	e890 000c 	ldmia.w	r0, {r2, r3}
 8004cf4:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 8004cf6:	6802      	ldr	r2, [r0, #0]
 8004cf8:	6053      	str	r3, [r2, #4]
 8004cfa:	4770      	bx	lr

08004cfc <reset_time_slice>:
 * SMP, it's safe to miss a timeout as long as another CPU (i.e. the
 * one we're racing against) is available to wake up at the
 * appropriate time.
 */
static void reset_time_slice(void)
{
 8004cfc:	b508      	push	{r3, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8004cfe:	f7fe ff9b 	bl	8003c38 <z_clock_elapsed>
 8004d02:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <reset_time_slice+0x1c>)
 8004d04:	4a05      	ldr	r2, [pc, #20]	; (8004d1c <reset_time_slice+0x20>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4418      	add	r0, r3
 8004d0a:	6110      	str	r0, [r2, #16]

	z_set_timeout_expiry(slice_time, false);
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	4618      	mov	r0, r3
}
 8004d10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_set_timeout_expiry(slice_time, false);
 8004d14:	f000 bc16 	b.w	8005544 <z_set_timeout_expiry>
 8004d18:	200002f4 	.word	0x200002f4
 8004d1c:	20000308 	.word	0x20000308

08004d20 <k_spin_lock.isra.10>:
 8004d20:	f04f 0310 	mov.w	r3, #16
 8004d24:	f3ef 8011 	mrs	r0, BASEPRI
 8004d28:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
 8004d2c:	4770      	bx	lr
	...

08004d30 <update_cache>:
#else
static void reset_time_slice(void) { /* !CONFIG_TIMESLICING */ }
#endif

static void update_cache(int preempt_ok)
{
 8004d30:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
 8004d32:	4c10      	ldr	r4, [pc, #64]	; (8004d74 <update_cache+0x44>)
 8004d34:	4623      	mov	r3, r4
 8004d36:	f853 5f24 	ldr.w	r5, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004d3a:	429d      	cmp	r5, r3
 8004d3c:	d000      	beq.n	8004d40 <update_cache+0x10>
	return th ? th : _current_cpu->idle_thread;
 8004d3e:	b905      	cbnz	r5, 8004d42 <update_cache+0x12>
 8004d40:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
 8004d42:	b970      	cbnz	r0, 8004d62 <update_cache+0x32>
	if (!_current || !_is_thread_ready(_current)) {
 8004d44:	68a3      	ldr	r3, [r4, #8]
 8004d46:	b163      	cbz	r3, 8004d62 <update_cache+0x32>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
 8004d48:	7b5a      	ldrb	r2, [r3, #13]
 8004d4a:	06d2      	lsls	r2, r2, #27
 8004d4c:	d109      	bne.n	8004d62 <update_cache+0x32>
 8004d4e:	6a1a      	ldr	r2, [r3, #32]
 8004d50:	3201      	adds	r2, #1
 8004d52:	d106      	bne.n	8004d62 <update_cache+0x32>
	if (_is_preempt(_current) || is_metairq(th)) {
 8004d54:	89da      	ldrh	r2, [r3, #14]
 8004d56:	2a7f      	cmp	r2, #127	; 0x7f
 8004d58:	d903      	bls.n	8004d62 <update_cache+0x32>
	return thread == _idle_thread;
 8004d5a:	4a07      	ldr	r2, [pc, #28]	; (8004d78 <update_cache+0x48>)
	if (_is_idle(_current)) {
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d106      	bne.n	8004d70 <update_cache+0x40>
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		if (th != _current) {
 8004d62:	68a3      	ldr	r3, [r4, #8]
 8004d64:	42ab      	cmp	r3, r5
 8004d66:	d001      	beq.n	8004d6c <update_cache+0x3c>
			reset_time_slice();
 8004d68:	f7ff ffc8 	bl	8004cfc <reset_time_slice>
		}
		_kernel.ready_q.cache = th;
 8004d6c:	6225      	str	r5, [r4, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 8004d6e:	bd38      	pop	{r3, r4, r5, pc}
		_kernel.ready_q.cache = _current;
 8004d70:	6223      	str	r3, [r4, #32]
 8004d72:	bd38      	pop	{r3, r4, r5, pc}
 8004d74:	20000308 	.word	0x20000308
 8004d78:	08006280 	.word	0x08006280

08004d7c <k_sched_time_slice_set>:
{
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
 8004d80:	f7ff ffce 	bl	8004d20 <k_spin_lock.isra.10>
		_current_cpu->slice_ticks = 0;
 8004d84:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <k_sched_time_slice_set+0x2c>)
	LOCKED(&sched_lock) {
 8004d86:	4604      	mov	r4, r0
		_current_cpu->slice_ticks = 0;
 8004d88:	2000      	movs	r0, #0
 8004d8a:	6118      	str	r0, [r3, #16]
		CONFIG_SYS_CLOCK_TICKS_PER_SEC);
#else
	/* simple division keeps precision */
	s32_t ms_per_tick = MSEC_PER_SEC / CONFIG_SYS_CLOCK_TICKS_PER_SEC;

	return (s32_t)ceiling_fraction(ms, ms_per_tick);
 8004d8c:	3209      	adds	r2, #9
 8004d8e:	230a      	movs	r3, #10
 8004d90:	fb92 f2f3 	sdiv	r2, r2, r3
		slice_time = _ms_to_ticks(duration_in_ms);
 8004d94:	4b05      	ldr	r3, [pc, #20]	; (8004dac <k_sched_time_slice_set+0x30>)
 8004d96:	601a      	str	r2, [r3, #0]
		slice_max_prio = prio;
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <k_sched_time_slice_set+0x34>)
 8004d9a:	6019      	str	r1, [r3, #0]
		reset_time_slice();
 8004d9c:	f7ff ffae 	bl	8004cfc <reset_time_slice>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8004da0:	f384 8811 	msr	BASEPRI, r4
 8004da4:	bd10      	pop	{r4, pc}
 8004da6:	bf00      	nop
 8004da8:	20000308 	.word	0x20000308
 8004dac:	200002f4 	.word	0x200002f4
 8004db0:	200002f0 	.word	0x200002f0

08004db4 <_remove_thread_from_ready_q>:
		update_cache(thread == _current);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
 8004db4:	b510      	push	{r4, lr}
 8004db6:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
 8004db8:	f7ff ffb2 	bl	8004d20 <k_spin_lock.isra.10>
		if (_is_thread_queued(thread)) {
 8004dbc:	7b4b      	ldrb	r3, [r1, #13]
 8004dbe:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
 8004dc0:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
 8004dc2:	d50d      	bpl.n	8004de0 <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	f7ff ff93 	bl	8004cf0 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
 8004dca:	7b4b      	ldrb	r3, [r1, #13]
 8004dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd0:	734b      	strb	r3, [r1, #13]
			update_cache(thread == _current);
 8004dd2:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <_remove_thread_from_ready_q+0x34>)
 8004dd4:	6898      	ldr	r0, [r3, #8]
 8004dd6:	1a43      	subs	r3, r0, r1
 8004dd8:	4258      	negs	r0, r3
 8004dda:	4158      	adcs	r0, r3
 8004ddc:	f7ff ffa8 	bl	8004d30 <update_cache>
 8004de0:	f384 8811 	msr	BASEPRI, r4
 8004de4:	bd10      	pop	{r4, pc}
 8004de6:	bf00      	nop
 8004de8:	20000308 	.word	0x20000308

08004dec <_find_first_thread_to_unpend>:
{
 8004dec:	b508      	push	{r3, lr}
 8004dee:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
 8004df0:	f7ff ff96 	bl	8004d20 <k_spin_lock.isra.10>
	return list->head == list;
 8004df4:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004df6:	429a      	cmp	r2, r3
 8004df8:	bf08      	it	eq
 8004dfa:	2300      	moveq	r3, #0
 8004dfc:	f380 8811 	msr	BASEPRI, r0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	bd08      	pop	{r3, pc}

08004e04 <_unpend_thread_no_timeout>:
{
 8004e04:	b510      	push	{r4, lr}
 8004e06:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
 8004e08:	f7ff ff8a 	bl	8004d20 <k_spin_lock.isra.10>
 8004e0c:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
 8004e0e:	4608      	mov	r0, r1
 8004e10:	f7ff ff6e 	bl	8004cf0 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8004e14:	7b4b      	ldrb	r3, [r1, #13]
 8004e16:	f023 0302 	bic.w	r3, r3, #2
 8004e1a:	734b      	strb	r3, [r1, #13]
 8004e1c:	f384 8811 	msr	BASEPRI, r4
	thread->base.pended_on = NULL;
 8004e20:	2300      	movs	r3, #0
 8004e22:	608b      	str	r3, [r1, #8]
 8004e24:	bd10      	pop	{r4, pc}

08004e26 <_unpend_first_thread>:
{
 8004e26:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
 8004e28:	2100      	movs	r1, #0
 8004e2a:	f7ff ffdf 	bl	8004dec <_find_first_thread_to_unpend>

	if (thread != NULL) {
 8004e2e:	4604      	mov	r4, r0
 8004e30:	b128      	cbz	r0, 8004e3e <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
 8004e32:	f7ff ffe7 	bl	8004e04 <_unpend_thread_no_timeout>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
 8004e36:	f104 0018 	add.w	r0, r4, #24
 8004e3a:	f000 fabd 	bl	80053b8 <_abort_timeout>
}
 8004e3e:	4620      	mov	r0, r4
 8004e40:	bd10      	pop	{r4, pc}
	...

08004e44 <_reschedule>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e44:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
 8004e48:	2b0d      	cmp	r3, #13
 8004e4a:	d809      	bhi.n	8004e60 <_reschedule+0x1c>
 8004e4c:	b11b      	cbz	r3, 8004e56 <_reschedule+0x12>
 8004e4e:	4b07      	ldr	r3, [pc, #28]	; (8004e6c <_reschedule+0x28>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	051b      	lsls	r3, r3, #20
 8004e54:	d504      	bpl.n	8004e60 <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
 8004e56:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <_reschedule+0x2c>)
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d102      	bne.n	8004e66 <_reschedule+0x22>
 8004e60:	f380 8811 	msr	BASEPRI, r0
 8004e64:	4770      	bx	lr
 8004e66:	f7fe bf1d 	b.w	8003ca4 <__swap>
 8004e6a:	bf00      	nop
 8004e6c:	e000ed00 	.word	0xe000ed00
 8004e70:	20000308 	.word	0x20000308

08004e74 <k_sched_unlock>:
{
 8004e74:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
 8004e76:	f7ff ff53 	bl	8004d20 <k_spin_lock.isra.10>
		++_current->base.sched_locked;
 8004e7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ea4 <k_sched_unlock+0x30>)
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	7bd3      	ldrb	r3, [r2, #15]
 8004e80:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
 8004e82:	4604      	mov	r4, r0
		++_current->base.sched_locked;
 8004e84:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
 8004e86:	2001      	movs	r0, #1
 8004e88:	f7ff ff52 	bl	8004d30 <update_cache>
 8004e8c:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
 8004e90:	f04f 0310 	mov.w	r3, #16
 8004e94:	f3ef 8011 	mrs	r0, BASEPRI
 8004e98:	f383 8811 	msr	BASEPRI, r3
}
 8004e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
 8004ea0:	f7ff bfd0 	b.w	8004e44 <_reschedule>
 8004ea4:	20000308 	.word	0x20000308

08004ea8 <_priq_dumb_add>:
{
 8004ea8:	b510      	push	{r4, lr}
	return list->head == list;
 8004eaa:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004eac:	4298      	cmp	r0, r3
 8004eae:	bf08      	it	eq
 8004eb0:	2300      	moveq	r3, #0
 8004eb2:	b193      	cbz	r3, 8004eda <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
 8004eb4:	f991 400e 	ldrsb.w	r4, [r1, #14]
 8004eb8:	f993 200e 	ldrsb.w	r2, [r3, #14]
 8004ebc:	4294      	cmp	r4, r2
 8004ebe:	da06      	bge.n	8004ece <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
 8004ec4:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
 8004eca:	6059      	str	r1, [r3, #4]
 8004ecc:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
 8004ece:	6842      	ldr	r2, [r0, #4]
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d002      	beq.n	8004eda <_priq_dumb_add+0x32>
 8004ed4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1eb      	bne.n	8004eb2 <_priq_dumb_add+0xa>
	node->next = list;
 8004eda:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
 8004edc:	6843      	ldr	r3, [r0, #4]
 8004ede:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
 8004ee0:	6843      	ldr	r3, [r0, #4]
 8004ee2:	6019      	str	r1, [r3, #0]
	list->tail = node;
 8004ee4:	6041      	str	r1, [r0, #4]
 8004ee6:	bd10      	pop	{r4, pc}

08004ee8 <_add_thread_to_ready_q>:
{
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
 8004eec:	f7ff ff18 	bl	8004d20 <k_spin_lock.isra.10>
		_priq_run_add(&_kernel.ready_q.runq, thread);
 8004ef0:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
 8004ef2:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
 8004ef4:	4806      	ldr	r0, [pc, #24]	; (8004f10 <_add_thread_to_ready_q+0x28>)
 8004ef6:	f7ff ffd7 	bl	8004ea8 <_priq_dumb_add>
	thread->base.thread_state |= states;
 8004efa:	7b63      	ldrb	r3, [r4, #13]
 8004efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f00:	7363      	strb	r3, [r4, #13]
		update_cache(0);
 8004f02:	2000      	movs	r0, #0
 8004f04:	f7ff ff14 	bl	8004d30 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8004f08:	f385 8811 	msr	BASEPRI, r5
 8004f0c:	bd38      	pop	{r3, r4, r5, pc}
 8004f0e:	bf00      	nop
 8004f10:	2000032c 	.word	0x2000032c

08004f14 <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
 8004f14:	7b42      	ldrb	r2, [r0, #13]
 8004f16:	06d2      	lsls	r2, r2, #27
 8004f18:	d104      	bne.n	8004f24 <_ready_thread+0x10>
 8004f1a:	6a03      	ldr	r3, [r0, #32]
	if (_is_thread_ready(thread)) {
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
 8004f20:	f7ff bfe2 	b.w	8004ee8 <_add_thread_to_ready_q>
 8004f24:	4770      	bx	lr

08004f26 <z_thread_timeout>:
{
 8004f26:	b538      	push	{r3, r4, r5, lr}
	if (th->base.pended_on != NULL) {
 8004f28:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
 8004f2c:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
 8004f2e:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
 8004f32:	b113      	cbz	r3, 8004f3a <z_thread_timeout+0x14>
		_unpend_thread_no_timeout(th);
 8004f34:	4628      	mov	r0, r5
 8004f36:	f7ff ff65 	bl	8004e04 <_unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004f3a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8004f3e:	f023 0304 	bic.w	r3, r3, #4
 8004f42:	f804 3c0b 	strb.w	r3, [r4, #-11]
	_ready_thread(th);
 8004f46:	4628      	mov	r0, r5
}
 8004f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_ready_thread(th);
 8004f4c:	f7ff bfe2 	b.w	8004f14 <_ready_thread>

08004f50 <_move_thread_to_end_of_prio_q>:
{
 8004f50:	b570      	push	{r4, r5, r6, lr}
 8004f52:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
 8004f54:	f7ff fee4 	bl	8004d20 <k_spin_lock.isra.10>
		_priq_run_add(&_kernel.ready_q.runq, thread);
 8004f58:	4d0b      	ldr	r5, [pc, #44]	; (8004f88 <_move_thread_to_end_of_prio_q+0x38>)
	LOCKED(&sched_lock) {
 8004f5a:	4606      	mov	r6, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	f7ff fec7 	bl	8004cf0 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
 8004f62:	4621      	mov	r1, r4
 8004f64:	4628      	mov	r0, r5
 8004f66:	f7ff ff9f 	bl	8004ea8 <_priq_dumb_add>
	thread->base.thread_state |= states;
 8004f6a:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
 8004f6c:	f855 0c1c 	ldr.w	r0, [r5, #-28]
 8004f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f74:	7363      	strb	r3, [r4, #13]
 8004f76:	1b03      	subs	r3, r0, r4
 8004f78:	4258      	negs	r0, r3
 8004f7a:	4158      	adcs	r0, r3
 8004f7c:	f7ff fed8 	bl	8004d30 <update_cache>
 8004f80:	f386 8811 	msr	BASEPRI, r6
 8004f84:	bd70      	pop	{r4, r5, r6, pc}
 8004f86:	bf00      	nop
 8004f88:	2000032c 	.word	0x2000032c

08004f8c <z_time_slice>:
	if (slice_time && sliceable(_current)) {
 8004f8c:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <z_time_slice+0x48>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
{
 8004f90:	b510      	push	{r4, lr}
	if (slice_time && sliceable(_current)) {
 8004f92:	b1f3      	cbz	r3, 8004fd2 <z_time_slice+0x46>
 8004f94:	4910      	ldr	r1, [pc, #64]	; (8004fd8 <z_time_slice+0x4c>)
 8004f96:	688b      	ldr	r3, [r1, #8]
		&& !_is_thread_timeout_active(t);
 8004f98:	89da      	ldrh	r2, [r3, #14]
 8004f9a:	2a7f      	cmp	r2, #127	; 0x7f
 8004f9c:	d819      	bhi.n	8004fd2 <z_time_slice+0x46>
		&& !_is_prio_higher(t->base.prio, slice_max_prio)
 8004f9e:	4a0f      	ldr	r2, [pc, #60]	; (8004fdc <z_time_slice+0x50>)
 8004fa0:	f993 400e 	ldrsb.w	r4, [r3, #14]
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	4294      	cmp	r4, r2
 8004fa8:	db13      	blt.n	8004fd2 <z_time_slice+0x46>
	return thread == _idle_thread;
 8004faa:	4a0d      	ldr	r2, [pc, #52]	; (8004fe0 <z_time_slice+0x54>)
		&& !_is_idle(t)
 8004fac:	6812      	ldr	r2, [r2, #0]
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00f      	beq.n	8004fd2 <z_time_slice+0x46>
		&& !_is_thread_timeout_active(t);
 8004fb2:	6a1a      	ldr	r2, [r3, #32]
 8004fb4:	3201      	adds	r2, #1
 8004fb6:	d10c      	bne.n	8004fd2 <z_time_slice+0x46>
		if (ticks >= _current_cpu->slice_ticks) {
 8004fb8:	690a      	ldr	r2, [r1, #16]
 8004fba:	4282      	cmp	r2, r0
 8004fbc:	dc06      	bgt.n	8004fcc <z_time_slice+0x40>
			_move_thread_to_end_of_prio_q(_current);
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff ffc6 	bl	8004f50 <_move_thread_to_end_of_prio_q>
}
 8004fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
 8004fc8:	f7ff be98 	b.w	8004cfc <reset_time_slice>
			_current_cpu->slice_ticks -= ticks;
 8004fcc:	1a12      	subs	r2, r2, r0
 8004fce:	610a      	str	r2, [r1, #16]
}
 8004fd0:	bd10      	pop	{r4, pc}
 8004fd2:	bd10      	pop	{r4, pc}
 8004fd4:	200002f4 	.word	0x200002f4
 8004fd8:	20000308 	.word	0x20000308
 8004fdc:	200002f0 	.word	0x200002f0
 8004fe0:	08006280 	.word	0x08006280

08004fe4 <pend>:
{
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	4605      	mov	r5, r0
 8004fe8:	460e      	mov	r6, r1
 8004fea:	4614      	mov	r4, r2
	_remove_thread_from_ready_q(thread);
 8004fec:	f7ff fee2 	bl	8004db4 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
 8004ff0:	7b6b      	ldrb	r3, [r5, #13]
 8004ff2:	f043 0302 	orr.w	r3, r3, #2
 8004ff6:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
 8004ff8:	b126      	cbz	r6, 8005004 <pend+0x20>
		thread->base.pended_on = wait_q;
 8004ffa:	60ae      	str	r6, [r5, #8]
		_priq_wait_add(&wait_q->waitq, thread);
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	4630      	mov	r0, r6
 8005000:	f7ff ff52 	bl	8004ea8 <_priq_dumb_add>
	if (timeout != K_FOREVER) {
 8005004:	1c63      	adds	r3, r4, #1
 8005006:	d00b      	beq.n	8005020 <pend+0x3c>
 8005008:	3409      	adds	r4, #9
 800500a:	220a      	movs	r2, #10
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 800500c:	f105 0018 	add.w	r0, r5, #24
 8005010:	fb94 f2f2 	sdiv	r2, r4, r2
 8005014:	4903      	ldr	r1, [pc, #12]	; (8005024 <pend+0x40>)
 8005016:	3201      	adds	r2, #1
}
 8005018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800501c:	f000 ba0a 	b.w	8005434 <_add_timeout>
 8005020:	bd70      	pop	{r4, r5, r6, pc}
 8005022:	bf00      	nop
 8005024:	08004f27 	.word	0x08004f27

08005028 <_pend_current_thread>:
{
 8005028:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
 800502a:	4b05      	ldr	r3, [pc, #20]	; (8005040 <_pend_current_thread+0x18>)
{
 800502c:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
 800502e:	6898      	ldr	r0, [r3, #8]
 8005030:	f7ff ffd8 	bl	8004fe4 <pend>
 8005034:	4620      	mov	r0, r4
}
 8005036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800503a:	f7fe be33 	b.w	8003ca4 <__swap>
 800503e:	bf00      	nop
 8005040:	20000308 	.word	0x20000308

08005044 <_sched_init>:
	list->head = (sys_dnode_t *)list;
 8005044:	4b04      	ldr	r3, [pc, #16]	; (8005058 <_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8005046:	2100      	movs	r1, #0
 8005048:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800504c:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
 800504e:	629a      	str	r2, [r3, #40]	; 0x28
 8005050:	4608      	mov	r0, r1
 8005052:	f7ff be93 	b.w	8004d7c <k_sched_time_slice_set>
 8005056:	bf00      	nop
 8005058:	20000308 	.word	0x20000308

0800505c <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
 800505c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
 800505e:	4c12      	ldr	r4, [pc, #72]	; (80050a8 <_impl_k_yield+0x4c>)
 8005060:	4b12      	ldr	r3, [pc, #72]	; (80050ac <_impl_k_yield+0x50>)
 8005062:	68a2      	ldr	r2, [r4, #8]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d00f      	beq.n	800508a <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
 800506a:	f7ff fe59 	bl	8004d20 <k_spin_lock.isra.10>
 800506e:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
 8005070:	68a0      	ldr	r0, [r4, #8]
 8005072:	f7ff fe3d 	bl	8004cf0 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
 8005076:	68a1      	ldr	r1, [r4, #8]
 8005078:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800507c:	f7ff ff14 	bl	8004ea8 <_priq_dumb_add>
			update_cache(1);
 8005080:	2001      	movs	r0, #1
 8005082:	f7ff fe55 	bl	8004d30 <update_cache>
 8005086:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	(void)_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
 800508a:	6a22      	ldr	r2, [r4, #32]
 800508c:	68a3      	ldr	r3, [r4, #8]
 800508e:	429a      	cmp	r2, r3
 8005090:	d009      	beq.n	80050a6 <_impl_k_yield+0x4a>
	__asm__ volatile(
 8005092:	f04f 0310 	mov.w	r3, #16
 8005096:	f3ef 8011 	mrs	r0, BASEPRI
 800509a:	f383 8811 	msr	BASEPRI, r3
		(void)_Swap(irq_lock());
	}
#endif
}
 800509e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050a2:	f7fe bdff 	b.w	8003ca4 <__swap>
 80050a6:	bd38      	pop	{r3, r4, r5, pc}
 80050a8:	20000308 	.word	0x20000308
 80050ac:	08006280 	.word	0x08006280

080050b0 <_impl_k_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

s32_t _impl_k_sleep(s32_t duration)
{
 80050b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
 80050b4:	4604      	mov	r4, r0
 80050b6:	b920      	cbnz	r0, 80050c2 <_impl_k_sleep+0x12>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
 80050b8:	f7ff ffd0 	bl	800505c <_impl_k_yield>
		return __ticks_to_ms(ticks);
	}
#endif

	return 0;
}
 80050bc:	4620      	mov	r0, r4
 80050be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c2:	f100 0509 	add.w	r5, r0, #9
	expected_wakeup_time = ticks + z_tick_get_32();
 80050c6:	f000 fa67 	bl	8005598 <z_tick_get_32>
 80050ca:	240a      	movs	r4, #10
 80050cc:	fb95 f5f4 	sdiv	r5, r5, r4
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
 80050d0:	3501      	adds	r5, #1
	expected_wakeup_time = ticks + z_tick_get_32();
 80050d2:	182f      	adds	r7, r5, r0
 80050d4:	f04f 0310 	mov.w	r3, #16
 80050d8:	f3ef 8811 	mrs	r8, BASEPRI
 80050dc:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
 80050e0:	4e0a      	ldr	r6, [pc, #40]	; (800510c <_impl_k_sleep+0x5c>)
 80050e2:	68b0      	ldr	r0, [r6, #8]
 80050e4:	f7ff fe66 	bl	8004db4 <_remove_thread_from_ready_q>
 80050e8:	68b0      	ldr	r0, [r6, #8]
 80050ea:	4909      	ldr	r1, [pc, #36]	; (8005110 <_impl_k_sleep+0x60>)
 80050ec:	462a      	mov	r2, r5
 80050ee:	3018      	adds	r0, #24
 80050f0:	f000 f9a0 	bl	8005434 <_add_timeout>
 80050f4:	4640      	mov	r0, r8
 80050f6:	f7fe fdd5 	bl	8003ca4 <__swap>
	ticks = expected_wakeup_time - z_tick_get_32();
 80050fa:	f000 fa4d 	bl	8005598 <z_tick_get_32>
 80050fe:	1a38      	subs	r0, r7, r0
	if (ticks > 0) {
 8005100:	2800      	cmp	r0, #0
		return __ticks_to_ms(ticks);
 8005102:	bfcc      	ite	gt
 8005104:	4344      	mulgt	r4, r0
	return 0;
 8005106:	2400      	movle	r4, #0
 8005108:	e7d8      	b.n	80050bc <_impl_k_sleep+0xc>
 800510a:	bf00      	nop
 800510c:	20000308 	.word	0x20000308
 8005110:	08004f27 	.word	0x08004f27

08005114 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
 8005114:	4b01      	ldr	r3, [pc, #4]	; (800511c <_impl_k_current_get+0x8>)
 8005116:	6898      	ldr	r0, [r3, #8]
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	20000308 	.word	0x20000308

08005120 <_impl_k_sem_init>:
{
	__ASSERT(limit != 0U, "limit cannot be zero");
	__ASSERT(initial_count <= limit, "count cannot be greater than limit");

	sys_trace_void(SYS_TRACE_ID_SEMA_INIT);
	sem->count = initial_count;
 8005120:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
 8005122:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
 8005124:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 8005126:	6040      	str	r0, [r0, #4]
 8005128:	4770      	bx	lr

0800512a <_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void _impl_k_sem_give(struct k_sem *sem)
{
 800512a:	b570      	push	{r4, r5, r6, lr}
 800512c:	4604      	mov	r4, r0
 800512e:	f04f 0310 	mov.w	r3, #16
 8005132:	f3ef 8611 	mrs	r6, BASEPRI
 8005136:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
 800513a:	f7ff fe74 	bl	8004e26 <_unpend_first_thread>
	if (thread != NULL) {
 800513e:	4605      	mov	r5, r0
 8005140:	b170      	cbz	r0, 8005160 <_impl_k_sem_give+0x36>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
 8005142:	7b43      	ldrb	r3, [r0, #13]
 8005144:	06db      	lsls	r3, r3, #27
 8005146:	d104      	bne.n	8005152 <_impl_k_sem_give+0x28>
 8005148:	6a03      	ldr	r3, [r0, #32]
	if (_is_thread_ready(thread)) {
 800514a:	3301      	adds	r3, #1
 800514c:	d101      	bne.n	8005152 <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
 800514e:	f7ff fecb 	bl	8004ee8 <_add_thread_to_ready_q>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8005152:	2300      	movs	r3, #0
 8005154:	66ab      	str	r3, [r5, #104]	; 0x68
	u32_t key = irq_lock();

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	_reschedule(key);
 8005156:	4630      	mov	r0, r6
}
 8005158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
 800515c:	f7ff be72 	b.w	8004e44 <_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8005160:	68a3      	ldr	r3, [r4, #8]
 8005162:	68e2      	ldr	r2, [r4, #12]
 8005164:	429a      	cmp	r2, r3
 8005166:	bf18      	it	ne
 8005168:	3301      	addne	r3, #1
 800516a:	60a3      	str	r3, [r4, #8]
 800516c:	e7f3      	b.n	8005156 <_impl_k_sem_give+0x2c>

0800516e <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
 800516e:	b410      	push	{r4}
 8005170:	460a      	mov	r2, r1
 8005172:	4604      	mov	r4, r0
 8005174:	f04f 0310 	mov.w	r3, #16
 8005178:	f3ef 8011 	mrs	r0, BASEPRI
 800517c:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(((_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	u32_t key = irq_lock();

	if (likely(sem->count > 0U)) {
 8005180:	68a3      	ldr	r3, [r4, #8]
 8005182:	b133      	cbz	r3, 8005192 <_impl_k_sem_take+0x24>
		sem->count--;
 8005184:	3b01      	subs	r3, #1
 8005186:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8005188:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
 800518c:	2000      	movs	r0, #0
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
 800518e:	bc10      	pop	{r4}
 8005190:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
 8005192:	b921      	cbnz	r1, 800519e <_impl_k_sem_take+0x30>
 8005194:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
 8005198:	f06f 000f 	mvn.w	r0, #15
 800519c:	e7f7      	b.n	800518e <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
 800519e:	4621      	mov	r1, r4
}
 80051a0:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
 80051a2:	f7ff bf41 	b.w	8005028 <_pend_current_thread>
	...

080051a8 <schedule_new_thread.part.8>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
 80051a8:	b510      	push	{r4, lr}
	__asm__ volatile(
 80051aa:	f04f 0310 	mov.w	r3, #16
 80051ae:	f3ef 8411 	mrs	r4, BASEPRI
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f101 0209 	add.w	r2, r1, #9
 80051ba:	3018      	adds	r0, #24
 80051bc:	210a      	movs	r1, #10
 80051be:	fb92 f2f1 	sdiv	r2, r2, r1
 80051c2:	4903      	ldr	r1, [pc, #12]	; (80051d0 <schedule_new_thread.part.8+0x28>)
 80051c4:	3201      	adds	r2, #1
 80051c6:	f000 f935 	bl	8005434 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80051ca:	f384 8811 	msr	BASEPRI, r4
 80051ce:	bd10      	pop	{r4, pc}
 80051d0:	08004f27 	.word	0x08004f27

080051d4 <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
 80051d4:	7b42      	ldrb	r2, [r0, #13]
 80051d6:	06d2      	lsls	r2, r2, #27
 80051d8:	d104      	bne.n	80051e4 <_ready_thread+0x10>
 80051da:	6a03      	ldr	r3, [r0, #32]
	if (_is_thread_ready(thread)) {
 80051dc:	3301      	adds	r3, #1
 80051de:	d101      	bne.n	80051e4 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
 80051e0:	f7ff be82 	b.w	8004ee8 <_add_thread_to_ready_q>
 80051e4:	4770      	bx	lr
	...

080051e8 <k_is_in_isr>:
 80051e8:	f3ef 8005 	mrs	r0, IPSR
 80051ec:	280d      	cmp	r0, #13
 80051ee:	d807      	bhi.n	8005200 <k_is_in_isr+0x18>
 80051f0:	b138      	cbz	r0, 8005202 <k_is_in_isr+0x1a>
 80051f2:	4b04      	ldr	r3, [pc, #16]	; (8005204 <k_is_in_isr+0x1c>)
 80051f4:	6858      	ldr	r0, [r3, #4]
 80051f6:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
 80051fa:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 80051fe:	4770      	bx	lr
 8005200:	2001      	movs	r0, #1
}
 8005202:	4770      	bx	lr
 8005204:	e000ed00 	.word	0xe000ed00

08005208 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
 8005208:	4b02      	ldr	r3, [pc, #8]	; (8005214 <_is_thread_essential+0xc>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	7b18      	ldrb	r0, [r3, #12]
}
 800520e:	f000 0001 	and.w	r0, r0, #1
 8005212:	4770      	bx	lr
 8005214:	20000308 	.word	0x20000308

08005218 <_impl_k_thread_start>:
{
 8005218:	b510      	push	{r4, lr}
	__asm__ volatile(
 800521a:	f04f 0310 	mov.w	r3, #16
 800521e:	f3ef 8411 	mrs	r4, BASEPRI
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	7b43      	ldrb	r3, [r0, #13]
	if (_has_thread_started(thread)) {
 8005228:	0759      	lsls	r1, r3, #29
 800522a:	d402      	bmi.n	8005232 <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 800522c:	f384 8811 	msr	BASEPRI, r4
 8005230:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8005232:	f023 0304 	bic.w	r3, r3, #4
 8005236:	7343      	strb	r3, [r0, #13]
	_ready_thread(thread);
 8005238:	f7ff ffcc 	bl	80051d4 <_ready_thread>
	_reschedule(key);
 800523c:	4620      	mov	r0, r4
}
 800523e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
 8005242:	f7ff bdff 	b.w	8004e44 <_reschedule>
	...

08005248 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
 8005248:	b530      	push	{r4, r5, lr}
 800524a:	b087      	sub	sp, #28
 800524c:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800524e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005250:	9504      	str	r5, [sp, #16]
 8005252:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005254:	9503      	str	r5, [sp, #12]
 8005256:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005258:	9502      	str	r5, [sp, #8]
 800525a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800525c:	9501      	str	r5, [sp, #4]
 800525e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005260:	9500      	str	r5, [sp, #0]
 8005262:	f7fe fed5 	bl	8004010 <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 8005266:	4b04      	ldr	r3, [pc, #16]	; (8005278 <_setup_new_thread+0x30>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	b913      	cbnz	r3, 8005272 <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 800526c:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
 800526e:	b007      	add	sp, #28
 8005270:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
 8005272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005274:	e7fa      	b.n	800526c <_setup_new_thread+0x24>
 8005276:	bf00      	nop
 8005278:	20000308 	.word	0x20000308

0800527c <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
 800527c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 800527e:	b510      	push	{r4, lr}
 8005280:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
 8005282:	b103      	cbz	r3, 8005286 <_k_thread_single_abort+0xa>
		thread->fn_abort();
 8005284:	4798      	blx	r3
 8005286:	7b63      	ldrb	r3, [r4, #13]
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
 8005288:	06da      	lsls	r2, r3, #27
 800528a:	d10a      	bne.n	80052a2 <_k_thread_single_abort+0x26>
 800528c:	6a22      	ldr	r2, [r4, #32]
	}

	if (_is_thread_ready(thread)) {
 800528e:	3201      	adds	r2, #1
 8005290:	d107      	bne.n	80052a2 <_k_thread_single_abort+0x26>
		_remove_thread_from_ready_q(thread);
 8005292:	4620      	mov	r0, r4
 8005294:	f7ff fd8e 	bl	8004db4 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			(void)_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
 8005298:	7b63      	ldrb	r3, [r4, #13]
 800529a:	f043 0308 	orr.w	r3, r3, #8
 800529e:	7363      	strb	r3, [r4, #13]
 80052a0:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
 80052a2:	079b      	lsls	r3, r3, #30
 80052a4:	d502      	bpl.n	80052ac <_k_thread_single_abort+0x30>
			_unpend_thread_no_timeout(thread);
 80052a6:	4620      	mov	r0, r4
 80052a8:	f7ff fdac 	bl	8004e04 <_unpend_thread_no_timeout>
		if (_is_thread_timeout_active(thread)) {
 80052ac:	6a23      	ldr	r3, [r4, #32]
 80052ae:	3301      	adds	r3, #1
 80052b0:	d0f2      	beq.n	8005298 <_k_thread_single_abort+0x1c>
	return _abort_timeout(&thread->base.timeout);
 80052b2:	f104 0018 	add.w	r0, r4, #24
 80052b6:	f000 f87f 	bl	80053b8 <_abort_timeout>
 80052ba:	e7ed      	b.n	8005298 <_k_thread_single_abort+0x1c>

080052bc <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
 80052bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
 80052be:	4f22      	ldr	r7, [pc, #136]	; (8005348 <_init_static_threads+0x8c>)
 80052c0:	4d22      	ldr	r5, [pc, #136]	; (800534c <_init_static_threads+0x90>)
{
 80052c2:	b087      	sub	sp, #28
 80052c4:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
 80052c6:	42bd      	cmp	r5, r7
 80052c8:	f105 0430 	add.w	r4, r5, #48	; 0x30
 80052cc:	d314      	bcc.n	80052f8 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
 80052ce:	4b20      	ldr	r3, [pc, #128]	; (8005350 <_init_static_threads+0x94>)
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	7bd3      	ldrb	r3, [r2, #15]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 80052d8:	f04f 0310 	mov.w	r3, #16
 80052dc:	f3ef 8511 	mrs	r5, BASEPRI
 80052e0:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
 80052e4:	4c19      	ldr	r4, [pc, #100]	; (800534c <_init_static_threads+0x90>)
 80052e6:	42b4      	cmp	r4, r6
 80052e8:	d322      	bcc.n	8005330 <_init_static_threads+0x74>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80052ea:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
 80052ee:	b007      	add	sp, #28
 80052f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 80052f4:	f7ff bdbe 	b.w	8004e74 <k_sched_unlock>
		_setup_new_thread(
 80052f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80052fc:	9305      	str	r3, [sp, #20]
 80052fe:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8005302:	9304      	str	r3, [sp, #16]
 8005304:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8005308:	9303      	str	r3, [sp, #12]
 800530a:	f854 3c18 	ldr.w	r3, [r4, #-24]
 800530e:	9302      	str	r3, [sp, #8]
 8005310:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8005314:	9301      	str	r3, [sp, #4]
 8005316:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
 8005320:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8005322:	f7ff ff91 	bl	8005248 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8005326:	f854 3c30 	ldr.w	r3, [r4, #-48]
 800532a:	64dd      	str	r5, [r3, #76]	; 0x4c
 800532c:	4625      	mov	r5, r4
 800532e:	e7ca      	b.n	80052c6 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
 8005330:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005332:	1c4b      	adds	r3, r1, #1
 8005334:	d003      	beq.n	800533e <_init_static_threads+0x82>
			schedule_new_thread(thread_data->init_thread,
 8005336:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
 8005338:	b919      	cbnz	r1, 8005342 <_init_static_threads+0x86>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
 800533a:	f7ff ff6d 	bl	8005218 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 800533e:	3430      	adds	r4, #48	; 0x30
 8005340:	e7d1      	b.n	80052e6 <_init_static_threads+0x2a>
 8005342:	f7ff ff31 	bl	80051a8 <schedule_new_thread.part.8>
 8005346:	e7fa      	b.n	800533e <_init_static_threads+0x82>
 8005348:	20001468 	.word	0x20001468
 800534c:	20001468 	.word	0x20001468
 8005350:	20000308 	.word	0x20000308

08005354 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
 8005354:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	73c3      	strb	r3, [r0, #15]
	t->dticks = _INACTIVE;
 800535a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	thread_base->thread_state = (u8_t)initial_state;
 800535e:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
 8005360:	7381      	strb	r1, [r0, #14]
 8005362:	6203      	str	r3, [r0, #32]
 8005364:	4770      	bx	lr
	...

08005368 <elapsed>:
	t->dticks = _INACTIVE;
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
 8005368:	4b03      	ldr	r3, [pc, #12]	; (8005378 <elapsed+0x10>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	b90b      	cbnz	r3, 8005372 <elapsed+0xa>
 800536e:	f7fe bc63 	b.w	8003c38 <z_clock_elapsed>
}
 8005372:	2000      	movs	r0, #0
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	200002f8 	.word	0x200002f8

0800537c <k_spin_lock.isra.1>:
	__asm__ volatile(
 800537c:	f04f 0310 	mov.w	r3, #16
 8005380:	f3ef 8011 	mrs	r0, BASEPRI
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	4770      	bx	lr
	...

0800538c <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800538c:	b148      	cbz	r0, 80053a2 <remove_timeout+0x16>
	return (node == list->tail) ? NULL : node->next;
 800538e:	4b09      	ldr	r3, [pc, #36]	; (80053b4 <remove_timeout+0x28>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	4298      	cmp	r0, r3
 8005394:	d005      	beq.n	80053a2 <remove_timeout+0x16>
 8005396:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 8005398:	b11b      	cbz	r3, 80053a2 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	6881      	ldr	r1, [r0, #8]
 800539e:	440a      	add	r2, r1
 80053a0:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
 80053a2:	e890 000c 	ldmia.w	r0, {r2, r3}
 80053a6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 80053a8:	6802      	ldr	r2, [r0, #0]
 80053aa:	6053      	str	r3, [r2, #4]
	t->dticks = _INACTIVE;
 80053ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053b0:	6083      	str	r3, [r0, #8]
 80053b2:	4770      	bx	lr
 80053b4:	2000137c 	.word	0x2000137c

080053b8 <_abort_timeout>:
		}
	}
}

int _abort_timeout(struct _timeout *to)
{
 80053b8:	b510      	push	{r4, lr}
 80053ba:	4602      	mov	r2, r0
	int ret = _INACTIVE;

	LOCKED(&timeout_lock) {
 80053bc:	f7ff ffde 	bl	800537c <k_spin_lock.isra.1>
 80053c0:	4604      	mov	r4, r0
		if (to->dticks != _INACTIVE) {
 80053c2:	6890      	ldr	r0, [r2, #8]
 80053c4:	1c43      	adds	r3, r0, #1
 80053c6:	d003      	beq.n	80053d0 <_abort_timeout+0x18>
			remove_timeout(to);
 80053c8:	4610      	mov	r0, r2
 80053ca:	f7ff ffdf 	bl	800538c <remove_timeout>
			ret = 0;
 80053ce:	2000      	movs	r0, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80053d0:	f384 8811 	msr	BASEPRI, r4
		}
	}

	return ret;
}
 80053d4:	bd10      	pop	{r4, pc}
	...

080053d8 <_get_next_timeout_expiry>:
}

s32_t _get_next_timeout_expiry(void)
{
	s32_t ret = 0;
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
 80053d8:	4b13      	ldr	r3, [pc, #76]	; (8005428 <_get_next_timeout_expiry+0x50>)
 80053da:	781b      	ldrb	r3, [r3, #0]
{
 80053dc:	b570      	push	{r4, r5, r6, lr}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
 80053de:	2b00      	cmp	r3, #0
 80053e0:	bf14      	ite	ne
 80053e2:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80053e6:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000

	LOCKED(&timeout_lock) {
 80053ea:	f7ff ffc7 	bl	800537c <k_spin_lock.isra.1>
	return list->head == list;
 80053ee:	4b0f      	ldr	r3, [pc, #60]	; (800542c <_get_next_timeout_expiry+0x54>)
 80053f0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80053f2:	429c      	cmp	r4, r3
 80053f4:	4606      	mov	r6, r0
 80053f6:	d00a      	beq.n	800540e <_get_next_timeout_expiry+0x36>
		struct _timeout *to = first();

		ret = to == NULL ? maxw : max(0, to->dticks - elapsed());
 80053f8:	b14c      	cbz	r4, 800540e <_get_next_timeout_expiry+0x36>
 80053fa:	68a5      	ldr	r5, [r4, #8]
 80053fc:	f7ff ffb4 	bl	8005368 <elapsed>
 8005400:	1a28      	subs	r0, r5, r0
 8005402:	2800      	cmp	r0, #0
 8005404:	db0d      	blt.n	8005422 <_get_next_timeout_expiry+0x4a>
 8005406:	68a4      	ldr	r4, [r4, #8]
 8005408:	f7ff ffae 	bl	8005368 <elapsed>
 800540c:	1a22      	subs	r2, r4, r0
 800540e:	f386 8811 	msr	BASEPRI, r6
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8005412:	4b07      	ldr	r3, [pc, #28]	; (8005430 <_get_next_timeout_expiry+0x58>)
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	b113      	cbz	r3, 800541e <_get_next_timeout_expiry+0x46>
 8005418:	429a      	cmp	r2, r3
 800541a:	bfa8      	it	ge
 800541c:	461a      	movge	r2, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 800541e:	4610      	mov	r0, r2
 8005420:	bd70      	pop	{r4, r5, r6, pc}
		ret = to == NULL ? maxw : max(0, to->dticks - elapsed());
 8005422:	2200      	movs	r2, #0
 8005424:	e7f3      	b.n	800540e <_get_next_timeout_expiry+0x36>
 8005426:	bf00      	nop
 8005428:	200002fc 	.word	0x200002fc
 800542c:	2000137c 	.word	0x2000137c
 8005430:	20000308 	.word	0x20000308

08005434 <_add_timeout>:
{
 8005434:	b570      	push	{r4, r5, r6, lr}
	to->fn = fn;
 8005436:	60c1      	str	r1, [r0, #12]
{
 8005438:	4616      	mov	r6, r2
 800543a:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 800543c:	f7ff ff9e 	bl	800537c <k_spin_lock.isra.1>
 8005440:	4605      	mov	r5, r0
		to->dticks = ticks + elapsed();
 8005442:	f7ff ff91 	bl	8005368 <elapsed>
	return list->head == list;
 8005446:	4a18      	ldr	r2, [pc, #96]	; (80054a8 <_add_timeout+0x74>)
 8005448:	6813      	ldr	r3, [r2, #0]
 800544a:	2e01      	cmp	r6, #1
 800544c:	bfac      	ite	ge
 800544e:	1980      	addge	r0, r0, r6
 8005450:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005452:	4293      	cmp	r3, r2
 8005454:	60a0      	str	r0, [r4, #8]
 8005456:	d001      	beq.n	800545c <_add_timeout+0x28>
 8005458:	6856      	ldr	r6, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
 800545a:	b933      	cbnz	r3, 800546a <_add_timeout+0x36>
	node->next = list;
 800545c:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
 800545e:	6853      	ldr	r3, [r2, #4]
 8005460:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 8005462:	6853      	ldr	r3, [r2, #4]
 8005464:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8005466:	6054      	str	r4, [r2, #4]
 8005468:	e00b      	b.n	8005482 <_add_timeout+0x4e>
			if (t->dticks > to->dticks) {
 800546a:	6898      	ldr	r0, [r3, #8]
 800546c:	68a1      	ldr	r1, [r4, #8]
 800546e:	4288      	cmp	r0, r1
 8005470:	dd14      	ble.n	800549c <_add_timeout+0x68>
				t->dticks -= to->dticks;
 8005472:	1a41      	subs	r1, r0, r1
 8005474:	6099      	str	r1, [r3, #8]
		node->prev = insert_point->prev;
 8005476:	6859      	ldr	r1, [r3, #4]
 8005478:	6061      	str	r1, [r4, #4]
		node->next = insert_point;
 800547a:	6023      	str	r3, [r4, #0]
		insert_point->prev->next = node;
 800547c:	6859      	ldr	r1, [r3, #4]
 800547e:	600c      	str	r4, [r1, #0]
		insert_point->prev = node;
 8005480:	605c      	str	r4, [r3, #4]
	return list->head == list;
 8005482:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005484:	4293      	cmp	r3, r2
 8005486:	d006      	beq.n	8005496 <_add_timeout+0x62>
		if (to == first()) {
 8005488:	429c      	cmp	r4, r3
 800548a:	d104      	bne.n	8005496 <_add_timeout+0x62>
			z_clock_set_timeout(_get_next_timeout_expiry(), false);
 800548c:	f7ff ffa4 	bl	80053d8 <_get_next_timeout_expiry>
 8005490:	2100      	movs	r1, #0
 8005492:	f7fe fb89 	bl	8003ba8 <z_clock_set_timeout>
 8005496:	f385 8811 	msr	BASEPRI, r5
}
 800549a:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
 800549c:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 800549e:	42b3      	cmp	r3, r6
 80054a0:	60a1      	str	r1, [r4, #8]
 80054a2:	d0db      	beq.n	800545c <_add_timeout+0x28>
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	e7d8      	b.n	800545a <_add_timeout+0x26>
 80054a8:	2000137c 	.word	0x2000137c

080054ac <z_clock_announce>:
{
 80054ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	announce_remaining = ticks;
 80054b0:	4d21      	ldr	r5, [pc, #132]	; (8005538 <z_clock_announce+0x8c>)
	return list->head == list;
 80054b2:	4e22      	ldr	r6, [pc, #136]	; (800553c <z_clock_announce+0x90>)
					curr_tick += t->dticks;
 80054b4:	4f22      	ldr	r7, [pc, #136]	; (8005540 <z_clock_announce+0x94>)
{
 80054b6:	4604      	mov	r4, r0
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80054b8:	f04f 0800 	mov.w	r8, #0
	z_time_slice(ticks);
 80054bc:	f7ff fd66 	bl	8004f8c <z_time_slice>
	announce_remaining = ticks;
 80054c0:	602c      	str	r4, [r5, #0]
		LOCKED(&timeout_lock) {
 80054c2:	f7ff ff5b 	bl	800537c <k_spin_lock.isra.1>
	return list->head == list;
 80054c6:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80054c8:	42b4      	cmp	r4, r6
 80054ca:	4681      	mov	r9, r0
 80054cc:	d01b      	beq.n	8005506 <z_clock_announce+0x5a>
			if (t != NULL) {
 80054ce:	b18c      	cbz	r4, 80054f4 <z_clock_announce+0x48>
				if (t->dticks <= announce_remaining) {
 80054d0:	68a1      	ldr	r1, [r4, #8]
 80054d2:	682b      	ldr	r3, [r5, #0]
 80054d4:	4299      	cmp	r1, r3
 80054d6:	dc14      	bgt.n	8005502 <z_clock_announce+0x56>
					announce_remaining -= t->dticks;
 80054d8:	1a5b      	subs	r3, r3, r1
 80054da:	602b      	str	r3, [r5, #0]
					curr_tick += t->dticks;
 80054dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054e0:	1852      	adds	r2, r2, r1
 80054e2:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
					t->dticks = 0;
 80054e6:	f8c4 8008 	str.w	r8, [r4, #8]
					remove_timeout(t);
 80054ea:	4620      	mov	r0, r4
					curr_tick += t->dticks;
 80054ec:	e9c7 2300 	strd	r2, r3, [r7]
					remove_timeout(t);
 80054f0:	f7ff ff4c 	bl	800538c <remove_timeout>
 80054f4:	f389 8811 	msr	BASEPRI, r9
		if (t == NULL) {
 80054f8:	b13c      	cbz	r4, 800550a <z_clock_announce+0x5e>
		t->fn(t);
 80054fa:	68e3      	ldr	r3, [r4, #12]
 80054fc:	4620      	mov	r0, r4
 80054fe:	4798      	blx	r3
		LOCKED(&timeout_lock) {
 8005500:	e7df      	b.n	80054c2 <z_clock_announce+0x16>
					t->dticks -= announce_remaining;
 8005502:	1ac9      	subs	r1, r1, r3
 8005504:	60a1      	str	r1, [r4, #8]
 8005506:	2400      	movs	r4, #0
 8005508:	e7f4      	b.n	80054f4 <z_clock_announce+0x48>
	LOCKED(&timeout_lock) {
 800550a:	f7ff ff37 	bl	800537c <k_spin_lock.isra.1>
		curr_tick += announce_remaining;
 800550e:	490c      	ldr	r1, [pc, #48]	; (8005540 <z_clock_announce+0x94>)
 8005510:	e9d1 2300 	ldrd	r2, r3, [r1]
	LOCKED(&timeout_lock) {
 8005514:	4606      	mov	r6, r0
		curr_tick += announce_remaining;
 8005516:	6828      	ldr	r0, [r5, #0]
		announce_remaining = 0;
 8005518:	602c      	str	r4, [r5, #0]
		curr_tick += announce_remaining;
 800551a:	1812      	adds	r2, r2, r0
 800551c:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 8005520:	e9c1 2300 	strd	r2, r3, [r1]
		z_clock_set_timeout(_get_next_timeout_expiry(), false);
 8005524:	f7ff ff58 	bl	80053d8 <_get_next_timeout_expiry>
 8005528:	4621      	mov	r1, r4
 800552a:	f7fe fb3d 	bl	8003ba8 <z_clock_set_timeout>
 800552e:	f386 8811 	msr	BASEPRI, r6
 8005532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005536:	bf00      	nop
 8005538:	200002f8 	.word	0x200002f8
 800553c:	2000137c 	.word	0x2000137c
 8005540:	20000300 	.word	0x20000300

08005544 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
 8005544:	b570      	push	{r4, r5, r6, lr}
 8005546:	460e      	mov	r6, r1
 8005548:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 800554a:	f7ff ff17 	bl	800537c <k_spin_lock.isra.1>
 800554e:	4605      	mov	r5, r0
		int next = _get_next_timeout_expiry();
 8005550:	f7ff ff42 	bl	80053d8 <_get_next_timeout_expiry>

		if ((next == K_FOREVER) || (ticks < next)) {
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	d001      	beq.n	800555c <z_set_timeout_expiry+0x18>
 8005558:	42a0      	cmp	r0, r4
 800555a:	dd03      	ble.n	8005564 <z_set_timeout_expiry+0x20>
			z_clock_set_timeout(ticks, idle);
 800555c:	4631      	mov	r1, r6
 800555e:	4620      	mov	r0, r4
 8005560:	f7fe fb22 	bl	8003ba8 <z_clock_set_timeout>
 8005564:	f385 8811 	msr	BASEPRI, r5
 8005568:	bd70      	pop	{r4, r5, r6, pc}
	...

0800556c <z_tick_get>:
{
	can_wait_forever = 1;
}

s64_t z_tick_get(void)
{
 800556c:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
	u64_t t = 0;

	LOCKED(&timeout_lock) {
 8005570:	f7ff ff04 	bl	800537c <k_spin_lock.isra.1>
 8005574:	4604      	mov	r4, r0
		t = curr_tick + z_clock_elapsed();
 8005576:	f7fe fb5f 	bl	8003c38 <z_clock_elapsed>
 800557a:	4b06      	ldr	r3, [pc, #24]	; (8005594 <z_tick_get+0x28>)
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	eb12 0b00 	adds.w	fp, r2, r0
 8005584:	f143 0c00 	adc.w	ip, r3, #0
 8005588:	4658      	mov	r0, fp
 800558a:	4661      	mov	r1, ip
 800558c:	f384 8811 	msr	BASEPRI, r4
	}
	return t;
}
 8005590:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
 8005594:	20000300 	.word	0x20000300

08005598 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
 8005598:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
 800559a:	f7ff ffe7 	bl	800556c <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
 800559e:	bd08      	pop	{r3, pc}

080055a0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
 80055a0:	b508      	push	{r3, lr}
	__asm__ volatile(
 80055a2:	f04f 0210 	mov.w	r2, #16
 80055a6:	f3ef 8311 	mrs	r3, BASEPRI
 80055aa:	f382 8811 	msr	BASEPRI, r2
	s32_t ticks = _get_next_timeout_expiry();
 80055ae:	f7ff ff13 	bl	80053d8 <_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 80055b2:	2101      	movs	r1, #1
 80055b4:	2802      	cmp	r0, #2
 80055b6:	bfd8      	it	le
 80055b8:	4608      	movle	r0, r1
 80055ba:	f7ff ffc3 	bl	8005544 <z_set_timeout_expiry>
	k_cpu_idle();
 80055be:	f7fe fd55 	bl	800406c <k_cpu_idle>
 80055c2:	e7ee      	b.n	80055a2 <idle+0x2>

080055c4 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
 80055c4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
 80055c6:	4c07      	ldr	r4, [pc, #28]	; (80055e4 <init_static_pools+0x20>)
 80055c8:	4d07      	ldr	r5, [pc, #28]	; (80055e8 <init_static_pools+0x24>)
 80055ca:	42ac      	cmp	r4, r5
 80055cc:	d301      	bcc.n	80055d2 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
 80055ce:	2000      	movs	r0, #0
 80055d0:	bd38      	pop	{r3, r4, r5, pc}
 80055d2:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
 80055d6:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
 80055d8:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
 80055da:	4620      	mov	r0, r4
 80055dc:	f7fd fadd 	bl	8002b9a <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
 80055e0:	341c      	adds	r4, #28
 80055e2:	e7f2      	b.n	80055ca <init_static_pools+0x6>
 80055e4:	20001468 	.word	0x20001468
 80055e8:	20001468 	.word	0x20001468

080055ec <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
 80055ec:	4770      	bx	lr
