
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

08000000 <_vector_table>:
 8000000:	20000840 	.word	0x20000840
 8000004:	080045a5 	.word	0x080045a5
 8000008:	080045fd 	.word	0x080045fd
 800000c:	08004449 	.word	0x08004449
 8000010:	08004449 	.word	0x08004449
 8000014:	08004449 	.word	0x08004449
 8000018:	08004449 	.word	0x08004449
 800001c:	08004449 	.word	0x08004449
 8000020:	08004449 	.word	0x08004449
 8000024:	08004449 	.word	0x08004449
 8000028:	08004449 	.word	0x08004449
 800002c:	080040e9 	.word	0x080040e9
 8000030:	08004449 	.word	0x08004449
 8000034:	08004449 	.word	0x08004449
 8000038:	080040a5 	.word	0x080040a5
 800003c:	08003ef9 	.word	0x08003ef9

08000040 <_irq_vector_table>:
 8000040:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 8000050:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 8000060:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 8000070:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 8000080:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 8000090:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 80000a0:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 80000b0:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 80000c0:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 80000d0:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 80000e0:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 80000f0:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 8000100:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 8000110:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 8000120:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 8000130:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 8000140:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 8000150:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 8000160:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 8000170:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 8000180:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 8000190:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 80001a0:	0800457d 0800457d 0800457d 0800457d     }E..}E..}E..}E..
 80001b0:	0800457d 0800457d 0800457d              }E..}E..}E..

Disassembly of section _TEXT_SECTION_NAME_2:

080001c0 <__aeabi_uldivmod>:
 80001c0:	b953      	cbnz	r3, 80001d8 <__aeabi_uldivmod+0x18>
 80001c2:	b94a      	cbnz	r2, 80001d8 <__aeabi_uldivmod+0x18>
 80001c4:	2900      	cmp	r1, #0
 80001c6:	bf08      	it	eq
 80001c8:	2800      	cmpeq	r0, #0
 80001ca:	bf1c      	itt	ne
 80001cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001d4:	f000 b97a 	b.w	80004cc <__aeabi_idiv0>
 80001d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e0:	f000 f806 	bl	80001f0 <__udivmoddi4>
 80001e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ec:	b004      	add	sp, #16
 80001ee:	4770      	bx	lr

080001f0 <__udivmoddi4>:
 80001f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f4:	468c      	mov	ip, r1
 80001f6:	460d      	mov	r5, r1
 80001f8:	4604      	mov	r4, r0
 80001fa:	9e08      	ldr	r6, [sp, #32]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d151      	bne.n	80002a4 <__udivmoddi4+0xb4>
 8000200:	428a      	cmp	r2, r1
 8000202:	4617      	mov	r7, r2
 8000204:	d96d      	bls.n	80002e2 <__udivmoddi4+0xf2>
 8000206:	fab2 fe82 	clz	lr, r2
 800020a:	f1be 0f00 	cmp.w	lr, #0
 800020e:	d00b      	beq.n	8000228 <__udivmoddi4+0x38>
 8000210:	f1ce 0c20 	rsb	ip, lr, #32
 8000214:	fa01 f50e 	lsl.w	r5, r1, lr
 8000218:	fa20 fc0c 	lsr.w	ip, r0, ip
 800021c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000220:	ea4c 0c05 	orr.w	ip, ip, r5
 8000224:	fa00 f40e 	lsl.w	r4, r0, lr
 8000228:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800022c:	0c25      	lsrs	r5, r4, #16
 800022e:	fbbc f8fa 	udiv	r8, ip, sl
 8000232:	fa1f f987 	uxth.w	r9, r7
 8000236:	fb0a cc18 	mls	ip, sl, r8, ip
 800023a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800023e:	fb08 f309 	mul.w	r3, r8, r9
 8000242:	42ab      	cmp	r3, r5
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x6c>
 8000246:	19ed      	adds	r5, r5, r7
 8000248:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800024c:	f080 8123 	bcs.w	8000496 <__udivmoddi4+0x2a6>
 8000250:	42ab      	cmp	r3, r5
 8000252:	f240 8120 	bls.w	8000496 <__udivmoddi4+0x2a6>
 8000256:	f1a8 0802 	sub.w	r8, r8, #2
 800025a:	443d      	add	r5, r7
 800025c:	1aed      	subs	r5, r5, r3
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb5 f0fa 	udiv	r0, r5, sl
 8000264:	fb0a 5510 	mls	r5, sl, r0, r5
 8000268:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800026c:	fb00 f909 	mul.w	r9, r0, r9
 8000270:	45a1      	cmp	r9, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x98>
 8000274:	19e4      	adds	r4, r4, r7
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 810a 	bcs.w	8000492 <__udivmoddi4+0x2a2>
 800027e:	45a1      	cmp	r9, r4
 8000280:	f240 8107 	bls.w	8000492 <__udivmoddi4+0x2a2>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	eba4 0409 	sub.w	r4, r4, r9
 800028c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000290:	2100      	movs	r1, #0
 8000292:	2e00      	cmp	r6, #0
 8000294:	d061      	beq.n	800035a <__udivmoddi4+0x16a>
 8000296:	fa24 f40e 	lsr.w	r4, r4, lr
 800029a:	2300      	movs	r3, #0
 800029c:	6034      	str	r4, [r6, #0]
 800029e:	6073      	str	r3, [r6, #4]
 80002a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d907      	bls.n	80002b8 <__udivmoddi4+0xc8>
 80002a8:	2e00      	cmp	r6, #0
 80002aa:	d054      	beq.n	8000356 <__udivmoddi4+0x166>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e886 0021 	stmia.w	r6, {r0, r5}
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	f040 808e 	bne.w	80003de <__udivmoddi4+0x1ee>
 80002c2:	42ab      	cmp	r3, r5
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xdc>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2d0>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb65 0503 	sbc.w	r5, r5, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	46ac      	mov	ip, r5
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d03f      	beq.n	800035a <__udivmoddi4+0x16a>
 80002da:	e886 1010 	stmia.w	r6, {r4, ip}
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	b912      	cbnz	r2, 80002ea <__udivmoddi4+0xfa>
 80002e4:	2701      	movs	r7, #1
 80002e6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002ea:	fab7 fe87 	clz	lr, r7
 80002ee:	f1be 0f00 	cmp.w	lr, #0
 80002f2:	d134      	bne.n	800035e <__udivmoddi4+0x16e>
 80002f4:	1beb      	subs	r3, r5, r7
 80002f6:	0c3a      	lsrs	r2, r7, #16
 80002f8:	fa1f fc87 	uxth.w	ip, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000302:	0c25      	lsrs	r5, r4, #16
 8000304:	fb02 3318 	mls	r3, r2, r8, r3
 8000308:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800030c:	fb0c f308 	mul.w	r3, ip, r8
 8000310:	42ab      	cmp	r3, r5
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x134>
 8000314:	19ed      	adds	r5, r5, r7
 8000316:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x132>
 800031c:	42ab      	cmp	r3, r5
 800031e:	f200 80d1 	bhi.w	80004c4 <__udivmoddi4+0x2d4>
 8000322:	4680      	mov	r8, r0
 8000324:	1aed      	subs	r5, r5, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb5 f0f2 	udiv	r0, r5, r2
 800032c:	fb02 5510 	mls	r5, r2, r0, r5
 8000330:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000334:	fb0c fc00 	mul.w	ip, ip, r0
 8000338:	45a4      	cmp	ip, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x15c>
 800033c:	19e4      	adds	r4, r4, r7
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x15a>
 8000344:	45a4      	cmp	ip, r4
 8000346:	f200 80b8 	bhi.w	80004ba <__udivmoddi4+0x2ca>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 040c 	sub.w	r4, r4, ip
 8000350:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000354:	e79d      	b.n	8000292 <__udivmoddi4+0xa2>
 8000356:	4631      	mov	r1, r6
 8000358:	4630      	mov	r0, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	f1ce 0420 	rsb	r4, lr, #32
 8000362:	fa05 f30e 	lsl.w	r3, r5, lr
 8000366:	fa07 f70e 	lsl.w	r7, r7, lr
 800036a:	fa20 f804 	lsr.w	r8, r0, r4
 800036e:	0c3a      	lsrs	r2, r7, #16
 8000370:	fa25 f404 	lsr.w	r4, r5, r4
 8000374:	ea48 0803 	orr.w	r8, r8, r3
 8000378:	fbb4 f1f2 	udiv	r1, r4, r2
 800037c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000380:	fb02 4411 	mls	r4, r2, r1, r4
 8000384:	fa1f fc87 	uxth.w	ip, r7
 8000388:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800038c:	fb01 f30c 	mul.w	r3, r1, ip
 8000390:	42ab      	cmp	r3, r5
 8000392:	fa00 f40e 	lsl.w	r4, r0, lr
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x1bc>
 8000398:	19ed      	adds	r5, r5, r7
 800039a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800039e:	f080 808a 	bcs.w	80004b6 <__udivmoddi4+0x2c6>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	f240 8087 	bls.w	80004b6 <__udivmoddi4+0x2c6>
 80003a8:	3902      	subs	r1, #2
 80003aa:	443d      	add	r5, r7
 80003ac:	1aeb      	subs	r3, r5, r3
 80003ae:	fa1f f588 	uxth.w	r5, r8
 80003b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003b6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003be:	fb00 f30c 	mul.w	r3, r0, ip
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1e6>
 80003c6:	19ed      	adds	r5, r5, r7
 80003c8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003cc:	d26f      	bcs.n	80004ae <__udivmoddi4+0x2be>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d96d      	bls.n	80004ae <__udivmoddi4+0x2be>
 80003d2:	3802      	subs	r0, #2
 80003d4:	443d      	add	r5, r7
 80003d6:	1aeb      	subs	r3, r5, r3
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	e78f      	b.n	80002fe <__udivmoddi4+0x10e>
 80003de:	f1c1 0720 	rsb	r7, r1, #32
 80003e2:	fa22 f807 	lsr.w	r8, r2, r7
 80003e6:	408b      	lsls	r3, r1
 80003e8:	fa05 f401 	lsl.w	r4, r5, r1
 80003ec:	ea48 0303 	orr.w	r3, r8, r3
 80003f0:	fa20 fe07 	lsr.w	lr, r0, r7
 80003f4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	ea4e 0e04 	orr.w	lr, lr, r4
 80003fe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000402:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000406:	fb0c 5519 	mls	r5, ip, r9, r5
 800040a:	fa1f f883 	uxth.w	r8, r3
 800040e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000412:	fb09 f408 	mul.w	r4, r9, r8
 8000416:	42ac      	cmp	r4, r5
 8000418:	fa02 f201 	lsl.w	r2, r2, r1
 800041c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x244>
 8000422:	18ed      	adds	r5, r5, r3
 8000424:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000428:	d243      	bcs.n	80004b2 <__udivmoddi4+0x2c2>
 800042a:	42ac      	cmp	r4, r5
 800042c:	d941      	bls.n	80004b2 <__udivmoddi4+0x2c2>
 800042e:	f1a9 0902 	sub.w	r9, r9, #2
 8000432:	441d      	add	r5, r3
 8000434:	1b2d      	subs	r5, r5, r4
 8000436:	fa1f fe8e 	uxth.w	lr, lr
 800043a:	fbb5 f0fc 	udiv	r0, r5, ip
 800043e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000442:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000446:	fb00 f808 	mul.w	r8, r0, r8
 800044a:	45a0      	cmp	r8, r4
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x26e>
 800044e:	18e4      	adds	r4, r4, r3
 8000450:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000454:	d229      	bcs.n	80004aa <__udivmoddi4+0x2ba>
 8000456:	45a0      	cmp	r8, r4
 8000458:	d927      	bls.n	80004aa <__udivmoddi4+0x2ba>
 800045a:	3802      	subs	r0, #2
 800045c:	441c      	add	r4, r3
 800045e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000462:	eba4 0408 	sub.w	r4, r4, r8
 8000466:	fba0 8902 	umull	r8, r9, r0, r2
 800046a:	454c      	cmp	r4, r9
 800046c:	46c6      	mov	lr, r8
 800046e:	464d      	mov	r5, r9
 8000470:	d315      	bcc.n	800049e <__udivmoddi4+0x2ae>
 8000472:	d012      	beq.n	800049a <__udivmoddi4+0x2aa>
 8000474:	b156      	cbz	r6, 800048c <__udivmoddi4+0x29c>
 8000476:	ebba 030e 	subs.w	r3, sl, lr
 800047a:	eb64 0405 	sbc.w	r4, r4, r5
 800047e:	fa04 f707 	lsl.w	r7, r4, r7
 8000482:	40cb      	lsrs	r3, r1
 8000484:	431f      	orrs	r7, r3
 8000486:	40cc      	lsrs	r4, r1
 8000488:	6037      	str	r7, [r6, #0]
 800048a:	6074      	str	r4, [r6, #4]
 800048c:	2100      	movs	r1, #0
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	4618      	mov	r0, r3
 8000494:	e6f8      	b.n	8000288 <__udivmoddi4+0x98>
 8000496:	4690      	mov	r8, r2
 8000498:	e6e0      	b.n	800025c <__udivmoddi4+0x6c>
 800049a:	45c2      	cmp	sl, r8
 800049c:	d2ea      	bcs.n	8000474 <__udivmoddi4+0x284>
 800049e:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a2:	eb69 0503 	sbc.w	r5, r9, r3
 80004a6:	3801      	subs	r0, #1
 80004a8:	e7e4      	b.n	8000474 <__udivmoddi4+0x284>
 80004aa:	4628      	mov	r0, r5
 80004ac:	e7d7      	b.n	800045e <__udivmoddi4+0x26e>
 80004ae:	4640      	mov	r0, r8
 80004b0:	e791      	b.n	80003d6 <__udivmoddi4+0x1e6>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e7be      	b.n	8000434 <__udivmoddi4+0x244>
 80004b6:	4601      	mov	r1, r0
 80004b8:	e778      	b.n	80003ac <__udivmoddi4+0x1bc>
 80004ba:	3802      	subs	r0, #2
 80004bc:	443c      	add	r4, r7
 80004be:	e745      	b.n	800034c <__udivmoddi4+0x15c>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xe6>
 80004c4:	f1a8 0802 	sub.w	r8, r8, #2
 80004c8:	443d      	add	r5, r7
 80004ca:	e72b      	b.n	8000324 <__udivmoddi4+0x134>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <gmtime_r>:
 80004d0:	6800      	ldr	r0, [r0, #0]
 80004d2:	4b65      	ldr	r3, [pc, #404]	; (8000668 <gmtime_r+0x198>)
 80004d4:	fb83 2300 	smull	r2, r3, r3, r0
 80004d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004dc:	4403      	add	r3, r0
 80004de:	4d63      	ldr	r5, [pc, #396]	; (800066c <gmtime_r+0x19c>)
 80004e0:	17c2      	asrs	r2, r0, #31
 80004e2:	ebc2 4323 	rsb	r3, r2, r3, asr #16
 80004e6:	fb05 0513 	mls	r5, r5, r3, r0
 80004ea:	2d00      	cmp	r5, #0
 80004ec:	f2c0 80b3 	blt.w	8000656 <gmtime_r+0x186>
 80004f0:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 80004f4:	f603 236c 	addw	r3, r3, #2668	; 0xa6c
 80004f8:	4e5d      	ldr	r6, [pc, #372]	; (8000670 <gmtime_r+0x1a0>)
 80004fa:	485e      	ldr	r0, [pc, #376]	; (8000674 <gmtime_r+0x1a4>)
 80004fc:	4a5e      	ldr	r2, [pc, #376]	; (8000678 <gmtime_r+0x1a8>)
 80004fe:	4c5f      	ldr	r4, [pc, #380]	; (800067c <gmtime_r+0x1ac>)
 8000500:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8000690 <gmtime_r+0x1c0>
 8000504:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8000694 <gmtime_r+0x1c4>
 8000508:	fb86 7603 	smull	r7, r6, r6, r3
 800050c:	17df      	asrs	r7, r3, #31
 800050e:	ebc7 36e6 	rsb	r6, r7, r6, asr #15
 8000512:	fb00 3006 	mla	r0, r0, r6, r3
 8000516:	0887      	lsrs	r7, r0, #2
 8000518:	fba2 8207 	umull	r8, r2, r2, r7
 800051c:	eb00 22d2 	add.w	r2, r0, r2, lsr #11
 8000520:	fba4 8707 	umull	r8, r7, r4, r7
 8000524:	ea4f 1810 	mov.w	r8, r0, lsr #4
 8000528:	eba2 12d7 	sub.w	r2, r2, r7, lsr #7
 800052c:	fbac c708 	umull	ip, r7, ip, r8
 8000530:	eba2 1217 	sub.w	r2, r2, r7, lsr #4
 8000534:	f8df c160 	ldr.w	ip, [pc, #352]	; 8000698 <gmtime_r+0x1c8>
 8000538:	4f51      	ldr	r7, [pc, #324]	; (8000680 <gmtime_r+0x1b0>)
 800053a:	fbae 8e02 	umull	r8, lr, lr, r2
 800053e:	fbac 9c02 	umull	r9, ip, ip, r2
 8000542:	eba2 080e 	sub.w	r8, r2, lr
 8000546:	0892      	lsrs	r2, r2, #2
 8000548:	eb0e 0e58 	add.w	lr, lr, r8, lsr #1
 800054c:	eb00 30dc 	add.w	r0, r0, ip, lsr #15
 8000550:	fba4 4202 	umull	r4, r2, r4, r2
 8000554:	eba0 12d2 	sub.w	r2, r0, r2, lsr #7
 8000558:	ea4f 241e 	mov.w	r4, lr, lsr #8
 800055c:	f240 106d 	movw	r0, #365	; 0x16d
 8000560:	fb00 2214 	mls	r2, r0, r4, r2
 8000564:	f8df 8134 	ldr.w	r8, [pc, #308]	; 800069c <gmtime_r+0x1cc>
 8000568:	fb87 0e05 	smull	r0, lr, r7, r5
 800056c:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8000570:	ea4f 7ce5 	mov.w	ip, r5, asr #31
 8000574:	44ae      	add	lr, r5
 8000576:	3002      	adds	r0, #2
 8000578:	ebcc 2eee 	rsb	lr, ip, lr, asr #11
 800057c:	4f41      	ldr	r7, [pc, #260]	; (8000684 <gmtime_r+0x1b4>)
 800057e:	f8c1 e008 	str.w	lr, [r1, #8]
 8000582:	f103 0c03 	add.w	ip, r3, #3
 8000586:	fba8 3000 	umull	r3, r0, r8, r0
 800058a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800058e:	fb03 551e 	mls	r5, r3, lr, r5
 8000592:	4b3d      	ldr	r3, [pc, #244]	; (8000688 <gmtime_r+0x1b8>)
 8000594:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80006a0 <gmtime_r+0x1d0>
 8000598:	fb87 e705 	smull	lr, r7, r7, r5
 800059c:	fb83 390c 	smull	r3, r9, r3, ip
 80005a0:	197b      	adds	r3, r7, r5
 80005a2:	f44f 77c8 	mov.w	r7, #400	; 0x190
 80005a6:	fb07 4606 	mla	r6, r7, r6, r4
 80005aa:	17ef      	asrs	r7, r5, #31
 80005ac:	44e1      	add	r9, ip
 80005ae:	ebc7 1363 	rsb	r3, r7, r3, asr #5
 80005b2:	ea4f 77ec 	mov.w	r7, ip, asr #31
 80005b6:	09c0      	lsrs	r0, r0, #7
 80005b8:	ebc7 07a9 	rsb	r7, r7, r9, asr #2
 80005bc:	2809      	cmp	r0, #9
 80005be:	eb00 0ec0 	add.w	lr, r0, r0, lsl #3
 80005c2:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 80005c6:	ebac 0707 	sub.w	r7, ip, r7
 80005ca:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80005ce:	bf8c      	ite	hi
 80005d0:	f06f 0c09 	mvnhi.w	ip, #9
 80005d4:	f04f 0c02 	movls.w	ip, #2
 80005d8:	4460      	add	r0, ip
 80005da:	f10e 0e02 	add.w	lr, lr, #2
 80005de:	ebc3 1c03 	rsb	ip, r3, r3, lsl #4
 80005e2:	fba8 8e0e 	umull	r8, lr, r8, lr
 80005e6:	eba5 058c 	sub.w	r5, r5, ip, lsl #2
 80005ea:	f102 0801 	add.w	r8, r2, #1
 80005ee:	2801      	cmp	r0, #1
 80005f0:	bf98      	it	ls
 80005f2:	3601      	addls	r6, #1
 80005f4:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
 80005f8:	eba8 0e9e 	sub.w	lr, r8, lr, lsr #2
 80005fc:	604b      	str	r3, [r1, #4]
 80005fe:	600d      	str	r5, [r1, #0]
 8000600:	618f      	str	r7, [r1, #24]
 8000602:	d225      	bcs.n	8000650 <gmtime_r+0x180>
 8000604:	07a3      	lsls	r3, r4, #30
 8000606:	d018      	beq.n	800063a <gmtime_r+0x16a>
 8000608:	4b20      	ldr	r3, [pc, #128]	; (800068c <gmtime_r+0x1bc>)
 800060a:	fba3 5304 	umull	r5, r3, r3, r4
 800060e:	09db      	lsrs	r3, r3, #7
 8000610:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8000614:	fb05 4413 	mls	r4, r5, r3, r4
 8000618:	fab4 f484 	clz	r4, r4
 800061c:	0964      	lsrs	r4, r4, #5
 800061e:	323b      	adds	r2, #59	; 0x3b
 8000620:	4422      	add	r2, r4
 8000622:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
 8000626:	2300      	movs	r3, #0
 8000628:	6108      	str	r0, [r1, #16]
 800062a:	614e      	str	r6, [r1, #20]
 800062c:	61ca      	str	r2, [r1, #28]
 800062e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8000632:	620b      	str	r3, [r1, #32]
 8000634:	4608      	mov	r0, r1
 8000636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <gmtime_r+0x1bc>)
 800063c:	fba3 5304 	umull	r5, r3, r3, r4
 8000640:	095b      	lsrs	r3, r3, #5
 8000642:	2564      	movs	r5, #100	; 0x64
 8000644:	fb05 4313 	mls	r3, r5, r3, r4
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0dd      	beq.n	8000608 <gmtime_r+0x138>
 800064c:	2401      	movs	r4, #1
 800064e:	e7e6      	b.n	800061e <gmtime_r+0x14e>
 8000650:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8000654:	e7e5      	b.n	8000622 <gmtime_r+0x152>
 8000656:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
 800065a:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 800065e:	f505 75c0 	add.w	r5, r5, #384	; 0x180
 8000662:	f603 236b 	addw	r3, r3, #2667	; 0xa6b
 8000666:	e747      	b.n	80004f8 <gmtime_r+0x28>
 8000668:	c22e4507 	.word	0xc22e4507
 800066c:	00015180 	.word	0x00015180
 8000670:	396b06bd 	.word	0x396b06bd
 8000674:	fffdc54f 	.word	0xfffdc54f
 8000678:	396b207f 	.word	0x396b207f
 800067c:	59c67cd9 	.word	0x59c67cd9
 8000680:	91a2b3c5 	.word	0x91a2b3c5
 8000684:	88888889 	.word	0x88888889
 8000688:	92492493 	.word	0x92492493
 800068c:	51eb851f 	.word	0x51eb851f
 8000690:	0072d641 	.word	0x0072d641
 8000694:	6719f361 	.word	0x6719f361
 8000698:	e5d32b1f 	.word	0xe5d32b1f
 800069c:	d62b80d7 	.word	0xd62b80d7
 80006a0:	cccccccd 	.word	0xcccccccd

080006a4 <memcpy>:
 80006a4:	4684      	mov	ip, r0
 80006a6:	ea41 0300 	orr.w	r3, r1, r0
 80006aa:	f013 0303 	ands.w	r3, r3, #3
 80006ae:	d16d      	bne.n	800078c <memcpy+0xe8>
 80006b0:	3a40      	subs	r2, #64	; 0x40
 80006b2:	d341      	bcc.n	8000738 <memcpy+0x94>
 80006b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006b8:	f840 3b04 	str.w	r3, [r0], #4
 80006bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006c0:	f840 3b04 	str.w	r3, [r0], #4
 80006c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006c8:	f840 3b04 	str.w	r3, [r0], #4
 80006cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006d0:	f840 3b04 	str.w	r3, [r0], #4
 80006d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006d8:	f840 3b04 	str.w	r3, [r0], #4
 80006dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006e0:	f840 3b04 	str.w	r3, [r0], #4
 80006e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006e8:	f840 3b04 	str.w	r3, [r0], #4
 80006ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80006f0:	f840 3b04 	str.w	r3, [r0], #4
 80006f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006f8:	f840 3b04 	str.w	r3, [r0], #4
 80006fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000700:	f840 3b04 	str.w	r3, [r0], #4
 8000704:	f851 3b04 	ldr.w	r3, [r1], #4
 8000708:	f840 3b04 	str.w	r3, [r0], #4
 800070c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000710:	f840 3b04 	str.w	r3, [r0], #4
 8000714:	f851 3b04 	ldr.w	r3, [r1], #4
 8000718:	f840 3b04 	str.w	r3, [r0], #4
 800071c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000720:	f840 3b04 	str.w	r3, [r0], #4
 8000724:	f851 3b04 	ldr.w	r3, [r1], #4
 8000728:	f840 3b04 	str.w	r3, [r0], #4
 800072c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000730:	f840 3b04 	str.w	r3, [r0], #4
 8000734:	3a40      	subs	r2, #64	; 0x40
 8000736:	d2bd      	bcs.n	80006b4 <memcpy+0x10>
 8000738:	3230      	adds	r2, #48	; 0x30
 800073a:	d311      	bcc.n	8000760 <memcpy+0xbc>
 800073c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000740:	f840 3b04 	str.w	r3, [r0], #4
 8000744:	f851 3b04 	ldr.w	r3, [r1], #4
 8000748:	f840 3b04 	str.w	r3, [r0], #4
 800074c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000750:	f840 3b04 	str.w	r3, [r0], #4
 8000754:	f851 3b04 	ldr.w	r3, [r1], #4
 8000758:	f840 3b04 	str.w	r3, [r0], #4
 800075c:	3a10      	subs	r2, #16
 800075e:	d2ed      	bcs.n	800073c <memcpy+0x98>
 8000760:	320c      	adds	r2, #12
 8000762:	d305      	bcc.n	8000770 <memcpy+0xcc>
 8000764:	f851 3b04 	ldr.w	r3, [r1], #4
 8000768:	f840 3b04 	str.w	r3, [r0], #4
 800076c:	3a04      	subs	r2, #4
 800076e:	d2f9      	bcs.n	8000764 <memcpy+0xc0>
 8000770:	3204      	adds	r2, #4
 8000772:	d008      	beq.n	8000786 <memcpy+0xe2>
 8000774:	07d2      	lsls	r2, r2, #31
 8000776:	bf1c      	itt	ne
 8000778:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800077c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000780:	d301      	bcc.n	8000786 <memcpy+0xe2>
 8000782:	880b      	ldrh	r3, [r1, #0]
 8000784:	8003      	strh	r3, [r0, #0]
 8000786:	4660      	mov	r0, ip
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	2a08      	cmp	r2, #8
 800078e:	d313      	bcc.n	80007b8 <memcpy+0x114>
 8000790:	078b      	lsls	r3, r1, #30
 8000792:	d08d      	beq.n	80006b0 <memcpy+0xc>
 8000794:	f010 0303 	ands.w	r3, r0, #3
 8000798:	d08a      	beq.n	80006b0 <memcpy+0xc>
 800079a:	f1c3 0304 	rsb	r3, r3, #4
 800079e:	1ad2      	subs	r2, r2, r3
 80007a0:	07db      	lsls	r3, r3, #31
 80007a2:	bf1c      	itt	ne
 80007a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80007a8:	f800 3b01 	strbne.w	r3, [r0], #1
 80007ac:	d380      	bcc.n	80006b0 <memcpy+0xc>
 80007ae:	f831 3b02 	ldrh.w	r3, [r1], #2
 80007b2:	f820 3b02 	strh.w	r3, [r0], #2
 80007b6:	e77b      	b.n	80006b0 <memcpy+0xc>
 80007b8:	3a04      	subs	r2, #4
 80007ba:	d3d9      	bcc.n	8000770 <memcpy+0xcc>
 80007bc:	3a01      	subs	r2, #1
 80007be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80007c2:	f800 3b01 	strb.w	r3, [r0], #1
 80007c6:	d2f9      	bcs.n	80007bc <memcpy+0x118>
 80007c8:	780b      	ldrb	r3, [r1, #0]
 80007ca:	7003      	strb	r3, [r0, #0]
 80007cc:	784b      	ldrb	r3, [r1, #1]
 80007ce:	7043      	strb	r3, [r0, #1]
 80007d0:	788b      	ldrb	r3, [r1, #2]
 80007d2:	7083      	strb	r3, [r0, #2]
 80007d4:	4660      	mov	r0, ip
 80007d6:	4770      	bx	lr

080007d8 <memset>:
 80007d8:	b470      	push	{r4, r5, r6}
 80007da:	0786      	lsls	r6, r0, #30
 80007dc:	d046      	beq.n	800086c <memset+0x94>
 80007de:	1e54      	subs	r4, r2, #1
 80007e0:	2a00      	cmp	r2, #0
 80007e2:	d041      	beq.n	8000868 <memset+0x90>
 80007e4:	b2ca      	uxtb	r2, r1
 80007e6:	4603      	mov	r3, r0
 80007e8:	e002      	b.n	80007f0 <memset+0x18>
 80007ea:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 80007ee:	d33b      	bcc.n	8000868 <memset+0x90>
 80007f0:	f803 2b01 	strb.w	r2, [r3], #1
 80007f4:	079d      	lsls	r5, r3, #30
 80007f6:	d1f8      	bne.n	80007ea <memset+0x12>
 80007f8:	2c03      	cmp	r4, #3
 80007fa:	d92e      	bls.n	800085a <memset+0x82>
 80007fc:	b2cd      	uxtb	r5, r1
 80007fe:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000802:	2c0f      	cmp	r4, #15
 8000804:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000808:	d919      	bls.n	800083e <memset+0x66>
 800080a:	f103 0210 	add.w	r2, r3, #16
 800080e:	4626      	mov	r6, r4
 8000810:	3e10      	subs	r6, #16
 8000812:	2e0f      	cmp	r6, #15
 8000814:	f842 5c10 	str.w	r5, [r2, #-16]
 8000818:	f842 5c0c 	str.w	r5, [r2, #-12]
 800081c:	f842 5c08 	str.w	r5, [r2, #-8]
 8000820:	f842 5c04 	str.w	r5, [r2, #-4]
 8000824:	f102 0210 	add.w	r2, r2, #16
 8000828:	d8f2      	bhi.n	8000810 <memset+0x38>
 800082a:	f1a4 0210 	sub.w	r2, r4, #16
 800082e:	f022 020f 	bic.w	r2, r2, #15
 8000832:	f004 040f 	and.w	r4, r4, #15
 8000836:	3210      	adds	r2, #16
 8000838:	2c03      	cmp	r4, #3
 800083a:	4413      	add	r3, r2
 800083c:	d90d      	bls.n	800085a <memset+0x82>
 800083e:	461e      	mov	r6, r3
 8000840:	4622      	mov	r2, r4
 8000842:	3a04      	subs	r2, #4
 8000844:	2a03      	cmp	r2, #3
 8000846:	f846 5b04 	str.w	r5, [r6], #4
 800084a:	d8fa      	bhi.n	8000842 <memset+0x6a>
 800084c:	1f22      	subs	r2, r4, #4
 800084e:	f022 0203 	bic.w	r2, r2, #3
 8000852:	3204      	adds	r2, #4
 8000854:	4413      	add	r3, r2
 8000856:	f004 0403 	and.w	r4, r4, #3
 800085a:	b12c      	cbz	r4, 8000868 <memset+0x90>
 800085c:	b2c9      	uxtb	r1, r1
 800085e:	441c      	add	r4, r3
 8000860:	f803 1b01 	strb.w	r1, [r3], #1
 8000864:	429c      	cmp	r4, r3
 8000866:	d1fb      	bne.n	8000860 <memset+0x88>
 8000868:	bc70      	pop	{r4, r5, r6}
 800086a:	4770      	bx	lr
 800086c:	4614      	mov	r4, r2
 800086e:	4603      	mov	r3, r0
 8000870:	e7c2      	b.n	80007f8 <memset+0x20>
 8000872:	bf00      	nop

08000874 <validate_structure>:
 8000874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000878:	6801      	ldr	r1, [r0, #0]
 800087a:	293b      	cmp	r1, #59	; 0x3b
 800087c:	b082      	sub	sp, #8
 800087e:	4604      	mov	r4, r0
 8000880:	f200 80b6 	bhi.w	80009f0 <validate_structure+0x17c>
 8000884:	6841      	ldr	r1, [r0, #4]
 8000886:	293b      	cmp	r1, #59	; 0x3b
 8000888:	f200 80a5 	bhi.w	80009d6 <validate_structure+0x162>
 800088c:	68a1      	ldr	r1, [r4, #8]
 800088e:	2917      	cmp	r1, #23
 8000890:	f200 8094 	bhi.w	80009bc <validate_structure+0x148>
 8000894:	6921      	ldr	r1, [r4, #16]
 8000896:	290b      	cmp	r1, #11
 8000898:	f200 8083 	bhi.w	80009a2 <validate_structure+0x12e>
 800089c:	6963      	ldr	r3, [r4, #20]
 800089e:	079f      	lsls	r7, r3, #30
 80008a0:	d133      	bne.n	800090a <validate_structure+0x96>
 80008a2:	4874      	ldr	r0, [pc, #464]	; (8000a74 <validate_structure+0x200>)
 80008a4:	17da      	asrs	r2, r3, #31
 80008a6:	fb80 6503 	smull	r6, r5, r0, r3
 80008aa:	ebc2 1265 	rsb	r2, r2, r5, asr #5
 80008ae:	2564      	movs	r5, #100	; 0x64
 80008b0:	fb05 3212 	mls	r2, r5, r2, r3
 80008b4:	2a00      	cmp	r2, #0
 80008b6:	d064      	beq.n	8000982 <validate_structure+0x10e>
 80008b8:	68e3      	ldr	r3, [r4, #12]
 80008ba:	4d6f      	ldr	r5, [pc, #444]	; (8000a78 <validate_structure+0x204>)
 80008bc:	2b00      	cmp	r3, #0
 80008be:	f04f 061d 	mov.w	r6, #29
 80008c2:	dc27      	bgt.n	8000914 <validate_structure+0xa0>
 80008c4:	4f6b      	ldr	r7, [pc, #428]	; (8000a74 <validate_structure+0x200>)
 80008c6:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80008ca:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80008ce:	e007      	b.n	80008e0 <validate_structure+0x6c>
 80008d0:	2901      	cmp	r1, #1
 80008d2:	bf14      	ite	ne
 80008d4:	f855 2021 	ldrne.w	r2, [r5, r1, lsl #2]
 80008d8:	4632      	moveq	r2, r6
 80008da:	4413      	add	r3, r2
 80008dc:	2b00      	cmp	r3, #0
 80008de:	dc37      	bgt.n	8000950 <validate_structure+0xdc>
 80008e0:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
 80008e4:	d2f4      	bcs.n	80008d0 <validate_structure+0x5c>
 80008e6:	6961      	ldr	r1, [r4, #20]
 80008e8:	1e4a      	subs	r2, r1, #1
 80008ea:	0796      	lsls	r6, r2, #30
 80008ec:	6162      	str	r2, [r4, #20]
 80008ee:	f040 808c 	bne.w	8000a0a <validate_structure+0x196>
 80008f2:	fb87 0602 	smull	r0, r6, r7, r2
 80008f6:	17d0      	asrs	r0, r2, #31
 80008f8:	ebc0 1066 	rsb	r0, r0, r6, asr #5
 80008fc:	fb0e 2210 	mls	r2, lr, r0, r2
 8000900:	2a00      	cmp	r2, #0
 8000902:	f000 8086 	beq.w	8000a12 <validate_structure+0x19e>
 8000906:	261d      	movs	r6, #29
 8000908:	e080      	b.n	8000a0c <validate_structure+0x198>
 800090a:	261c      	movs	r6, #28
 800090c:	68e3      	ldr	r3, [r4, #12]
 800090e:	4d5a      	ldr	r5, [pc, #360]	; (8000a78 <validate_structure+0x204>)
 8000910:	2b00      	cmp	r3, #0
 8000912:	ddd7      	ble.n	80008c4 <validate_structure+0x50>
 8000914:	f8df e15c 	ldr.w	lr, [pc, #348]	; 8000a74 <validate_structure+0x200>
 8000918:	2700      	movs	r7, #0
 800091a:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800091e:	f44f 78c8 	mov.w	r8, #400	; 0x190
 8000922:	1c4a      	adds	r2, r1, #1
 8000924:	e00b      	b.n	800093e <validate_structure+0xca>
 8000926:	f855 0021 	ldr.w	r0, [r5, r1, lsl #2]
 800092a:	4298      	cmp	r0, r3
 800092c:	eba3 0300 	sub.w	r3, r3, r0
 8000930:	da10      	bge.n	8000954 <validate_structure+0xe0>
 8000932:	2a0c      	cmp	r2, #12
 8000934:	60e3      	str	r3, [r4, #12]
 8000936:	6122      	str	r2, [r4, #16]
 8000938:	d00f      	beq.n	800095a <validate_structure+0xe6>
 800093a:	3101      	adds	r1, #1
 800093c:	3201      	adds	r2, #1
 800093e:	2901      	cmp	r1, #1
 8000940:	d1f1      	bne.n	8000926 <validate_structure+0xb2>
 8000942:	429e      	cmp	r6, r3
 8000944:	eba3 0306 	sub.w	r3, r3, r6
 8000948:	da04      	bge.n	8000954 <validate_structure+0xe0>
 800094a:	60e3      	str	r3, [r4, #12]
 800094c:	6122      	str	r2, [r4, #16]
 800094e:	e7f4      	b.n	800093a <validate_structure+0xc6>
 8000950:	6121      	str	r1, [r4, #16]
 8000952:	60e3      	str	r3, [r4, #12]
 8000954:	b002      	add	sp, #8
 8000956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800095a:	6961      	ldr	r1, [r4, #20]
 800095c:	6127      	str	r7, [r4, #16]
 800095e:	1c4a      	adds	r2, r1, #1
 8000960:	0790      	lsls	r0, r2, #30
 8000962:	6162      	str	r2, [r4, #20]
 8000964:	d002      	beq.n	800096c <validate_structure+0xf8>
 8000966:	261c      	movs	r6, #28
 8000968:	2100      	movs	r1, #0
 800096a:	e7da      	b.n	8000922 <validate_structure+0xae>
 800096c:	fb8e 0602 	smull	r0, r6, lr, r2
 8000970:	17d0      	asrs	r0, r2, #31
 8000972:	ebc0 1066 	rsb	r0, r0, r6, asr #5
 8000976:	fb0c 2210 	mls	r2, ip, r0, r2
 800097a:	2a00      	cmp	r2, #0
 800097c:	d057      	beq.n	8000a2e <validate_structure+0x1ba>
 800097e:	261d      	movs	r6, #29
 8000980:	e7f2      	b.n	8000968 <validate_structure+0xf4>
 8000982:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8000986:	fb80 2003 	smull	r2, r0, r0, r3
 800098a:	17da      	asrs	r2, r3, #31
 800098c:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
 8000990:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000994:	fb02 3310 	mls	r3, r2, r0, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	bf14      	ite	ne
 800099c:	261c      	movne	r6, #28
 800099e:	261d      	moveq	r6, #29
 80009a0:	e7b4      	b.n	800090c <validate_structure+0x98>
 80009a2:	220c      	movs	r2, #12
 80009a4:	4668      	mov	r0, sp
 80009a6:	f000 ff35 	bl	8001814 <div>
 80009aa:	6963      	ldr	r3, [r4, #20]
 80009ac:	9a00      	ldr	r2, [sp, #0]
 80009ae:	9901      	ldr	r1, [sp, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	2900      	cmp	r1, #0
 80009b4:	6163      	str	r3, [r4, #20]
 80009b6:	db57      	blt.n	8000a68 <validate_structure+0x1f4>
 80009b8:	6121      	str	r1, [r4, #16]
 80009ba:	e770      	b.n	800089e <validate_structure+0x2a>
 80009bc:	2218      	movs	r2, #24
 80009be:	4668      	mov	r0, sp
 80009c0:	f000 ff28 	bl	8001814 <div>
 80009c4:	e89d 0006 	ldmia.w	sp, {r1, r2}
 80009c8:	68e3      	ldr	r3, [r4, #12]
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	440b      	add	r3, r1
 80009ce:	60e3      	str	r3, [r4, #12]
 80009d0:	db45      	blt.n	8000a5e <validate_structure+0x1ea>
 80009d2:	60a2      	str	r2, [r4, #8]
 80009d4:	e75e      	b.n	8000894 <validate_structure+0x20>
 80009d6:	223c      	movs	r2, #60	; 0x3c
 80009d8:	4668      	mov	r0, sp
 80009da:	f000 ff1b 	bl	8001814 <div>
 80009de:	68a2      	ldr	r2, [r4, #8]
 80009e0:	9900      	ldr	r1, [sp, #0]
 80009e2:	9b01      	ldr	r3, [sp, #4]
 80009e4:	4411      	add	r1, r2
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	60a1      	str	r1, [r4, #8]
 80009ea:	db33      	blt.n	8000a54 <validate_structure+0x1e0>
 80009ec:	6063      	str	r3, [r4, #4]
 80009ee:	e74e      	b.n	800088e <validate_structure+0x1a>
 80009f0:	223c      	movs	r2, #60	; 0x3c
 80009f2:	4668      	mov	r0, sp
 80009f4:	f000 ff0e 	bl	8001814 <div>
 80009f8:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80009fc:	6861      	ldr	r1, [r4, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	4411      	add	r1, r2
 8000a02:	6061      	str	r1, [r4, #4]
 8000a04:	db21      	blt.n	8000a4a <validate_structure+0x1d6>
 8000a06:	6023      	str	r3, [r4, #0]
 8000a08:	e73d      	b.n	8000886 <validate_structure+0x12>
 8000a0a:	261c      	movs	r6, #28
 8000a0c:	210b      	movs	r1, #11
 8000a0e:	221f      	movs	r2, #31
 8000a10:	e763      	b.n	80008da <validate_structure+0x66>
 8000a12:	f201 716b 	addw	r1, r1, #1899	; 0x76b
 8000a16:	fb87 2001 	smull	r2, r0, r7, r1
 8000a1a:	17ca      	asrs	r2, r1, #31
 8000a1c:	ebc2 12e0 	rsb	r2, r2, r0, asr #7
 8000a20:	fb0c 1112 	mls	r1, ip, r2, r1
 8000a24:	2900      	cmp	r1, #0
 8000a26:	bf14      	ite	ne
 8000a28:	261c      	movne	r6, #28
 8000a2a:	261d      	moveq	r6, #29
 8000a2c:	e7ee      	b.n	8000a0c <validate_structure+0x198>
 8000a2e:	f201 716d 	addw	r1, r1, #1901	; 0x76d
 8000a32:	fb8e 2001 	smull	r2, r0, lr, r1
 8000a36:	17ca      	asrs	r2, r1, #31
 8000a38:	ebc2 12e0 	rsb	r2, r2, r0, asr #7
 8000a3c:	fb08 1112 	mls	r1, r8, r2, r1
 8000a40:	2900      	cmp	r1, #0
 8000a42:	bf14      	ite	ne
 8000a44:	261c      	movne	r6, #28
 8000a46:	261d      	moveq	r6, #29
 8000a48:	e78e      	b.n	8000968 <validate_structure+0xf4>
 8000a4a:	333c      	adds	r3, #60	; 0x3c
 8000a4c:	3901      	subs	r1, #1
 8000a4e:	6023      	str	r3, [r4, #0]
 8000a50:	6061      	str	r1, [r4, #4]
 8000a52:	e718      	b.n	8000886 <validate_structure+0x12>
 8000a54:	333c      	adds	r3, #60	; 0x3c
 8000a56:	3901      	subs	r1, #1
 8000a58:	6063      	str	r3, [r4, #4]
 8000a5a:	60a1      	str	r1, [r4, #8]
 8000a5c:	e717      	b.n	800088e <validate_structure+0x1a>
 8000a5e:	3218      	adds	r2, #24
 8000a60:	3b01      	subs	r3, #1
 8000a62:	60a2      	str	r2, [r4, #8]
 8000a64:	60e3      	str	r3, [r4, #12]
 8000a66:	e715      	b.n	8000894 <validate_structure+0x20>
 8000a68:	310c      	adds	r1, #12
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	6121      	str	r1, [r4, #16]
 8000a6e:	6163      	str	r3, [r4, #20]
 8000a70:	e715      	b.n	800089e <validate_structure+0x2a>
 8000a72:	bf00      	nop
 8000a74:	51eb851f 	.word	0x51eb851f
 8000a78:	08005f30 	.word	0x08005f30

08000a7c <mktime>:
 8000a7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a80:	4606      	mov	r6, r0
 8000a82:	f000 ff29 	bl	80018d8 <__gettzinfo>
 8000a86:	4680      	mov	r8, r0
 8000a88:	4630      	mov	r0, r6
 8000a8a:	f7ff fef3 	bl	8000874 <validate_structure>
 8000a8e:	4ccf      	ldr	r4, [pc, #828]	; (8000dcc <mktime+0x350>)
 8000a90:	6937      	ldr	r7, [r6, #16]
 8000a92:	6873      	ldr	r3, [r6, #4]
 8000a94:	68f1      	ldr	r1, [r6, #12]
 8000a96:	6832      	ldr	r2, [r6, #0]
 8000a98:	68b0      	ldr	r0, [r6, #8]
 8000a9a:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8000a9e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8000aa2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8000aa4:	3901      	subs	r1, #1
 8000aa6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000aaa:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
 8000aae:	2f01      	cmp	r7, #1
 8000ab0:	440d      	add	r5, r1
 8000ab2:	fb0e 3e00 	mla	lr, lr, r0, r3
 8000ab6:	6971      	ldr	r1, [r6, #20]
 8000ab8:	dd02      	ble.n	8000ac0 <mktime+0x44>
 8000aba:	0788      	lsls	r0, r1, #30
 8000abc:	f000 80c8 	beq.w	8000c50 <mktime+0x1d4>
 8000ac0:	f501 531c 	add.w	r3, r1, #9984	; 0x2700
 8000ac4:	3310      	adds	r3, #16
 8000ac6:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000aca:	4293      	cmp	r3, r2
 8000acc:	61f5      	str	r5, [r6, #28]
 8000ace:	f200 8179 	bhi.w	8000dc4 <mktime+0x348>
 8000ad2:	2946      	cmp	r1, #70	; 0x46
 8000ad4:	f300 8093 	bgt.w	8000bfe <mktime+0x182>
 8000ad8:	f000 80f0 	beq.w	8000cbc <mktime+0x240>
 8000adc:	2945      	cmp	r1, #69	; 0x45
 8000ade:	f000 817f 	beq.w	8000de0 <mktime+0x364>
 8000ae2:	48bb      	ldr	r0, [pc, #748]	; (8000dd0 <mktime+0x354>)
 8000ae4:	2445      	movs	r4, #69	; 0x45
 8000ae6:	f240 196d 	movw	r9, #365	; 0x16d
 8000aea:	2764      	movs	r7, #100	; 0x64
 8000aec:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8000af0:	e016      	b.n	8000b20 <mktime+0xa4>
 8000af2:	f204 7a6c 	addw	sl, r4, #1900	; 0x76c
 8000af6:	fb80 2b0a 	smull	r2, fp, r0, sl
 8000afa:	ea4f 72ea 	mov.w	r2, sl, asr #31
 8000afe:	ebc2 12eb 	rsb	r2, r2, fp, asr #7
 8000b02:	fb0c a212 	mls	r2, ip, r2, sl
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f040 80d1 	bne.w	8000cae <mktime+0x232>
 8000b0c:	2a00      	cmp	r2, #0
 8000b0e:	bf14      	ite	ne
 8000b10:	464b      	movne	r3, r9
 8000b12:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8000b16:	3c01      	subs	r4, #1
 8000b18:	42a1      	cmp	r1, r4
 8000b1a:	eba5 0503 	sub.w	r5, r5, r3
 8000b1e:	d010      	beq.n	8000b42 <mktime+0xc6>
 8000b20:	fb80 2304 	smull	r2, r3, r0, r4
 8000b24:	17e2      	asrs	r2, r4, #31
 8000b26:	ebc2 1363 	rsb	r3, r2, r3, asr #5
 8000b2a:	f014 0f03 	tst.w	r4, #3
 8000b2e:	fb07 4313 	mls	r3, r7, r3, r4
 8000b32:	d0de      	beq.n	8000af2 <mktime+0x76>
 8000b34:	3c01      	subs	r4, #1
 8000b36:	f240 136d 	movw	r3, #365	; 0x16d
 8000b3a:	42a1      	cmp	r1, r4
 8000b3c:	eba5 0503 	sub.w	r5, r5, r3
 8000b40:	d1ee      	bne.n	8000b20 <mktime+0xa4>
 8000b42:	07a1      	lsls	r1, r4, #30
 8000b44:	f040 80e7 	bne.w	8000d16 <mktime+0x29a>
 8000b48:	4aa1      	ldr	r2, [pc, #644]	; (8000dd0 <mktime+0x354>)
 8000b4a:	17e3      	asrs	r3, r4, #31
 8000b4c:	fb82 0104 	smull	r0, r1, r2, r4
 8000b50:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8000b54:	2164      	movs	r1, #100	; 0x64
 8000b56:	fb01 4313 	mls	r3, r1, r3, r4
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f040 80f1 	bne.w	8000d42 <mktime+0x2c6>
 8000b60:	f204 716c 	addw	r1, r4, #1900	; 0x76c
 8000b64:	fb82 3201 	smull	r3, r2, r2, r1
 8000b68:	17cb      	asrs	r3, r1, #31
 8000b6a:	ebc3 12e2 	rsb	r2, r3, r2, asr #7
 8000b6e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b72:	fb03 1312 	mls	r3, r3, r2, r1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f240 136d 	movw	r3, #365	; 0x16d
 8000b7c:	bf08      	it	eq
 8000b7e:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8000b82:	1aed      	subs	r5, r5, r3
 8000b84:	4f93      	ldr	r7, [pc, #588]	; (8000dd4 <mktime+0x358>)
 8000b86:	fb07 e705 	mla	r7, r7, r5, lr
 8000b8a:	f000 fc89 	bl	80014a0 <__tz_lock>
 8000b8e:	f000 fc8b 	bl	80014a8 <_tzset_unlocked>
 8000b92:	4b91      	ldr	r3, [pc, #580]	; (8000dd8 <mktime+0x35c>)
 8000b94:	f8d3 9000 	ldr.w	r9, [r3]
 8000b98:	f1b9 0f00 	cmp.w	r9, #0
 8000b9c:	f000 808a 	beq.w	8000cb4 <mktime+0x238>
 8000ba0:	6a33      	ldr	r3, [r6, #32]
 8000ba2:	6970      	ldr	r0, [r6, #20]
 8000ba4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8000bae:	bfa8      	it	ge
 8000bb0:	2301      	movge	r3, #1
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	4699      	mov	r9, r3
 8000bb6:	d05a      	beq.n	8000c6e <mktime+0x1f2>
 8000bb8:	f000 fbb0 	bl	800131c <__tzcalc_limits>
 8000bbc:	2800      	cmp	r0, #0
 8000bbe:	d156      	bne.n	8000c6e <mktime+0x1f2>
 8000bc0:	f1b9 0f01 	cmp.w	r9, #1
 8000bc4:	f040 80b8 	bne.w	8000d38 <mktime+0x2bc>
 8000bc8:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
 8000bcc:	468a      	mov	sl, r1
 8000bce:	4457      	add	r7, sl
 8000bd0:	f04f 0901 	mov.w	r9, #1
 8000bd4:	f000 fc66 	bl	80014a4 <__tz_unlock>
 8000bd8:	4b80      	ldr	r3, [pc, #512]	; (8000ddc <mktime+0x360>)
 8000bda:	f8c6 9020 	str.w	r9, [r6, #32]
 8000bde:	3504      	adds	r5, #4
 8000be0:	fb83 2305 	smull	r2, r3, r3, r5
 8000be4:	195a      	adds	r2, r3, r5
 8000be6:	17eb      	asrs	r3, r5, #31
 8000be8:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8000bec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000bf0:	1aeb      	subs	r3, r5, r3
 8000bf2:	bf48      	it	mi
 8000bf4:	3307      	addmi	r3, #7
 8000bf6:	61b3      	str	r3, [r6, #24]
 8000bf8:	4638      	mov	r0, r7
 8000bfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bfe:	4874      	ldr	r0, [pc, #464]	; (8000dd0 <mktime+0x354>)
 8000c00:	2446      	movs	r4, #70	; 0x46
 8000c02:	f240 196d 	movw	r9, #365	; 0x16d
 8000c06:	2764      	movs	r7, #100	; 0x64
 8000c08:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8000c0c:	e013      	b.n	8000c36 <mktime+0x1ba>
 8000c0e:	f204 7a6c 	addw	sl, r4, #1900	; 0x76c
 8000c12:	fb80 2b0a 	smull	r2, fp, r0, sl
 8000c16:	ea4f 72ea 	mov.w	r2, sl, asr #31
 8000c1a:	ebc2 12eb 	rsb	r2, r2, fp, asr #7
 8000c1e:	fb0c a212 	mls	r2, ip, r2, sl
 8000c22:	bb0b      	cbnz	r3, 8000c68 <mktime+0x1ec>
 8000c24:	2a00      	cmp	r2, #0
 8000c26:	bf14      	ite	ne
 8000c28:	464b      	movne	r3, r9
 8000c2a:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8000c2e:	3401      	adds	r4, #1
 8000c30:	42a1      	cmp	r1, r4
 8000c32:	441d      	add	r5, r3
 8000c34:	d0a6      	beq.n	8000b84 <mktime+0x108>
 8000c36:	fb80 2304 	smull	r2, r3, r0, r4
 8000c3a:	17e2      	asrs	r2, r4, #31
 8000c3c:	ebc2 1363 	rsb	r3, r2, r3, asr #5
 8000c40:	f014 0f03 	tst.w	r4, #3
 8000c44:	fb07 4313 	mls	r3, r7, r3, r4
 8000c48:	d0e1      	beq.n	8000c0e <mktime+0x192>
 8000c4a:	f240 136d 	movw	r3, #365	; 0x16d
 8000c4e:	e7ee      	b.n	8000c2e <mktime+0x1b2>
 8000c50:	4a5f      	ldr	r2, [pc, #380]	; (8000dd0 <mktime+0x354>)
 8000c52:	17cb      	asrs	r3, r1, #31
 8000c54:	fb82 4001 	smull	r4, r0, r2, r1
 8000c58:	ebc3 1360 	rsb	r3, r3, r0, asr #5
 8000c5c:	2064      	movs	r0, #100	; 0x64
 8000c5e:	fb00 1313 	mls	r3, r0, r3, r1
 8000c62:	b36b      	cbz	r3, 8000cc0 <mktime+0x244>
 8000c64:	3501      	adds	r5, #1
 8000c66:	e72b      	b.n	8000ac0 <mktime+0x44>
 8000c68:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8000c6c:	e7df      	b.n	8000c2e <mktime+0x1b2>
 8000c6e:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8000c72:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8000c76:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
 8000c7a:	eba3 0c02 	sub.w	ip, r3, r2
 8000c7e:	4567      	cmp	r7, ip
 8000c80:	4610      	mov	r0, r2
 8000c82:	468a      	mov	sl, r1
 8000c84:	db02      	blt.n	8000c8c <mktime+0x210>
 8000c86:	1a5b      	subs	r3, r3, r1
 8000c88:	429f      	cmp	r7, r3
 8000c8a:	db99      	blt.n	8000bc0 <mktime+0x144>
 8000c8c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8000c90:	eba3 0e01 	sub.w	lr, r3, r1
 8000c94:	f8d8 3000 	ldr.w	r3, [r8]
 8000c98:	b30b      	cbz	r3, 8000cde <mktime+0x262>
 8000c9a:	4577      	cmp	r7, lr
 8000c9c:	da3e      	bge.n	8000d1c <mktime+0x2a0>
 8000c9e:	f1b9 0f00 	cmp.w	r9, #0
 8000ca2:	f280 80d0 	bge.w	8000e46 <mktime+0x3ca>
 8000ca6:	f04f 0900 	mov.w	r9, #0
 8000caa:	4407      	add	r7, r0
 8000cac:	e792      	b.n	8000bd4 <mktime+0x158>
 8000cae:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8000cb2:	e730      	b.n	8000b16 <mktime+0x9a>
 8000cb4:	f8d8 0020 	ldr.w	r0, [r8, #32]
 8000cb8:	4407      	add	r7, r0
 8000cba:	e78b      	b.n	8000bd4 <mktime+0x158>
 8000cbc:	460c      	mov	r4, r1
 8000cbe:	e761      	b.n	8000b84 <mktime+0x108>
 8000cc0:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8000cc4:	fb82 3200 	smull	r3, r2, r2, r0
 8000cc8:	17c3      	asrs	r3, r0, #31
 8000cca:	ebc3 12e2 	rsb	r2, r3, r2, asr #7
 8000cce:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000cd2:	fb03 0212 	mls	r2, r3, r2, r0
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f47f aef2 	bne.w	8000ac0 <mktime+0x44>
 8000cdc:	e7c2      	b.n	8000c64 <mktime+0x1e8>
 8000cde:	4577      	cmp	r7, lr
 8000ce0:	db1c      	blt.n	8000d1c <mktime+0x2a0>
 8000ce2:	f1b9 0f00 	cmp.w	r9, #0
 8000ce6:	f6ff af72 	blt.w	8000bce <mktime+0x152>
 8000cea:	f47f af6f 	bne.w	8000bcc <mktime+0x150>
 8000cee:	1a51      	subs	r1, r2, r1
 8000cf0:	6833      	ldr	r3, [r6, #0]
 8000cf2:	f8d6 900c 	ldr.w	r9, [r6, #12]
 8000cf6:	440b      	add	r3, r1
 8000cf8:	6033      	str	r3, [r6, #0]
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	440f      	add	r7, r1
 8000cfe:	f7ff fdb9 	bl	8000874 <validate_structure>
 8000d02:	68f3      	ldr	r3, [r6, #12]
 8000d04:	ebb3 0309 	subs.w	r3, r3, r9
 8000d08:	bf18      	it	ne
 8000d0a:	f04f 0901 	movne.w	r9, #1
 8000d0e:	d12e      	bne.n	8000d6e <mktime+0x2f2>
 8000d10:	f8d8 a03c 	ldr.w	sl, [r8, #60]	; 0x3c
 8000d14:	e75b      	b.n	8000bce <mktime+0x152>
 8000d16:	f240 136d 	movw	r3, #365	; 0x16d
 8000d1a:	e732      	b.n	8000b82 <mktime+0x106>
 8000d1c:	4567      	cmp	r7, ip
 8000d1e:	bfac      	ite	ge
 8000d20:	2300      	movge	r3, #0
 8000d22:	2301      	movlt	r3, #1
 8000d24:	f1b9 0f00 	cmp.w	r9, #0
 8000d28:	db04      	blt.n	8000d34 <mktime+0x2b8>
 8000d2a:	ea83 0909 	eor.w	r9, r3, r9
 8000d2e:	f1b9 0f01 	cmp.w	r9, #1
 8000d32:	d009      	beq.n	8000d48 <mktime+0x2cc>
 8000d34:	4699      	mov	r9, r3
 8000d36:	e743      	b.n	8000bc0 <mktime+0x144>
 8000d38:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8000d3c:	4610      	mov	r0, r2
 8000d3e:	4407      	add	r7, r0
 8000d40:	e748      	b.n	8000bd4 <mktime+0x158>
 8000d42:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8000d46:	e71c      	b.n	8000b82 <mktime+0x106>
 8000d48:	1a51      	subs	r1, r2, r1
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d1d0      	bne.n	8000cf0 <mktime+0x274>
 8000d4e:	6833      	ldr	r3, [r6, #0]
 8000d50:	f8d6 900c 	ldr.w	r9, [r6, #12]
 8000d54:	1a5b      	subs	r3, r3, r1
 8000d56:	6033      	str	r3, [r6, #0]
 8000d58:	4630      	mov	r0, r6
 8000d5a:	1a7f      	subs	r7, r7, r1
 8000d5c:	f7ff fd8a 	bl	8000874 <validate_structure>
 8000d60:	68f3      	ldr	r3, [r6, #12]
 8000d62:	ebb3 0909 	subs.w	r9, r3, r9
 8000d66:	d0a5      	beq.n	8000cb4 <mktime+0x238>
 8000d68:	464b      	mov	r3, r9
 8000d6a:	f04f 0900 	mov.w	r9, #0
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	dd3d      	ble.n	8000dee <mktime+0x372>
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d76:	69f2      	ldr	r2, [r6, #28]
 8000d78:	441d      	add	r5, r3
 8000d7a:	189b      	adds	r3, r3, r2
 8000d7c:	d43b      	bmi.n	8000df6 <mktime+0x37a>
 8000d7e:	07a2      	lsls	r2, r4, #30
 8000d80:	d132      	bne.n	8000de8 <mktime+0x36c>
 8000d82:	4913      	ldr	r1, [pc, #76]	; (8000dd0 <mktime+0x354>)
 8000d84:	17e2      	asrs	r2, r4, #31
 8000d86:	fb81 e004 	smull	lr, r0, r1, r4
 8000d8a:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 8000d8e:	2064      	movs	r0, #100	; 0x64
 8000d90:	fb00 4212 	mls	r2, r0, r2, r4
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	d14d      	bne.n	8000e34 <mktime+0x3b8>
 8000d98:	f204 746c 	addw	r4, r4, #1900	; 0x76c
 8000d9c:	fb81 2104 	smull	r2, r1, r1, r4
 8000da0:	17e2      	asrs	r2, r4, #31
 8000da2:	ebc2 12e1 	rsb	r2, r2, r1, asr #7
 8000da6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000daa:	fb01 4212 	mls	r2, r1, r2, r4
 8000dae:	2a00      	cmp	r2, #0
 8000db0:	f240 126d 	movw	r2, #365	; 0x16d
 8000db4:	bf08      	it	eq
 8000db6:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	bfd8      	it	le
 8000dbe:	1a9b      	suble	r3, r3, r2
 8000dc0:	61f3      	str	r3, [r6, #28]
 8000dc2:	e6fd      	b.n	8000bc0 <mktime+0x144>
 8000dc4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000dc8:	e716      	b.n	8000bf8 <mktime+0x17c>
 8000dca:	bf00      	nop
 8000dcc:	08005f30 	.word	0x08005f30
 8000dd0:	51eb851f 	.word	0x51eb851f
 8000dd4:	00015180 	.word	0x00015180
 8000dd8:	20000020 	.word	0x20000020
 8000ddc:	92492493 	.word	0x92492493
 8000de0:	460c      	mov	r4, r1
 8000de2:	f240 136d 	movw	r3, #365	; 0x16d
 8000de6:	e6cc      	b.n	8000b82 <mktime+0x106>
 8000de8:	f240 126d 	movw	r2, #365	; 0x16d
 8000dec:	e7e5      	b.n	8000dba <mktime+0x33e>
 8000dee:	1c9a      	adds	r2, r3, #2
 8000df0:	bfd8      	it	le
 8000df2:	2301      	movle	r3, #1
 8000df4:	e7bf      	b.n	8000d76 <mktime+0x2fa>
 8000df6:	1e61      	subs	r1, r4, #1
 8000df8:	0788      	lsls	r0, r1, #30
 8000dfa:	d11e      	bne.n	8000e3a <mktime+0x3be>
 8000dfc:	4a16      	ldr	r2, [pc, #88]	; (8000e58 <mktime+0x3dc>)
 8000dfe:	17cb      	asrs	r3, r1, #31
 8000e00:	fb82 e001 	smull	lr, r0, r2, r1
 8000e04:	ebc3 1360 	rsb	r3, r3, r0, asr #5
 8000e08:	2064      	movs	r0, #100	; 0x64
 8000e0a:	fb00 1313 	mls	r3, r0, r3, r1
 8000e0e:	b9bb      	cbnz	r3, 8000e40 <mktime+0x3c4>
 8000e10:	f204 746b 	addw	r4, r4, #1899	; 0x76b
 8000e14:	fb82 3204 	smull	r3, r2, r2, r4
 8000e18:	17e3      	asrs	r3, r4, #31
 8000e1a:	ebc3 13e2 	rsb	r3, r3, r2, asr #7
 8000e1e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000e22:	fb02 4313 	mls	r3, r2, r3, r4
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f240 136d 	movw	r3, #365	; 0x16d
 8000e2c:	bf18      	it	ne
 8000e2e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8000e32:	e7c5      	b.n	8000dc0 <mktime+0x344>
 8000e34:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8000e38:	e7bf      	b.n	8000dba <mktime+0x33e>
 8000e3a:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8000e3e:	e7bf      	b.n	8000dc0 <mktime+0x344>
 8000e40:	f240 136d 	movw	r3, #365	; 0x16d
 8000e44:	e7bc      	b.n	8000dc0 <mktime+0x344>
 8000e46:	f1b9 0f01 	cmp.w	r9, #1
 8000e4a:	d003      	beq.n	8000e54 <mktime+0x3d8>
 8000e4c:	f04f 0900 	mov.w	r9, #0
 8000e50:	4610      	mov	r0, r2
 8000e52:	e774      	b.n	8000d3e <mktime+0x2c2>
 8000e54:	1a51      	subs	r1, r2, r1
 8000e56:	e77a      	b.n	8000d4e <mktime+0x2d2>
 8000e58:	51eb851f 	.word	0x51eb851f

08000e5c <strcat>:
 8000e5c:	0783      	lsls	r3, r0, #30
 8000e5e:	b510      	push	{r4, lr}
 8000e60:	4604      	mov	r4, r0
 8000e62:	d110      	bne.n	8000e86 <strcat+0x2a>
 8000e64:	6802      	ldr	r2, [r0, #0]
 8000e66:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8000e6a:	ea23 0302 	bic.w	r3, r3, r2
 8000e6e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8000e72:	d108      	bne.n	8000e86 <strcat+0x2a>
 8000e74:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8000e78:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8000e7c:	ea23 0302 	bic.w	r3, r3, r2
 8000e80:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8000e84:	d0f6      	beq.n	8000e74 <strcat+0x18>
 8000e86:	7803      	ldrb	r3, [r0, #0]
 8000e88:	b11b      	cbz	r3, 8000e92 <strcat+0x36>
 8000e8a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1fb      	bne.n	8000e8a <strcat+0x2e>
 8000e92:	f000 f973 	bl	800117c <strcpy>
 8000e96:	4620      	mov	r0, r4
 8000e98:	bd10      	pop	{r4, pc}
 8000e9a:	bf00      	nop
 8000e9c:	0000      	movs	r0, r0
 8000e9e:	0000      	movs	r0, r0
 8000ea0:	eba2 0003 	sub.w	r0, r2, r3
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <strcmp>:
 8000ea8:	7802      	ldrb	r2, [r0, #0]
 8000eaa:	780b      	ldrb	r3, [r1, #0]
 8000eac:	2a01      	cmp	r2, #1
 8000eae:	bf28      	it	cs
 8000eb0:	429a      	cmpcs	r2, r3
 8000eb2:	d1f5      	bne.n	8000ea0 <strcat+0x44>
 8000eb4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000eb8:	ea40 0401 	orr.w	r4, r0, r1
 8000ebc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000ec0:	f06f 0c00 	mvn.w	ip, #0
 8000ec4:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000ec8:	b312      	cbz	r2, 8000f10 <strcmp+0x68>
 8000eca:	ea80 0401 	eor.w	r4, r0, r1
 8000ece:	f014 0f07 	tst.w	r4, #7
 8000ed2:	d16a      	bne.n	8000faa <strcmp+0x102>
 8000ed4:	f000 0407 	and.w	r4, r0, #7
 8000ed8:	f020 0007 	bic.w	r0, r0, #7
 8000edc:	f004 0503 	and.w	r5, r4, #3
 8000ee0:	f021 0107 	bic.w	r1, r1, #7
 8000ee4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000ee8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000eec:	f014 0f04 	tst.w	r4, #4
 8000ef0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000ef4:	fa0c f405 	lsl.w	r4, ip, r5
 8000ef8:	ea62 0204 	orn	r2, r2, r4
 8000efc:	ea66 0604 	orn	r6, r6, r4
 8000f00:	d00a      	beq.n	8000f18 <strcmp+0x70>
 8000f02:	ea63 0304 	orn	r3, r3, r4
 8000f06:	4662      	mov	r2, ip
 8000f08:	ea67 0704 	orn	r7, r7, r4
 8000f0c:	4666      	mov	r6, ip
 8000f0e:	e003      	b.n	8000f18 <strcmp+0x70>
 8000f10:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000f14:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000f18:	fa82 f54c 	uadd8	r5, r2, ip
 8000f1c:	ea82 0406 	eor.w	r4, r2, r6
 8000f20:	faa4 f48c 	sel	r4, r4, ip
 8000f24:	bb6c      	cbnz	r4, 8000f82 <strcmp+0xda>
 8000f26:	fa83 f54c 	uadd8	r5, r3, ip
 8000f2a:	ea83 0507 	eor.w	r5, r3, r7
 8000f2e:	faa5 f58c 	sel	r5, r5, ip
 8000f32:	b995      	cbnz	r5, 8000f5a <strcmp+0xb2>
 8000f34:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8000f38:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 8000f3c:	fa82 f54c 	uadd8	r5, r2, ip
 8000f40:	ea82 0406 	eor.w	r4, r2, r6
 8000f44:	faa4 f48c 	sel	r4, r4, ip
 8000f48:	fa83 f54c 	uadd8	r5, r3, ip
 8000f4c:	ea83 0507 	eor.w	r5, r3, r7
 8000f50:	faa5 f58c 	sel	r5, r5, ip
 8000f54:	4325      	orrs	r5, r4
 8000f56:	d0db      	beq.n	8000f10 <strcmp+0x68>
 8000f58:	b99c      	cbnz	r4, 8000f82 <strcmp+0xda>
 8000f5a:	ba2d      	rev	r5, r5
 8000f5c:	fab5 f485 	clz	r4, r5
 8000f60:	f024 0407 	bic.w	r4, r4, #7
 8000f64:	fa27 f104 	lsr.w	r1, r7, r4
 8000f68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000f6c:	fa23 f304 	lsr.w	r3, r3, r4
 8000f70:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000f74:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000f78:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000f7c:	eba0 0001 	sub.w	r0, r0, r1
 8000f80:	4770      	bx	lr
 8000f82:	ba24      	rev	r4, r4
 8000f84:	fab4 f484 	clz	r4, r4
 8000f88:	f024 0407 	bic.w	r4, r4, #7
 8000f8c:	fa26 f104 	lsr.w	r1, r6, r4
 8000f90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000f94:	fa22 f204 	lsr.w	r2, r2, r4
 8000f98:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8000f9c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000fa0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000fa4:	eba0 0001 	sub.w	r0, r0, r1
 8000fa8:	4770      	bx	lr
 8000faa:	f014 0f03 	tst.w	r4, #3
 8000fae:	d13c      	bne.n	800102a <strcmp+0x182>
 8000fb0:	f010 0403 	ands.w	r4, r0, #3
 8000fb4:	d128      	bne.n	8001008 <strcmp+0x160>
 8000fb6:	f850 2b08 	ldr.w	r2, [r0], #8
 8000fba:	f851 3b08 	ldr.w	r3, [r1], #8
 8000fbe:	fa82 f54c 	uadd8	r5, r2, ip
 8000fc2:	ea82 0503 	eor.w	r5, r2, r3
 8000fc6:	faa5 f58c 	sel	r5, r5, ip
 8000fca:	b95d      	cbnz	r5, 8000fe4 <strcmp+0x13c>
 8000fcc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fd4:	fa82 f54c 	uadd8	r5, r2, ip
 8000fd8:	ea82 0503 	eor.w	r5, r2, r3
 8000fdc:	faa5 f58c 	sel	r5, r5, ip
 8000fe0:	2d00      	cmp	r5, #0
 8000fe2:	d0e8      	beq.n	8000fb6 <strcmp+0x10e>
 8000fe4:	ba2d      	rev	r5, r5
 8000fe6:	fab5 f485 	clz	r4, r5
 8000fea:	f024 0407 	bic.w	r4, r4, #7
 8000fee:	fa23 f104 	lsr.w	r1, r3, r4
 8000ff2:	fa22 f204 	lsr.w	r2, r2, r4
 8000ff6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8000ffa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000ffe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001002:	eba0 0001 	sub.w	r0, r0, r1
 8001006:	4770      	bx	lr
 8001008:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800100c:	f020 0003 	bic.w	r0, r0, #3
 8001010:	f850 2b08 	ldr.w	r2, [r0], #8
 8001014:	f021 0103 	bic.w	r1, r1, #3
 8001018:	f851 3b08 	ldr.w	r3, [r1], #8
 800101c:	fa0c f404 	lsl.w	r4, ip, r4
 8001020:	ea62 0204 	orn	r2, r2, r4
 8001024:	ea63 0304 	orn	r3, r3, r4
 8001028:	e7c9      	b.n	8000fbe <strcmp+0x116>
 800102a:	f010 0403 	ands.w	r4, r0, #3
 800102e:	d01a      	beq.n	8001066 <strcmp+0x1be>
 8001030:	eba1 0104 	sub.w	r1, r1, r4
 8001034:	f020 0003 	bic.w	r0, r0, #3
 8001038:	07e4      	lsls	r4, r4, #31
 800103a:	f850 2b04 	ldr.w	r2, [r0], #4
 800103e:	d006      	beq.n	800104e <strcmp+0x1a6>
 8001040:	d20f      	bcs.n	8001062 <strcmp+0x1ba>
 8001042:	788b      	ldrb	r3, [r1, #2]
 8001044:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8001048:	1ae4      	subs	r4, r4, r3
 800104a:	d106      	bne.n	800105a <strcmp+0x1b2>
 800104c:	b12b      	cbz	r3, 800105a <strcmp+0x1b2>
 800104e:	78cb      	ldrb	r3, [r1, #3]
 8001050:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8001054:	1ae4      	subs	r4, r4, r3
 8001056:	d100      	bne.n	800105a <strcmp+0x1b2>
 8001058:	b91b      	cbnz	r3, 8001062 <strcmp+0x1ba>
 800105a:	4620      	mov	r0, r4
 800105c:	f85d 4b10 	ldr.w	r4, [sp], #16
 8001060:	4770      	bx	lr
 8001062:	f101 0104 	add.w	r1, r1, #4
 8001066:	f850 2b04 	ldr.w	r2, [r0], #4
 800106a:	07cc      	lsls	r4, r1, #31
 800106c:	f021 0103 	bic.w	r1, r1, #3
 8001070:	f851 3b04 	ldr.w	r3, [r1], #4
 8001074:	d848      	bhi.n	8001108 <strcmp+0x260>
 8001076:	d224      	bcs.n	80010c2 <strcmp+0x21a>
 8001078:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800107c:	fa82 f54c 	uadd8	r5, r2, ip
 8001080:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8001084:	faa5 f58c 	sel	r5, r5, ip
 8001088:	d10a      	bne.n	80010a0 <strcmp+0x1f8>
 800108a:	b965      	cbnz	r5, 80010a6 <strcmp+0x1fe>
 800108c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001090:	ea84 0402 	eor.w	r4, r4, r2
 8001094:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8001098:	d10e      	bne.n	80010b8 <strcmp+0x210>
 800109a:	f850 2b04 	ldr.w	r2, [r0], #4
 800109e:	e7eb      	b.n	8001078 <strcmp+0x1d0>
 80010a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80010a4:	e055      	b.n	8001152 <strcmp+0x2aa>
 80010a6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 80010aa:	d14d      	bne.n	8001148 <strcmp+0x2a0>
 80010ac:	7808      	ldrb	r0, [r1, #0]
 80010ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80010b2:	f1c0 0000 	rsb	r0, r0, #0
 80010b6:	4770      	bx	lr
 80010b8:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80010bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80010c0:	e047      	b.n	8001152 <strcmp+0x2aa>
 80010c2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 80010c6:	fa82 f54c 	uadd8	r5, r2, ip
 80010ca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 80010ce:	faa5 f58c 	sel	r5, r5, ip
 80010d2:	d10a      	bne.n	80010ea <strcmp+0x242>
 80010d4:	b965      	cbnz	r5, 80010f0 <strcmp+0x248>
 80010d6:	f851 3b04 	ldr.w	r3, [r1], #4
 80010da:	ea84 0402 	eor.w	r4, r4, r2
 80010de:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 80010e2:	d10c      	bne.n	80010fe <strcmp+0x256>
 80010e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80010e8:	e7eb      	b.n	80010c2 <strcmp+0x21a>
 80010ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80010ee:	e030      	b.n	8001152 <strcmp+0x2aa>
 80010f0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 80010f4:	d128      	bne.n	8001148 <strcmp+0x2a0>
 80010f6:	880b      	ldrh	r3, [r1, #0]
 80010f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80010fc:	e029      	b.n	8001152 <strcmp+0x2aa>
 80010fe:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8001102:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8001106:	e024      	b.n	8001152 <strcmp+0x2aa>
 8001108:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800110c:	fa82 f54c 	uadd8	r5, r2, ip
 8001110:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8001114:	faa5 f58c 	sel	r5, r5, ip
 8001118:	d10a      	bne.n	8001130 <strcmp+0x288>
 800111a:	b965      	cbnz	r5, 8001136 <strcmp+0x28e>
 800111c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001120:	ea84 0402 	eor.w	r4, r4, r2
 8001124:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8001128:	d109      	bne.n	800113e <strcmp+0x296>
 800112a:	f850 2b04 	ldr.w	r2, [r0], #4
 800112e:	e7eb      	b.n	8001108 <strcmp+0x260>
 8001130:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8001134:	e00d      	b.n	8001152 <strcmp+0x2aa>
 8001136:	f015 0fff 	tst.w	r5, #255	; 0xff
 800113a:	d105      	bne.n	8001148 <strcmp+0x2a0>
 800113c:	680b      	ldr	r3, [r1, #0]
 800113e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8001142:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001146:	e004      	b.n	8001152 <strcmp+0x2aa>
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001150:	4770      	bx	lr
 8001152:	ba12      	rev	r2, r2
 8001154:	ba1b      	rev	r3, r3
 8001156:	fa82 f44c 	uadd8	r4, r2, ip
 800115a:	ea82 0403 	eor.w	r4, r2, r3
 800115e:	faa4 f58c 	sel	r5, r4, ip
 8001162:	fab5 f485 	clz	r4, r5
 8001166:	fa02 f204 	lsl.w	r2, r2, r4
 800116a:	fa03 f304 	lsl.w	r3, r3, r4
 800116e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8001172:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001176:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800117a:	4770      	bx	lr

0800117c <strcpy>:
 800117c:	ea80 0201 	eor.w	r2, r0, r1
 8001180:	4684      	mov	ip, r0
 8001182:	f012 0f03 	tst.w	r2, #3
 8001186:	d14f      	bne.n	8001228 <strcpy+0xac>
 8001188:	f011 0f03 	tst.w	r1, #3
 800118c:	d132      	bne.n	80011f4 <strcpy+0x78>
 800118e:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8001192:	f011 0f04 	tst.w	r1, #4
 8001196:	f851 3b04 	ldr.w	r3, [r1], #4
 800119a:	d00b      	beq.n	80011b4 <strcpy+0x38>
 800119c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80011a0:	439a      	bics	r2, r3
 80011a2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80011a6:	bf04      	itt	eq
 80011a8:	f84c 3b04 	streq.w	r3, [ip], #4
 80011ac:	f851 3b04 	ldreq.w	r3, [r1], #4
 80011b0:	d116      	bne.n	80011e0 <strcpy+0x64>
 80011b2:	bf00      	nop
 80011b4:	f851 4b04 	ldr.w	r4, [r1], #4
 80011b8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80011bc:	439a      	bics	r2, r3
 80011be:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80011c2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80011c6:	d10b      	bne.n	80011e0 <strcpy+0x64>
 80011c8:	f84c 3b04 	str.w	r3, [ip], #4
 80011cc:	43a2      	bics	r2, r4
 80011ce:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80011d2:	bf04      	itt	eq
 80011d4:	f851 3b04 	ldreq.w	r3, [r1], #4
 80011d8:	f84c 4b04 	streq.w	r4, [ip], #4
 80011dc:	d0ea      	beq.n	80011b4 <strcpy+0x38>
 80011de:	4623      	mov	r3, r4
 80011e0:	f80c 3b01 	strb.w	r3, [ip], #1
 80011e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80011e8:	ea4f 2333 	mov.w	r3, r3, ror #8
 80011ec:	d1f8      	bne.n	80011e0 <strcpy+0x64>
 80011ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	f011 0f01 	tst.w	r1, #1
 80011f8:	d006      	beq.n	8001208 <strcpy+0x8c>
 80011fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80011fe:	f80c 2b01 	strb.w	r2, [ip], #1
 8001202:	2a00      	cmp	r2, #0
 8001204:	bf08      	it	eq
 8001206:	4770      	bxeq	lr
 8001208:	f011 0f02 	tst.w	r1, #2
 800120c:	d0bf      	beq.n	800118e <strcpy+0x12>
 800120e:	f831 2b02 	ldrh.w	r2, [r1], #2
 8001212:	f012 0fff 	tst.w	r2, #255	; 0xff
 8001216:	bf16      	itet	ne
 8001218:	f82c 2b02 	strhne.w	r2, [ip], #2
 800121c:	f88c 2000 	strbeq.w	r2, [ip]
 8001220:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8001224:	d1b3      	bne.n	800118e <strcpy+0x12>
 8001226:	4770      	bx	lr
 8001228:	f811 2b01 	ldrb.w	r2, [r1], #1
 800122c:	f80c 2b01 	strb.w	r2, [ip], #1
 8001230:	2a00      	cmp	r2, #0
 8001232:	d1f9      	bne.n	8001228 <strcpy+0xac>
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
	...

08001240 <strlen>:
 8001240:	f890 f000 	pld	[r0]
 8001244:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8001248:	f020 0107 	bic.w	r1, r0, #7
 800124c:	f06f 0c00 	mvn.w	ip, #0
 8001250:	f010 0407 	ands.w	r4, r0, #7
 8001254:	f891 f020 	pld	[r1, #32]
 8001258:	f040 8049 	bne.w	80012ee <strlen+0xae>
 800125c:	f04f 0400 	mov.w	r4, #0
 8001260:	f06f 0007 	mvn.w	r0, #7
 8001264:	e9d1 2300 	ldrd	r2, r3, [r1]
 8001268:	f891 f040 	pld	[r1, #64]	; 0x40
 800126c:	f100 0008 	add.w	r0, r0, #8
 8001270:	fa82 f24c 	uadd8	r2, r2, ip
 8001274:	faa4 f28c 	sel	r2, r4, ip
 8001278:	fa83 f34c 	uadd8	r3, r3, ip
 800127c:	faa2 f38c 	sel	r3, r2, ip
 8001280:	bb4b      	cbnz	r3, 80012d6 <strlen+0x96>
 8001282:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8001286:	fa82 f24c 	uadd8	r2, r2, ip
 800128a:	f100 0008 	add.w	r0, r0, #8
 800128e:	faa4 f28c 	sel	r2, r4, ip
 8001292:	fa83 f34c 	uadd8	r3, r3, ip
 8001296:	faa2 f38c 	sel	r3, r2, ip
 800129a:	b9e3      	cbnz	r3, 80012d6 <strlen+0x96>
 800129c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80012a0:	fa82 f24c 	uadd8	r2, r2, ip
 80012a4:	f100 0008 	add.w	r0, r0, #8
 80012a8:	faa4 f28c 	sel	r2, r4, ip
 80012ac:	fa83 f34c 	uadd8	r3, r3, ip
 80012b0:	faa2 f38c 	sel	r3, r2, ip
 80012b4:	b97b      	cbnz	r3, 80012d6 <strlen+0x96>
 80012b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80012ba:	f101 0120 	add.w	r1, r1, #32
 80012be:	fa82 f24c 	uadd8	r2, r2, ip
 80012c2:	f100 0008 	add.w	r0, r0, #8
 80012c6:	faa4 f28c 	sel	r2, r4, ip
 80012ca:	fa83 f34c 	uadd8	r3, r3, ip
 80012ce:	faa2 f38c 	sel	r3, r2, ip
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0c6      	beq.n	8001264 <strlen+0x24>
 80012d6:	2a00      	cmp	r2, #0
 80012d8:	bf04      	itt	eq
 80012da:	3004      	addeq	r0, #4
 80012dc:	461a      	moveq	r2, r3
 80012de:	ba12      	rev	r2, r2
 80012e0:	fab2 f282 	clz	r2, r2
 80012e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80012e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80012ec:	4770      	bx	lr
 80012ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80012f2:	f004 0503 	and.w	r5, r4, #3
 80012f6:	f1c4 0000 	rsb	r0, r4, #0
 80012fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80012fe:	f014 0f04 	tst.w	r4, #4
 8001302:	f891 f040 	pld	[r1, #64]	; 0x40
 8001306:	fa0c f505 	lsl.w	r5, ip, r5
 800130a:	ea62 0205 	orn	r2, r2, r5
 800130e:	bf1c      	itt	ne
 8001310:	ea63 0305 	ornne	r3, r3, r5
 8001314:	4662      	movne	r2, ip
 8001316:	f04f 0400 	mov.w	r4, #0
 800131a:	e7a9      	b.n	8001270 <strlen+0x30>

0800131c <__tzcalc_limits>:
 800131c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001320:	b083      	sub	sp, #12
 8001322:	4605      	mov	r5, r0
 8001324:	f000 fad8 	bl	80018d8 <__gettzinfo>
 8001328:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800132c:	429d      	cmp	r5, r3
 800132e:	f340 8093 	ble.w	8001458 <__tzcalc_limits+0x13c>
 8001332:	4c57      	ldr	r4, [pc, #348]	; (8001490 <__tzcalc_limits+0x174>)
 8001334:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800149c <__tzcalc_limits+0x180>
 8001338:	6045      	str	r5, [r0, #4]
 800133a:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 800133e:	18ee      	adds	r6, r5, r3
 8001340:	f2a5 726d 	subw	r2, r5, #1901	; 0x76d
 8001344:	fb84 3102 	smull	r3, r1, r4, r2
 8001348:	10b7      	asrs	r7, r6, #2
 800134a:	f240 1e6d 	movw	lr, #365	; 0x16d
 800134e:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
 8001352:	f2a5 76b2 	subw	r6, r5, #1970	; 0x7b2
 8001356:	17d2      	asrs	r2, r2, #31
 8001358:	eb05 030c 	add.w	r3, r5, ip
 800135c:	fb0e 7606 	mla	r6, lr, r6, r7
 8001360:	eba2 1261 	sub.w	r2, r2, r1, asr #5
 8001364:	17ef      	asrs	r7, r5, #31
 8001366:	fb84 c105 	smull	ip, r1, r4, r5
 800136a:	4416      	add	r6, r2
 800136c:	fb84 e403 	smull	lr, r4, r4, r3
 8001370:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001374:	ebc7 1ee1 	rsb	lr, r7, r1, asr #7
 8001378:	17db      	asrs	r3, r3, #31
 800137a:	ebc3 13e4 	rsb	r3, r3, r4, asr #7
 800137e:	fb02 5e1e 	mls	lr, r2, lr, r5
 8001382:	ebc7 1761 	rsb	r7, r7, r1, asr #5
 8001386:	2264      	movs	r2, #100	; 0x64
 8001388:	441e      	add	r6, r3
 800138a:	f1be 0f00 	cmp.w	lr, #0
 800138e:	bf0c      	ite	eq
 8001390:	2330      	moveq	r3, #48	; 0x30
 8001392:	2300      	movne	r3, #0
 8001394:	fb02 5717 	mls	r7, r2, r7, r5
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	f005 0503 	and.w	r5, r5, #3
 800139e:	4604      	mov	r4, r0
 80013a0:	f100 0c38 	add.w	ip, r0, #56	; 0x38
 80013a4:	7a23      	ldrb	r3, [r4, #8]
 80013a6:	2b4a      	cmp	r3, #74	; 0x4a
 80013a8:	d05a      	beq.n	8001460 <__tzcalc_limits+0x144>
 80013aa:	2b44      	cmp	r3, #68	; 0x44
 80013ac:	d068      	beq.n	8001480 <__tzcalc_limits+0x164>
 80013ae:	2d00      	cmp	r5, #0
 80013b0:	d04b      	beq.n	800144a <__tzcalc_limits+0x12e>
 80013b2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80013b6:	68e3      	ldr	r3, [r4, #12]
 80013b8:	4a36      	ldr	r2, [pc, #216]	; (8001494 <__tzcalc_limits+0x178>)
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	4491      	add	r9, r2
 80013be:	dd62      	ble.n	8001486 <__tzcalc_limits+0x16a>
 80013c0:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 80013c4:	f1ab 0b02 	sub.w	fp, fp, #2
 80013c8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80013cc:	eb09 0a0b 	add.w	sl, r9, fp
 80013d0:	f1a9 0304 	sub.w	r3, r9, #4
 80013d4:	4632      	mov	r2, r6
 80013d6:	f853 1f04 	ldr.w	r1, [r3, #4]!
 80013da:	459a      	cmp	sl, r3
 80013dc:	440a      	add	r2, r1
 80013de:	d1fa      	bne.n	80013d6 <__tzcalc_limits+0xba>
 80013e0:	f10b 0b04 	add.w	fp, fp, #4
 80013e4:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <__tzcalc_limits+0x17c>)
 80013e6:	f859 900b 	ldr.w	r9, [r9, fp]
 80013ea:	1d11      	adds	r1, r2, #4
 80013ec:	fb83 a301 	smull	sl, r3, r3, r1
 80013f0:	440b      	add	r3, r1
 80013f2:	ea4f 7ae1 	mov.w	sl, r1, asr #31
 80013f6:	ebca 0aa3 	rsb	sl, sl, r3, asr #2
 80013fa:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 80013fe:	6963      	ldr	r3, [r4, #20]
 8001400:	eba1 010a 	sub.w	r1, r1, sl
 8001404:	1a59      	subs	r1, r3, r1
 8001406:	6923      	ldr	r3, [r4, #16]
 8001408:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800140c:	bf48      	it	mi
 800140e:	3107      	addmi	r1, #7
 8001410:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8001414:	440b      	add	r3, r1
 8001416:	454b      	cmp	r3, r9
 8001418:	db02      	blt.n	8001420 <__tzcalc_limits+0x104>
 800141a:	3b07      	subs	r3, #7
 800141c:	454b      	cmp	r3, r9
 800141e:	dafc      	bge.n	800141a <__tzcalc_limits+0xfe>
 8001420:	441a      	add	r2, r3
 8001422:	69a1      	ldr	r1, [r4, #24]
 8001424:	6a23      	ldr	r3, [r4, #32]
 8001426:	fb08 1102 	mla	r1, r8, r2, r1
 800142a:	440b      	add	r3, r1
 800142c:	f844 3f1c 	str.w	r3, [r4, #28]!
 8001430:	45a4      	cmp	ip, r4
 8001432:	d1b7      	bne.n	80013a4 <__tzcalc_limits+0x88>
 8001434:	69c3      	ldr	r3, [r0, #28]
 8001436:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001438:	4293      	cmp	r3, r2
 800143a:	bfac      	ite	ge
 800143c:	2300      	movge	r3, #0
 800143e:	2301      	movlt	r3, #1
 8001440:	6003      	str	r3, [r0, #0]
 8001442:	2001      	movs	r0, #1
 8001444:	b003      	add	sp, #12
 8001446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800144a:	9b01      	ldr	r3, [sp, #4]
 800144c:	2f00      	cmp	r7, #0
 800144e:	bf0c      	ite	eq
 8001450:	4699      	moveq	r9, r3
 8001452:	f04f 0930 	movne.w	r9, #48	; 0x30
 8001456:	e7ae      	b.n	80013b6 <__tzcalc_limits+0x9a>
 8001458:	2000      	movs	r0, #0
 800145a:	b003      	add	sp, #12
 800145c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001460:	6962      	ldr	r2, [r4, #20]
 8001462:	18b1      	adds	r1, r6, r2
 8001464:	b93d      	cbnz	r5, 8001476 <__tzcalc_limits+0x15a>
 8001466:	b137      	cbz	r7, 8001476 <__tzcalc_limits+0x15a>
 8001468:	2a3b      	cmp	r2, #59	; 0x3b
 800146a:	bfd4      	ite	le
 800146c:	2200      	movle	r2, #0
 800146e:	2201      	movgt	r2, #1
 8001470:	440a      	add	r2, r1
 8001472:	3a01      	subs	r2, #1
 8001474:	e7d5      	b.n	8001422 <__tzcalc_limits+0x106>
 8001476:	f1be 0f00 	cmp.w	lr, #0
 800147a:	d0f5      	beq.n	8001468 <__tzcalc_limits+0x14c>
 800147c:	2200      	movs	r2, #0
 800147e:	e7f7      	b.n	8001470 <__tzcalc_limits+0x154>
 8001480:	6962      	ldr	r2, [r4, #20]
 8001482:	4432      	add	r2, r6
 8001484:	e7cd      	b.n	8001422 <__tzcalc_limits+0x106>
 8001486:	4632      	mov	r2, r6
 8001488:	f04f 0b00 	mov.w	fp, #0
 800148c:	e7aa      	b.n	80013e4 <__tzcalc_limits+0xc8>
 800148e:	bf00      	nop
 8001490:	51eb851f 	.word	0x51eb851f
 8001494:	08005f94 	.word	0x08005f94
 8001498:	92492493 	.word	0x92492493
 800149c:	00015180 	.word	0x00015180

080014a0 <__tz_lock>:
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop

080014a4 <__tz_unlock>:
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop

080014a8 <_tzset_unlocked>:
 80014a8:	4b01      	ldr	r3, [pc, #4]	; (80014b0 <_tzset_unlocked+0x8>)
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	f000 b810 	b.w	80014d0 <_tzset_unlocked_r>
 80014b0:	200011c8 	.word	0x200011c8

080014b4 <tzset>:
 80014b4:	b508      	push	{r3, lr}
 80014b6:	f7ff fff3 	bl	80014a0 <__tz_lock>
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <tzset+0x18>)
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	f000 f807 	bl	80014d0 <_tzset_unlocked_r>
 80014c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80014c6:	f7ff bfed 	b.w	80014a4 <__tz_unlock>
 80014ca:	bf00      	nop
 80014cc:	200011c8 	.word	0x200011c8

080014d0 <_tzset_unlocked_r>:
 80014d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014d4:	b08b      	sub	sp, #44	; 0x2c
 80014d6:	4607      	mov	r7, r0
 80014d8:	f000 f9fe 	bl	80018d8 <__gettzinfo>
 80014dc:	49bc      	ldr	r1, [pc, #752]	; (80017d0 <_tzset_unlocked_r+0x300>)
 80014de:	4dbd      	ldr	r5, [pc, #756]	; (80017d4 <_tzset_unlocked_r+0x304>)
 80014e0:	4606      	mov	r6, r0
 80014e2:	4638      	mov	r0, r7
 80014e4:	f000 f9f0 	bl	80018c8 <_getenv_r>
 80014e8:	4604      	mov	r4, r0
 80014ea:	2800      	cmp	r0, #0
 80014ec:	f000 80f8 	beq.w	80016e0 <_tzset_unlocked_r+0x210>
 80014f0:	6829      	ldr	r1, [r5, #0]
 80014f2:	b131      	cbz	r1, 8001502 <_tzset_unlocked_r+0x32>
 80014f4:	f7ff fcd8 	bl	8000ea8 <strcmp>
 80014f8:	b910      	cbnz	r0, 8001500 <_tzset_unlocked_r+0x30>
 80014fa:	b00b      	add	sp, #44	; 0x2c
 80014fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001500:	6829      	ldr	r1, [r5, #0]
 8001502:	4608      	mov	r0, r1
 8001504:	f000 f9f4 	bl	80018f0 <free>
 8001508:	4620      	mov	r0, r4
 800150a:	f7ff fe99 	bl	8001240 <strlen>
 800150e:	1c41      	adds	r1, r0, #1
 8001510:	4638      	mov	r0, r7
 8001512:	f000 fa3d 	bl	8001990 <_malloc_r>
 8001516:	6028      	str	r0, [r5, #0]
 8001518:	b110      	cbz	r0, 8001520 <_tzset_unlocked_r+0x50>
 800151a:	4621      	mov	r1, r4
 800151c:	f7ff fe2e 	bl	800117c <strcpy>
 8001520:	7823      	ldrb	r3, [r4, #0]
 8001522:	4aad      	ldr	r2, [pc, #692]	; (80017d8 <_tzset_unlocked_r+0x308>)
 8001524:	49ad      	ldr	r1, [pc, #692]	; (80017dc <_tzset_unlocked_r+0x30c>)
 8001526:	2b3a      	cmp	r3, #58	; 0x3a
 8001528:	bf08      	it	eq
 800152a:	3401      	addeq	r4, #1
 800152c:	ad08      	add	r5, sp, #32
 800152e:	462b      	mov	r3, r5
 8001530:	4620      	mov	r0, r4
 8001532:	f000 fa9d 	bl	8001a70 <siscanf>
 8001536:	2800      	cmp	r0, #0
 8001538:	dddf      	ble.n	80014fa <_tzset_unlocked_r+0x2a>
 800153a:	9b08      	ldr	r3, [sp, #32]
 800153c:	5ce2      	ldrb	r2, [r4, r3]
 800153e:	2a2d      	cmp	r2, #45	; 0x2d
 8001540:	441c      	add	r4, r3
 8001542:	f000 80c9 	beq.w	80016d8 <_tzset_unlocked_r+0x208>
 8001546:	2a2b      	cmp	r2, #43	; 0x2b
 8001548:	bf08      	it	eq
 800154a:	3401      	addeq	r4, #1
 800154c:	f04f 0801 	mov.w	r8, #1
 8001550:	ab06      	add	r3, sp, #24
 8001552:	9302      	str	r3, [sp, #8]
 8001554:	f10d 0316 	add.w	r3, sp, #22
 8001558:	2700      	movs	r7, #0
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	9503      	str	r5, [sp, #12]
 800155e:	9501      	str	r5, [sp, #4]
 8001560:	aa05      	add	r2, sp, #20
 8001562:	462b      	mov	r3, r5
 8001564:	499e      	ldr	r1, [pc, #632]	; (80017e0 <_tzset_unlocked_r+0x310>)
 8001566:	f8ad 7016 	strh.w	r7, [sp, #22]
 800156a:	4620      	mov	r0, r4
 800156c:	f8ad 7018 	strh.w	r7, [sp, #24]
 8001570:	f000 fa7e 	bl	8001a70 <siscanf>
 8001574:	42b8      	cmp	r0, r7
 8001576:	ddc0      	ble.n	80014fa <_tzset_unlocked_r+0x2a>
 8001578:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800157c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8001580:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8001584:	f8df e250 	ldr.w	lr, [pc, #592]	; 80017d8 <_tzset_unlocked_r+0x308>
 8001588:	9808      	ldr	r0, [sp, #32]
 800158a:	f8df 9260 	ldr.w	r9, [pc, #608]	; 80017ec <_tzset_unlocked_r+0x31c>
 800158e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001592:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001596:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800159a:	fb01 3302 	mla	r3, r1, r2, r3
 800159e:	fb08 f303 	mul.w	r3, r8, r3
 80015a2:	f10e 0a0c 	add.w	sl, lr, #12
 80015a6:	4404      	add	r4, r0
 80015a8:	6233      	str	r3, [r6, #32]
 80015aa:	4652      	mov	r2, sl
 80015ac:	4620      	mov	r0, r4
 80015ae:	462b      	mov	r3, r5
 80015b0:	498a      	ldr	r1, [pc, #552]	; (80017dc <_tzset_unlocked_r+0x30c>)
 80015b2:	f8c9 e000 	str.w	lr, [r9]
 80015b6:	f000 fa5b 	bl	8001a70 <siscanf>
 80015ba:	42b8      	cmp	r0, r7
 80015bc:	f340 8082 	ble.w	80016c4 <_tzset_unlocked_r+0x1f4>
 80015c0:	9808      	ldr	r0, [sp, #32]
 80015c2:	f8c9 a004 	str.w	sl, [r9, #4]
 80015c6:	5c23      	ldrb	r3, [r4, r0]
 80015c8:	2b2d      	cmp	r3, #45	; 0x2d
 80015ca:	4404      	add	r4, r0
 80015cc:	f000 8095 	beq.w	80016fa <_tzset_unlocked_r+0x22a>
 80015d0:	2b2b      	cmp	r3, #43	; 0x2b
 80015d2:	bf08      	it	eq
 80015d4:	3401      	addeq	r4, #1
 80015d6:	f04f 0801 	mov.w	r8, #1
 80015da:	ab06      	add	r3, sp, #24
 80015dc:	9302      	str	r3, [sp, #8]
 80015de:	f10d 0316 	add.w	r3, sp, #22
 80015e2:	2700      	movs	r7, #0
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	9503      	str	r5, [sp, #12]
 80015e8:	9501      	str	r5, [sp, #4]
 80015ea:	462b      	mov	r3, r5
 80015ec:	aa05      	add	r2, sp, #20
 80015ee:	497c      	ldr	r1, [pc, #496]	; (80017e0 <_tzset_unlocked_r+0x310>)
 80015f0:	f8ad 7014 	strh.w	r7, [sp, #20]
 80015f4:	4620      	mov	r0, r4
 80015f6:	f8ad 7016 	strh.w	r7, [sp, #22]
 80015fa:	f8ad 7018 	strh.w	r7, [sp, #24]
 80015fe:	9708      	str	r7, [sp, #32]
 8001600:	f000 fa36 	bl	8001a70 <siscanf>
 8001604:	42b8      	cmp	r0, r7
 8001606:	dd7c      	ble.n	8001702 <_tzset_unlocked_r+0x232>
 8001608:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800160c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8001610:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8001614:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001618:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800161c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001620:	fb01 3302 	mla	r3, r1, r2, r3
 8001624:	fb08 f303 	mul.w	r3, r8, r3
 8001628:	63f3      	str	r3, [r6, #60]	; 0x3c
 800162a:	9b08      	ldr	r3, [sp, #32]
 800162c:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 80017f8 <_tzset_unlocked_r+0x328>
 8001630:	441c      	add	r4, r3
 8001632:	46b0      	mov	r8, r6
 8001634:	f04f 0a00 	mov.w	sl, #0
 8001638:	7827      	ldrb	r7, [r4, #0]
 800163a:	2f2c      	cmp	r7, #44	; 0x2c
 800163c:	bf04      	itt	eq
 800163e:	7867      	ldrbeq	r7, [r4, #1]
 8001640:	3401      	addeq	r4, #1
 8001642:	2f4d      	cmp	r7, #77	; 0x4d
 8001644:	d062      	beq.n	800170c <_tzset_unlocked_r+0x23c>
 8001646:	2f4a      	cmp	r7, #74	; 0x4a
 8001648:	bf08      	it	eq
 800164a:	3401      	addeq	r4, #1
 800164c:	f04f 020a 	mov.w	r2, #10
 8001650:	a909      	add	r1, sp, #36	; 0x24
 8001652:	4620      	mov	r0, r4
 8001654:	bf18      	it	ne
 8001656:	2744      	movne	r7, #68	; 0x44
 8001658:	f000 fb92 	bl	8001d80 <strtoul>
 800165c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8001660:	f8ad 001e 	strh.w	r0, [sp, #30]
 8001664:	454c      	cmp	r4, r9
 8001666:	f000 809c 	beq.w	80017a2 <_tzset_unlocked_r+0x2d2>
 800166a:	b280      	uxth	r0, r0
 800166c:	f8c8 0014 	str.w	r0, [r8, #20]
 8001670:	f888 7008 	strb.w	r7, [r8, #8]
 8001674:	2400      	movs	r4, #0
 8001676:	2302      	movs	r3, #2
 8001678:	f8ad 3014 	strh.w	r3, [sp, #20]
 800167c:	f8ad 4016 	strh.w	r4, [sp, #22]
 8001680:	f8ad 4018 	strh.w	r4, [sp, #24]
 8001684:	9408      	str	r4, [sp, #32]
 8001686:	f899 3000 	ldrb.w	r3, [r9]
 800168a:	2b2f      	cmp	r3, #47	; 0x2f
 800168c:	d06c      	beq.n	8001768 <_tzset_unlocked_r+0x298>
 800168e:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001692:	f10a 0a01 	add.w	sl, sl, #1
 8001696:	f1ba 0f02 	cmp.w	sl, #2
 800169a:	f8c8 3018 	str.w	r3, [r8, #24]
 800169e:	444c      	add	r4, r9
 80016a0:	f108 081c 	add.w	r8, r8, #28
 80016a4:	d1c8      	bne.n	8001638 <_tzset_unlocked_r+0x168>
 80016a6:	6870      	ldr	r0, [r6, #4]
 80016a8:	f7ff fe38 	bl	800131c <__tzcalc_limits>
 80016ac:	6a32      	ldr	r2, [r6, #32]
 80016ae:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80016b0:	484c      	ldr	r0, [pc, #304]	; (80017e4 <_tzset_unlocked_r+0x314>)
 80016b2:	494d      	ldr	r1, [pc, #308]	; (80017e8 <_tzset_unlocked_r+0x318>)
 80016b4:	1a9b      	subs	r3, r3, r2
 80016b6:	bf18      	it	ne
 80016b8:	2301      	movne	r3, #1
 80016ba:	6003      	str	r3, [r0, #0]
 80016bc:	600a      	str	r2, [r1, #0]
 80016be:	b00b      	add	sp, #44	; 0x2c
 80016c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016c4:	4948      	ldr	r1, [pc, #288]	; (80017e8 <_tzset_unlocked_r+0x318>)
 80016c6:	4a47      	ldr	r2, [pc, #284]	; (80017e4 <_tzset_unlocked_r+0x314>)
 80016c8:	6a30      	ldr	r0, [r6, #32]
 80016ca:	f8d9 3000 	ldr.w	r3, [r9]
 80016ce:	6008      	str	r0, [r1, #0]
 80016d0:	6017      	str	r7, [r2, #0]
 80016d2:	f8c9 3004 	str.w	r3, [r9, #4]
 80016d6:	e710      	b.n	80014fa <_tzset_unlocked_r+0x2a>
 80016d8:	3401      	adds	r4, #1
 80016da:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80016de:	e737      	b.n	8001550 <_tzset_unlocked_r+0x80>
 80016e0:	4b42      	ldr	r3, [pc, #264]	; (80017ec <_tzset_unlocked_r+0x31c>)
 80016e2:	4940      	ldr	r1, [pc, #256]	; (80017e4 <_tzset_unlocked_r+0x314>)
 80016e4:	4e40      	ldr	r6, [pc, #256]	; (80017e8 <_tzset_unlocked_r+0x318>)
 80016e6:	4a42      	ldr	r2, [pc, #264]	; (80017f0 <_tzset_unlocked_r+0x320>)
 80016e8:	6828      	ldr	r0, [r5, #0]
 80016ea:	6034      	str	r4, [r6, #0]
 80016ec:	600c      	str	r4, [r1, #0]
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	f000 f8fd 	bl	80018f0 <free>
 80016f6:	602c      	str	r4, [r5, #0]
 80016f8:	e6ff      	b.n	80014fa <_tzset_unlocked_r+0x2a>
 80016fa:	3401      	adds	r4, #1
 80016fc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8001700:	e76b      	b.n	80015da <_tzset_unlocked_r+0x10a>
 8001702:	6a33      	ldr	r3, [r6, #32]
 8001704:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8001708:	63f3      	str	r3, [r6, #60]	; 0x3c
 800170a:	e78e      	b.n	800162a <_tzset_unlocked_r+0x15a>
 800170c:	f10d 021e 	add.w	r2, sp, #30
 8001710:	ab07      	add	r3, sp, #28
 8001712:	9202      	str	r2, [sp, #8]
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	9503      	str	r5, [sp, #12]
 8001718:	9501      	str	r5, [sp, #4]
 800171a:	462b      	mov	r3, r5
 800171c:	f10d 021a 	add.w	r2, sp, #26
 8001720:	4659      	mov	r1, fp
 8001722:	4620      	mov	r0, r4
 8001724:	f000 f9a4 	bl	8001a70 <siscanf>
 8001728:	2803      	cmp	r0, #3
 800172a:	f47f aee6 	bne.w	80014fa <_tzset_unlocked_r+0x2a>
 800172e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8001732:	1e5a      	subs	r2, r3, #1
 8001734:	2a0b      	cmp	r2, #11
 8001736:	f63f aee0 	bhi.w	80014fa <_tzset_unlocked_r+0x2a>
 800173a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800173e:	1e51      	subs	r1, r2, #1
 8001740:	2904      	cmp	r1, #4
 8001742:	f63f aeda 	bhi.w	80014fa <_tzset_unlocked_r+0x2a>
 8001746:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800174a:	2906      	cmp	r1, #6
 800174c:	f63f aed5 	bhi.w	80014fa <_tzset_unlocked_r+0x2a>
 8001750:	f888 7008 	strb.w	r7, [r8, #8]
 8001754:	f8c8 300c 	str.w	r3, [r8, #12]
 8001758:	f8c8 2010 	str.w	r2, [r8, #16]
 800175c:	f8c8 1014 	str.w	r1, [r8, #20]
 8001760:	9b08      	ldr	r3, [sp, #32]
 8001762:	eb04 0903 	add.w	r9, r4, r3
 8001766:	e785      	b.n	8001674 <_tzset_unlocked_r+0x1a4>
 8001768:	ab06      	add	r3, sp, #24
 800176a:	9302      	str	r3, [sp, #8]
 800176c:	f10d 0316 	add.w	r3, sp, #22
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	aa05      	add	r2, sp, #20
 8001774:	462b      	mov	r3, r5
 8001776:	491f      	ldr	r1, [pc, #124]	; (80017f4 <_tzset_unlocked_r+0x324>)
 8001778:	9503      	str	r5, [sp, #12]
 800177a:	9501      	str	r5, [sp, #4]
 800177c:	4648      	mov	r0, r9
 800177e:	f000 f977 	bl	8001a70 <siscanf>
 8001782:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8001786:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800178a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800178e:	9c08      	ldr	r4, [sp, #32]
 8001790:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8001794:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001798:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800179c:	fb01 2303 	mla	r3, r1, r3, r2
 80017a0:	e777      	b.n	8001692 <_tzset_unlocked_r+0x1c2>
 80017a2:	f1ba 0f00 	cmp.w	sl, #0
 80017a6:	d009      	beq.n	80017bc <_tzset_unlocked_r+0x2ec>
 80017a8:	224d      	movs	r2, #77	; 0x4d
 80017aa:	230b      	movs	r3, #11
 80017ac:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
 80017b0:	62b3      	str	r3, [r6, #40]	; 0x28
 80017b2:	2201      	movs	r2, #1
 80017b4:	2300      	movs	r3, #0
 80017b6:	62f2      	str	r2, [r6, #44]	; 0x2c
 80017b8:	6333      	str	r3, [r6, #48]	; 0x30
 80017ba:	e75b      	b.n	8001674 <_tzset_unlocked_r+0x1a4>
 80017bc:	234d      	movs	r3, #77	; 0x4d
 80017be:	2203      	movs	r2, #3
 80017c0:	7233      	strb	r3, [r6, #8]
 80017c2:	2302      	movs	r3, #2
 80017c4:	f8c6 a014 	str.w	sl, [r6, #20]
 80017c8:	60f2      	str	r2, [r6, #12]
 80017ca:	6133      	str	r3, [r6, #16]
 80017cc:	e752      	b.n	8001674 <_tzset_unlocked_r+0x1a4>
 80017ce:	bf00      	nop
 80017d0:	08006890 	.word	0x08006890
 80017d4:	20000000 	.word	0x20000000
 80017d8:	20000004 	.word	0x20000004
 80017dc:	08006898 	.word	0x08006898
 80017e0:	080068a8 	.word	0x080068a8
 80017e4:	20000020 	.word	0x20000020
 80017e8:	2000001c 	.word	0x2000001c
 80017ec:	20001180 	.word	0x20001180
 80017f0:	08006894 	.word	0x08006894
 80017f4:	080068d0 	.word	0x080068d0
 80017f8:	080068bc 	.word	0x080068bc

080017fc <_tzset_r>:
 80017fc:	b510      	push	{r4, lr}
 80017fe:	4604      	mov	r4, r0
 8001800:	f7ff fe4e 	bl	80014a0 <__tz_lock>
 8001804:	4620      	mov	r0, r4
 8001806:	f7ff fe63 	bl	80014d0 <_tzset_unlocked_r>
 800180a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800180e:	f7ff be49 	b.w	80014a4 <__tz_unlock>
 8001812:	bf00      	nop

08001814 <div>:
 8001814:	2900      	cmp	r1, #0
 8001816:	b410      	push	{r4}
 8001818:	fb91 f4f2 	sdiv	r4, r1, r2
 800181c:	fb02 1314 	mls	r3, r2, r4, r1
 8001820:	db05      	blt.n	800182e <div+0x1a>
 8001822:	2b00      	cmp	r3, #0
 8001824:	db0c      	blt.n	8001840 <div+0x2c>
 8001826:	6004      	str	r4, [r0, #0]
 8001828:	6043      	str	r3, [r0, #4]
 800182a:	bc10      	pop	{r4}
 800182c:	4770      	bx	lr
 800182e:	2b00      	cmp	r3, #0
 8001830:	bfc4      	itt	gt
 8001832:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 8001836:	189b      	addgt	r3, r3, r2
 8001838:	6004      	str	r4, [r0, #0]
 800183a:	6043      	str	r3, [r0, #4]
 800183c:	bc10      	pop	{r4}
 800183e:	4770      	bx	lr
 8001840:	3401      	adds	r4, #1
 8001842:	1a9b      	subs	r3, r3, r2
 8001844:	6004      	str	r4, [r0, #0]
 8001846:	6043      	str	r3, [r0, #4]
 8001848:	bc10      	pop	{r4}
 800184a:	4770      	bx	lr

0800184c <_findenv_r>:
 800184c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001850:	4f1c      	ldr	r7, [pc, #112]	; (80018c4 <_findenv_r+0x78>)
 8001852:	460e      	mov	r6, r1
 8001854:	4691      	mov	r9, r2
 8001856:	4680      	mov	r8, r0
 8001858:	f000 fac6 	bl	8001de8 <__env_lock>
 800185c:	683d      	ldr	r5, [r7, #0]
 800185e:	b1f5      	cbz	r5, 800189e <_findenv_r+0x52>
 8001860:	7834      	ldrb	r4, [r6, #0]
 8001862:	b15c      	cbz	r4, 800187c <_findenv_r+0x30>
 8001864:	2c3d      	cmp	r4, #61	; 0x3d
 8001866:	bf18      	it	ne
 8001868:	4634      	movne	r4, r6
 800186a:	d102      	bne.n	8001872 <_findenv_r+0x26>
 800186c:	e017      	b.n	800189e <_findenv_r+0x52>
 800186e:	2b3d      	cmp	r3, #61	; 0x3d
 8001870:	d015      	beq.n	800189e <_findenv_r+0x52>
 8001872:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f9      	bne.n	800186e <_findenv_r+0x22>
 800187a:	1ba4      	subs	r4, r4, r6
 800187c:	6828      	ldr	r0, [r5, #0]
 800187e:	b170      	cbz	r0, 800189e <_findenv_r+0x52>
 8001880:	4622      	mov	r2, r4
 8001882:	4631      	mov	r1, r6
 8001884:	f000 f990 	bl	8001ba8 <strncmp>
 8001888:	b928      	cbnz	r0, 8001896 <_findenv_r+0x4a>
 800188a:	6828      	ldr	r0, [r5, #0]
 800188c:	5d03      	ldrb	r3, [r0, r4]
 800188e:	2b3d      	cmp	r3, #61	; 0x3d
 8001890:	eb00 0a04 	add.w	sl, r0, r4
 8001894:	d009      	beq.n	80018aa <_findenv_r+0x5e>
 8001896:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800189a:	2800      	cmp	r0, #0
 800189c:	d1f0      	bne.n	8001880 <_findenv_r+0x34>
 800189e:	4640      	mov	r0, r8
 80018a0:	f000 faa4 	bl	8001dec <__env_unlock>
 80018a4:	2000      	movs	r0, #0
 80018a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	1aed      	subs	r5, r5, r3
 80018ae:	10ad      	asrs	r5, r5, #2
 80018b0:	4640      	mov	r0, r8
 80018b2:	f8c9 5000 	str.w	r5, [r9]
 80018b6:	f000 fa99 	bl	8001dec <__env_unlock>
 80018ba:	f10a 0001 	add.w	r0, sl, #1
 80018be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018c2:	bf00      	nop
 80018c4:	20001464 	.word	0x20001464

080018c8 <_getenv_r>:
 80018c8:	b500      	push	{lr}
 80018ca:	b083      	sub	sp, #12
 80018cc:	aa01      	add	r2, sp, #4
 80018ce:	f7ff ffbd 	bl	800184c <_findenv_r>
 80018d2:	b003      	add	sp, #12
 80018d4:	f85d fb04 	ldr.w	pc, [sp], #4

080018d8 <__gettzinfo>:
 80018d8:	4800      	ldr	r0, [pc, #0]	; (80018dc <__gettzinfo+0x4>)
 80018da:	4770      	bx	lr
 80018dc:	20001188 	.word	0x20001188

080018e0 <malloc>:
 80018e0:	4b02      	ldr	r3, [pc, #8]	; (80018ec <malloc+0xc>)
 80018e2:	4601      	mov	r1, r0
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	f000 b853 	b.w	8001990 <_malloc_r>
 80018ea:	bf00      	nop
 80018ec:	200011c8 	.word	0x200011c8

080018f0 <free>:
 80018f0:	4b02      	ldr	r3, [pc, #8]	; (80018fc <free+0xc>)
 80018f2:	4601      	mov	r1, r0
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	f000 b803 	b.w	8001900 <_free_r>
 80018fa:	bf00      	nop
 80018fc:	200011c8 	.word	0x200011c8

08001900 <_free_r>:
 8001900:	b191      	cbz	r1, 8001928 <_free_r+0x28>
 8001902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001906:	3904      	subs	r1, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	bfb8      	it	lt
 800190c:	18c9      	addlt	r1, r1, r3
 800190e:	4b1f      	ldr	r3, [pc, #124]	; (800198c <_free_r+0x8c>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	b1fa      	cbz	r2, 8001954 <_free_r+0x54>
 8001914:	428a      	cmp	r2, r1
 8001916:	b430      	push	{r4, r5}
 8001918:	d90a      	bls.n	8001930 <_free_r+0x30>
 800191a:	6808      	ldr	r0, [r1, #0]
 800191c:	180c      	adds	r4, r1, r0
 800191e:	42a2      	cmp	r2, r4
 8001920:	d026      	beq.n	8001970 <_free_r+0x70>
 8001922:	604a      	str	r2, [r1, #4]
 8001924:	6019      	str	r1, [r3, #0]
 8001926:	bc30      	pop	{r4, r5}
 8001928:	4770      	bx	lr
 800192a:	428b      	cmp	r3, r1
 800192c:	d803      	bhi.n	8001936 <_free_r+0x36>
 800192e:	461a      	mov	r2, r3
 8001930:	6853      	ldr	r3, [r2, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f9      	bne.n	800192a <_free_r+0x2a>
 8001936:	6814      	ldr	r4, [r2, #0]
 8001938:	1915      	adds	r5, r2, r4
 800193a:	428d      	cmp	r5, r1
 800193c:	d00d      	beq.n	800195a <_free_r+0x5a>
 800193e:	d806      	bhi.n	800194e <_free_r+0x4e>
 8001940:	6808      	ldr	r0, [r1, #0]
 8001942:	180c      	adds	r4, r1, r0
 8001944:	429c      	cmp	r4, r3
 8001946:	d019      	beq.n	800197c <_free_r+0x7c>
 8001948:	604b      	str	r3, [r1, #4]
 800194a:	6051      	str	r1, [r2, #4]
 800194c:	e7eb      	b.n	8001926 <_free_r+0x26>
 800194e:	230c      	movs	r3, #12
 8001950:	6003      	str	r3, [r0, #0]
 8001952:	e7e8      	b.n	8001926 <_free_r+0x26>
 8001954:	604a      	str	r2, [r1, #4]
 8001956:	6019      	str	r1, [r3, #0]
 8001958:	4770      	bx	lr
 800195a:	6809      	ldr	r1, [r1, #0]
 800195c:	440c      	add	r4, r1
 800195e:	1911      	adds	r1, r2, r4
 8001960:	4299      	cmp	r1, r3
 8001962:	6014      	str	r4, [r2, #0]
 8001964:	d1df      	bne.n	8001926 <_free_r+0x26>
 8001966:	cb0a      	ldmia	r3, {r1, r3}
 8001968:	440c      	add	r4, r1
 800196a:	6053      	str	r3, [r2, #4]
 800196c:	6014      	str	r4, [r2, #0]
 800196e:	e7da      	b.n	8001926 <_free_r+0x26>
 8001970:	6814      	ldr	r4, [r2, #0]
 8001972:	6852      	ldr	r2, [r2, #4]
 8001974:	604a      	str	r2, [r1, #4]
 8001976:	4420      	add	r0, r4
 8001978:	6008      	str	r0, [r1, #0]
 800197a:	e7d3      	b.n	8001924 <_free_r+0x24>
 800197c:	681c      	ldr	r4, [r3, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	604b      	str	r3, [r1, #4]
 8001982:	4420      	add	r0, r4
 8001984:	6008      	str	r0, [r1, #0]
 8001986:	6051      	str	r1, [r2, #4]
 8001988:	e7cd      	b.n	8001926 <_free_r+0x26>
 800198a:	bf00      	nop
 800198c:	20000024 	.word	0x20000024

08001990 <_malloc_r>:
 8001990:	b570      	push	{r4, r5, r6, lr}
 8001992:	1ccc      	adds	r4, r1, #3
 8001994:	f024 0403 	bic.w	r4, r4, #3
 8001998:	3408      	adds	r4, #8
 800199a:	2c0c      	cmp	r4, #12
 800199c:	bf38      	it	cc
 800199e:	240c      	movcc	r4, #12
 80019a0:	2c00      	cmp	r4, #0
 80019a2:	4606      	mov	r6, r0
 80019a4:	db3b      	blt.n	8001a1e <_malloc_r+0x8e>
 80019a6:	42a1      	cmp	r1, r4
 80019a8:	d839      	bhi.n	8001a1e <_malloc_r+0x8e>
 80019aa:	4d27      	ldr	r5, [pc, #156]	; (8001a48 <_malloc_r+0xb8>)
 80019ac:	6829      	ldr	r1, [r5, #0]
 80019ae:	b151      	cbz	r1, 80019c6 <_malloc_r+0x36>
 80019b0:	680a      	ldr	r2, [r1, #0]
 80019b2:	1b12      	subs	r2, r2, r4
 80019b4:	d404      	bmi.n	80019c0 <_malloc_r+0x30>
 80019b6:	e036      	b.n	8001a26 <_malloc_r+0x96>
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	1b12      	subs	r2, r2, r4
 80019bc:	d51a      	bpl.n	80019f4 <_malloc_r+0x64>
 80019be:	4619      	mov	r1, r3
 80019c0:	684b      	ldr	r3, [r1, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f8      	bne.n	80019b8 <_malloc_r+0x28>
 80019c6:	6869      	ldr	r1, [r5, #4]
 80019c8:	2900      	cmp	r1, #0
 80019ca:	d037      	beq.n	8001a3c <_malloc_r+0xac>
 80019cc:	4621      	mov	r1, r4
 80019ce:	4630      	mov	r0, r6
 80019d0:	f000 f83c 	bl	8001a4c <_sbrk_r>
 80019d4:	1c43      	adds	r3, r0, #1
 80019d6:	d022      	beq.n	8001a1e <_malloc_r+0x8e>
 80019d8:	1cc3      	adds	r3, r0, #3
 80019da:	f023 0503 	bic.w	r5, r3, #3
 80019de:	42a8      	cmp	r0, r5
 80019e0:	d005      	beq.n	80019ee <_malloc_r+0x5e>
 80019e2:	1a29      	subs	r1, r5, r0
 80019e4:	4630      	mov	r0, r6
 80019e6:	f000 f831 	bl	8001a4c <_sbrk_r>
 80019ea:	3001      	adds	r0, #1
 80019ec:	d017      	beq.n	8001a1e <_malloc_r+0x8e>
 80019ee:	602c      	str	r4, [r5, #0]
 80019f0:	462b      	mov	r3, r5
 80019f2:	e004      	b.n	80019fe <_malloc_r+0x6e>
 80019f4:	2a0b      	cmp	r2, #11
 80019f6:	d90d      	bls.n	8001a14 <_malloc_r+0x84>
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	601c      	str	r4, [r3, #0]
 80019fe:	f103 000b 	add.w	r0, r3, #11
 8001a02:	f020 0007 	bic.w	r0, r0, #7
 8001a06:	1d1a      	adds	r2, r3, #4
 8001a08:	1a82      	subs	r2, r0, r2
 8001a0a:	d002      	beq.n	8001a12 <_malloc_r+0x82>
 8001a0c:	4251      	negs	r1, r2
 8001a0e:	5099      	str	r1, [r3, r2]
 8001a10:	bd70      	pop	{r4, r5, r6, pc}
 8001a12:	bd70      	pop	{r4, r5, r6, pc}
 8001a14:	428b      	cmp	r3, r1
 8001a16:	d00e      	beq.n	8001a36 <_malloc_r+0xa6>
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	604a      	str	r2, [r1, #4]
 8001a1c:	e7ef      	b.n	80019fe <_malloc_r+0x6e>
 8001a1e:	230c      	movs	r3, #12
 8001a20:	6033      	str	r3, [r6, #0]
 8001a22:	2000      	movs	r0, #0
 8001a24:	bd70      	pop	{r4, r5, r6, pc}
 8001a26:	2a0b      	cmp	r2, #11
 8001a28:	d803      	bhi.n	8001a32 <_malloc_r+0xa2>
 8001a2a:	684a      	ldr	r2, [r1, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	602a      	str	r2, [r5, #0]
 8001a30:	e7e5      	b.n	80019fe <_malloc_r+0x6e>
 8001a32:	460b      	mov	r3, r1
 8001a34:	e7e0      	b.n	80019f8 <_malloc_r+0x68>
 8001a36:	460a      	mov	r2, r1
 8001a38:	460b      	mov	r3, r1
 8001a3a:	e7f8      	b.n	8001a2e <_malloc_r+0x9e>
 8001a3c:	4630      	mov	r0, r6
 8001a3e:	f000 f805 	bl	8001a4c <_sbrk_r>
 8001a42:	6068      	str	r0, [r5, #4]
 8001a44:	e7c2      	b.n	80019cc <_malloc_r+0x3c>
 8001a46:	bf00      	nop
 8001a48:	20000024 	.word	0x20000024

08001a4c <_sbrk_r>:
 8001a4c:	b538      	push	{r3, r4, r5, lr}
 8001a4e:	4c07      	ldr	r4, [pc, #28]	; (8001a6c <_sbrk_r+0x20>)
 8001a50:	2300      	movs	r3, #0
 8001a52:	4605      	mov	r5, r0
 8001a54:	4608      	mov	r0, r1
 8001a56:	6023      	str	r3, [r4, #0]
 8001a58:	f002 fe5a 	bl	8004710 <_sbrk>
 8001a5c:	1c43      	adds	r3, r0, #1
 8001a5e:	d000      	beq.n	8001a62 <_sbrk_r+0x16>
 8001a60:	bd38      	pop	{r3, r4, r5, pc}
 8001a62:	6823      	ldr	r3, [r4, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0fb      	beq.n	8001a60 <_sbrk_r+0x14>
 8001a68:	602b      	str	r3, [r5, #0]
 8001a6a:	bd38      	pop	{r3, r4, r5, pc}
 8001a6c:	20000338 	.word	0x20000338

08001a70 <siscanf>:
 8001a70:	b40e      	push	{r1, r2, r3}
 8001a72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a74:	b09c      	sub	sp, #112	; 0x70
 8001a76:	ac21      	add	r4, sp, #132	; 0x84
 8001a78:	f44f 7201 	mov.w	r2, #516	; 0x204
 8001a7c:	f854 6b04 	ldr.w	r6, [r4], #4
 8001a80:	f8ad 2014 	strh.w	r2, [sp, #20]
 8001a84:	9002      	str	r0, [sp, #8]
 8001a86:	9006      	str	r0, [sp, #24]
 8001a88:	f7ff fbda 	bl	8001240 <strlen>
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <siscanf+0x50>)
 8001a8e:	9401      	str	r4, [sp, #4]
 8001a90:	4605      	mov	r5, r0
 8001a92:	4632      	mov	r2, r6
 8001a94:	4f0b      	ldr	r7, [pc, #44]	; (8001ac4 <siscanf+0x54>)
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	9503      	str	r5, [sp, #12]
 8001a9a:	4623      	mov	r3, r4
 8001a9c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8001aa0:	2400      	movs	r4, #0
 8001aa2:	a902      	add	r1, sp, #8
 8001aa4:	9507      	str	r5, [sp, #28]
 8001aa6:	970a      	str	r7, [sp, #40]	; 0x28
 8001aa8:	940e      	str	r4, [sp, #56]	; 0x38
 8001aaa:	9413      	str	r4, [sp, #76]	; 0x4c
 8001aac:	f8ad 6016 	strh.w	r6, [sp, #22]
 8001ab0:	f000 fa12 	bl	8001ed8 <__ssvfiscanf_r>
 8001ab4:	b01c      	add	sp, #112	; 0x70
 8001ab6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001aba:	b003      	add	sp, #12
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	200011c8 	.word	0x200011c8
 8001ac4:	08001b41 	.word	0x08001b41

08001ac8 <_siscanf_r>:
 8001ac8:	b40c      	push	{r2, r3}
 8001aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001acc:	b09d      	sub	sp, #116	; 0x74
 8001ace:	ac22      	add	r4, sp, #136	; 0x88
 8001ad0:	4606      	mov	r6, r0
 8001ad2:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001ad6:	4608      	mov	r0, r1
 8001ad8:	f854 7b04 	ldr.w	r7, [r4], #4
 8001adc:	9102      	str	r1, [sp, #8]
 8001ade:	9106      	str	r1, [sp, #24]
 8001ae0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001ae4:	f7ff fbac 	bl	8001240 <strlen>
 8001ae8:	463a      	mov	r2, r7
 8001aea:	4605      	mov	r5, r0
 8001aec:	4623      	mov	r3, r4
 8001aee:	9401      	str	r4, [sp, #4]
 8001af0:	4630      	mov	r0, r6
 8001af2:	2400      	movs	r4, #0
 8001af4:	4f08      	ldr	r7, [pc, #32]	; (8001b18 <_siscanf_r+0x50>)
 8001af6:	9503      	str	r5, [sp, #12]
 8001af8:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8001afc:	a902      	add	r1, sp, #8
 8001afe:	9507      	str	r5, [sp, #28]
 8001b00:	970a      	str	r7, [sp, #40]	; 0x28
 8001b02:	940e      	str	r4, [sp, #56]	; 0x38
 8001b04:	9413      	str	r4, [sp, #76]	; 0x4c
 8001b06:	f8ad 6016 	strh.w	r6, [sp, #22]
 8001b0a:	f000 f9e5 	bl	8001ed8 <__ssvfiscanf_r>
 8001b0e:	b01d      	add	sp, #116	; 0x74
 8001b10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001b14:	b002      	add	sp, #8
 8001b16:	4770      	bx	lr
 8001b18:	08001b41 	.word	0x08001b41

08001b1c <__sread>:
 8001b1c:	b510      	push	{r4, lr}
 8001b1e:	460c      	mov	r4, r1
 8001b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b24:	f000 fd04 	bl	8002530 <_read_r>
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	db03      	blt.n	8001b34 <__sread+0x18>
 8001b2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001b2e:	4403      	add	r3, r0
 8001b30:	6523      	str	r3, [r4, #80]	; 0x50
 8001b32:	bd10      	pop	{r4, pc}
 8001b34:	89a3      	ldrh	r3, [r4, #12]
 8001b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b3a:	81a3      	strh	r3, [r4, #12]
 8001b3c:	bd10      	pop	{r4, pc}
 8001b3e:	bf00      	nop

08001b40 <__seofread>:
 8001b40:	2000      	movs	r0, #0
 8001b42:	4770      	bx	lr

08001b44 <__swrite>:
 8001b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b48:	4616      	mov	r6, r2
 8001b4a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001b4e:	461f      	mov	r7, r3
 8001b50:	05d3      	lsls	r3, r2, #23
 8001b52:	460c      	mov	r4, r1
 8001b54:	4605      	mov	r5, r0
 8001b56:	d507      	bpl.n	8001b68 <__swrite+0x24>
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b60:	f000 f946 	bl	8001df0 <_lseek_r>
 8001b64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b70:	81a2      	strh	r2, [r4, #12]
 8001b72:	463b      	mov	r3, r7
 8001b74:	4632      	mov	r2, r6
 8001b76:	4628      	mov	r0, r5
 8001b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b7c:	f000 b90c 	b.w	8001d98 <_write_r>

08001b80 <__sseek>:
 8001b80:	b510      	push	{r4, lr}
 8001b82:	460c      	mov	r4, r1
 8001b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b88:	f000 f932 	bl	8001df0 <_lseek_r>
 8001b8c:	89a3      	ldrh	r3, [r4, #12]
 8001b8e:	1c42      	adds	r2, r0, #1
 8001b90:	bf0e      	itee	eq
 8001b92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b9a:	6520      	strne	r0, [r4, #80]	; 0x50
 8001b9c:	81a3      	strh	r3, [r4, #12]
 8001b9e:	bd10      	pop	{r4, pc}

08001ba0 <__sclose>:
 8001ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ba4:	f000 b90e 	b.w	8001dc4 <_close_r>

08001ba8 <strncmp>:
 8001ba8:	2a00      	cmp	r2, #0
 8001baa:	d041      	beq.n	8001c30 <strncmp+0x88>
 8001bac:	ea40 0301 	orr.w	r3, r0, r1
 8001bb0:	f013 0303 	ands.w	r3, r3, #3
 8001bb4:	b4f0      	push	{r4, r5, r6, r7}
 8001bb6:	d125      	bne.n	8001c04 <strncmp+0x5c>
 8001bb8:	2a03      	cmp	r2, #3
 8001bba:	d923      	bls.n	8001c04 <strncmp+0x5c>
 8001bbc:	6804      	ldr	r4, [r0, #0]
 8001bbe:	680d      	ldr	r5, [r1, #0]
 8001bc0:	42ac      	cmp	r4, r5
 8001bc2:	d11f      	bne.n	8001c04 <strncmp+0x5c>
 8001bc4:	3a04      	subs	r2, #4
 8001bc6:	d038      	beq.n	8001c3a <strncmp+0x92>
 8001bc8:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8001bcc:	ea25 0404 	bic.w	r4, r5, r4
 8001bd0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8001bd4:	d12e      	bne.n	8001c34 <strncmp+0x8c>
 8001bd6:	3004      	adds	r0, #4
 8001bd8:	3104      	adds	r1, #4
 8001bda:	e00f      	b.n	8001bfc <strncmp+0x54>
 8001bdc:	f850 3b04 	ldr.w	r3, [r0], #4
 8001be0:	680e      	ldr	r6, [r1, #0]
 8001be2:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 8001be6:	42b3      	cmp	r3, r6
 8001be8:	ea24 0403 	bic.w	r4, r4, r3
 8001bec:	f101 0104 	add.w	r1, r1, #4
 8001bf0:	d126      	bne.n	8001c40 <strncmp+0x98>
 8001bf2:	3a04      	subs	r2, #4
 8001bf4:	d021      	beq.n	8001c3a <strncmp+0x92>
 8001bf6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8001bfa:	d11b      	bne.n	8001c34 <strncmp+0x8c>
 8001bfc:	2a03      	cmp	r2, #3
 8001bfe:	4607      	mov	r7, r0
 8001c00:	460d      	mov	r5, r1
 8001c02:	d8eb      	bhi.n	8001bdc <strncmp+0x34>
 8001c04:	7805      	ldrb	r5, [r0, #0]
 8001c06:	780c      	ldrb	r4, [r1, #0]
 8001c08:	42ac      	cmp	r4, r5
 8001c0a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8001c0e:	d11a      	bne.n	8001c46 <strncmp+0x9e>
 8001c10:	b183      	cbz	r3, 8001c34 <strncmp+0x8c>
 8001c12:	b914      	cbnz	r4, 8001c1a <strncmp+0x72>
 8001c14:	e00e      	b.n	8001c34 <strncmp+0x8c>
 8001c16:	b16b      	cbz	r3, 8001c34 <strncmp+0x8c>
 8001c18:	b17a      	cbz	r2, 8001c3a <strncmp+0x92>
 8001c1a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001c1e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8001c22:	42a2      	cmp	r2, r4
 8001c24:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8001c28:	d0f5      	beq.n	8001c16 <strncmp+0x6e>
 8001c2a:	1b10      	subs	r0, r2, r4
 8001c2c:	bcf0      	pop	{r4, r5, r6, r7}
 8001c2e:	4770      	bx	lr
 8001c30:	4610      	mov	r0, r2
 8001c32:	4770      	bx	lr
 8001c34:	2000      	movs	r0, #0
 8001c36:	bcf0      	pop	{r4, r5, r6, r7}
 8001c38:	4770      	bx	lr
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	bcf0      	pop	{r4, r5, r6, r7}
 8001c3e:	4770      	bx	lr
 8001c40:	4629      	mov	r1, r5
 8001c42:	4638      	mov	r0, r7
 8001c44:	e7de      	b.n	8001c04 <strncmp+0x5c>
 8001c46:	462a      	mov	r2, r5
 8001c48:	e7ef      	b.n	8001c2a <strncmp+0x82>
 8001c4a:	bf00      	nop

08001c4c <_strtoul_r>:
 8001c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c50:	4c49      	ldr	r4, [pc, #292]	; (8001d78 <_strtoul_r+0x12c>)
 8001c52:	4682      	mov	sl, r0
 8001c54:	f8d4 c000 	ldr.w	ip, [r4]
 8001c58:	4608      	mov	r0, r1
 8001c5a:	e000      	b.n	8001c5e <_strtoul_r+0x12>
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	4604      	mov	r4, r0
 8001c60:	f814 5b01 	ldrb.w	r5, [r4], #1
 8001c64:	eb0c 0605 	add.w	r6, ip, r5
 8001c68:	7877      	ldrb	r7, [r6, #1]
 8001c6a:	f017 0708 	ands.w	r7, r7, #8
 8001c6e:	d1f5      	bne.n	8001c5c <_strtoul_r+0x10>
 8001c70:	2d2d      	cmp	r5, #45	; 0x2d
 8001c72:	d058      	beq.n	8001d26 <_strtoul_r+0xda>
 8001c74:	2d2b      	cmp	r5, #43	; 0x2b
 8001c76:	bf04      	itt	eq
 8001c78:	7825      	ldrbeq	r5, [r4, #0]
 8001c7a:	1c84      	addeq	r4, r0, #2
 8001c7c:	b15b      	cbz	r3, 8001c96 <_strtoul_r+0x4a>
 8001c7e:	2b10      	cmp	r3, #16
 8001c80:	d055      	beq.n	8001d2e <_strtoul_r+0xe2>
 8001c82:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8001c86:	fbb8 f8f3 	udiv	r8, r8, r3
 8001c8a:	fb03 fb08 	mul.w	fp, r3, r8
 8001c8e:	ea6f 0b0b 	mvn.w	fp, fp
 8001c92:	4699      	mov	r9, r3
 8001c94:	e007      	b.n	8001ca6 <_strtoul_r+0x5a>
 8001c96:	2d30      	cmp	r5, #48	; 0x30
 8001c98:	d05a      	beq.n	8001d50 <_strtoul_r+0x104>
 8001c9a:	230a      	movs	r3, #10
 8001c9c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8001d7c <_strtoul_r+0x130>
 8001ca0:	4699      	mov	r9, r3
 8001ca2:	f04f 0b05 	mov.w	fp, #5
 8001ca6:	f04f 0e00 	mov.w	lr, #0
 8001caa:	4670      	mov	r0, lr
 8001cac:	e00e      	b.n	8001ccc <_strtoul_r+0x80>
 8001cae:	3d30      	subs	r5, #48	; 0x30
 8001cb0:	42ab      	cmp	r3, r5
 8001cb2:	dd1b      	ble.n	8001cec <_strtoul_r+0xa0>
 8001cb4:	f1be 0f00 	cmp.w	lr, #0
 8001cb8:	db26      	blt.n	8001d08 <_strtoul_r+0xbc>
 8001cba:	4540      	cmp	r0, r8
 8001cbc:	d824      	bhi.n	8001d08 <_strtoul_r+0xbc>
 8001cbe:	d021      	beq.n	8001d04 <_strtoul_r+0xb8>
 8001cc0:	fb09 5000 	mla	r0, r9, r0, r5
 8001cc4:	f04f 0e01 	mov.w	lr, #1
 8001cc8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8001ccc:	eb0c 0605 	add.w	r6, ip, r5
 8001cd0:	7876      	ldrb	r6, [r6, #1]
 8001cd2:	f016 0f04 	tst.w	r6, #4
 8001cd6:	d1ea      	bne.n	8001cae <_strtoul_r+0x62>
 8001cd8:	f016 0603 	ands.w	r6, r6, #3
 8001cdc:	d006      	beq.n	8001cec <_strtoul_r+0xa0>
 8001cde:	2e01      	cmp	r6, #1
 8001ce0:	bf14      	ite	ne
 8001ce2:	2657      	movne	r6, #87	; 0x57
 8001ce4:	2637      	moveq	r6, #55	; 0x37
 8001ce6:	1bad      	subs	r5, r5, r6
 8001ce8:	42ab      	cmp	r3, r5
 8001cea:	dce3      	bgt.n	8001cb4 <_strtoul_r+0x68>
 8001cec:	f1be 0f00 	cmp.w	lr, #0
 8001cf0:	db0f      	blt.n	8001d12 <_strtoul_r+0xc6>
 8001cf2:	b107      	cbz	r7, 8001cf6 <_strtoul_r+0xaa>
 8001cf4:	4240      	negs	r0, r0
 8001cf6:	b152      	cbz	r2, 8001d0e <_strtoul_r+0xc2>
 8001cf8:	f1be 0f00 	cmp.w	lr, #0
 8001cfc:	d10f      	bne.n	8001d1e <_strtoul_r+0xd2>
 8001cfe:	6011      	str	r1, [r2, #0]
 8001d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d04:	455d      	cmp	r5, fp
 8001d06:	dddb      	ble.n	8001cc0 <_strtoul_r+0x74>
 8001d08:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8001d0c:	e7dc      	b.n	8001cc8 <_strtoul_r+0x7c>
 8001d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d12:	2322      	movs	r3, #34	; 0x22
 8001d14:	f8ca 3000 	str.w	r3, [sl]
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d1c:	b352      	cbz	r2, 8001d74 <_strtoul_r+0x128>
 8001d1e:	1e61      	subs	r1, r4, #1
 8001d20:	6011      	str	r1, [r2, #0]
 8001d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d26:	7825      	ldrb	r5, [r4, #0]
 8001d28:	2701      	movs	r7, #1
 8001d2a:	1c84      	adds	r4, r0, #2
 8001d2c:	e7a6      	b.n	8001c7c <_strtoul_r+0x30>
 8001d2e:	2d30      	cmp	r5, #48	; 0x30
 8001d30:	d11a      	bne.n	8001d68 <_strtoul_r+0x11c>
 8001d32:	7820      	ldrb	r0, [r4, #0]
 8001d34:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8001d38:	2858      	cmp	r0, #88	; 0x58
 8001d3a:	d115      	bne.n	8001d68 <_strtoul_r+0x11c>
 8001d3c:	f04f 0910 	mov.w	r9, #16
 8001d40:	7865      	ldrb	r5, [r4, #1]
 8001d42:	464b      	mov	r3, r9
 8001d44:	f04f 0b0f 	mov.w	fp, #15
 8001d48:	3402      	adds	r4, #2
 8001d4a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 8001d4e:	e7aa      	b.n	8001ca6 <_strtoul_r+0x5a>
 8001d50:	7823      	ldrb	r3, [r4, #0]
 8001d52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001d56:	2b58      	cmp	r3, #88	; 0x58
 8001d58:	d0f0      	beq.n	8001d3c <_strtoul_r+0xf0>
 8001d5a:	2308      	movs	r3, #8
 8001d5c:	4699      	mov	r9, r3
 8001d5e:	f04f 0b07 	mov.w	fp, #7
 8001d62:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 8001d66:	e79e      	b.n	8001ca6 <_strtoul_r+0x5a>
 8001d68:	f04f 0b0f 	mov.w	fp, #15
 8001d6c:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 8001d70:	4699      	mov	r9, r3
 8001d72:	e798      	b.n	8001ca6 <_strtoul_r+0x5a>
 8001d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d78:	20001460 	.word	0x20001460
 8001d7c:	19999999 	.word	0x19999999

08001d80 <strtoul>:
 8001d80:	b410      	push	{r4}
 8001d82:	4c04      	ldr	r4, [pc, #16]	; (8001d94 <strtoul+0x14>)
 8001d84:	4613      	mov	r3, r2
 8001d86:	460a      	mov	r2, r1
 8001d88:	4601      	mov	r1, r0
 8001d8a:	6820      	ldr	r0, [r4, #0]
 8001d8c:	bc10      	pop	{r4}
 8001d8e:	f7ff bf5d 	b.w	8001c4c <_strtoul_r>
 8001d92:	bf00      	nop
 8001d94:	200011c8 	.word	0x200011c8

08001d98 <_write_r>:
 8001d98:	b570      	push	{r4, r5, r6, lr}
 8001d9a:	460d      	mov	r5, r1
 8001d9c:	4c08      	ldr	r4, [pc, #32]	; (8001dc0 <_write_r+0x28>)
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4606      	mov	r6, r0
 8001da2:	461a      	mov	r2, r3
 8001da4:	4628      	mov	r0, r5
 8001da6:	2300      	movs	r3, #0
 8001da8:	6023      	str	r3, [r4, #0]
 8001daa:	f002 fca7 	bl	80046fc <_write>
 8001dae:	1c43      	adds	r3, r0, #1
 8001db0:	d000      	beq.n	8001db4 <_write_r+0x1c>
 8001db2:	bd70      	pop	{r4, r5, r6, pc}
 8001db4:	6823      	ldr	r3, [r4, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0fb      	beq.n	8001db2 <_write_r+0x1a>
 8001dba:	6033      	str	r3, [r6, #0]
 8001dbc:	bd70      	pop	{r4, r5, r6, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000338 	.word	0x20000338

08001dc4 <_close_r>:
 8001dc4:	b538      	push	{r3, r4, r5, lr}
 8001dc6:	4c07      	ldr	r4, [pc, #28]	; (8001de4 <_close_r+0x20>)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	4605      	mov	r5, r0
 8001dcc:	4608      	mov	r0, r1
 8001dce:	6023      	str	r3, [r4, #0]
 8001dd0:	f002 fc98 	bl	8004704 <_close>
 8001dd4:	1c43      	adds	r3, r0, #1
 8001dd6:	d000      	beq.n	8001dda <_close_r+0x16>
 8001dd8:	bd38      	pop	{r3, r4, r5, pc}
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0fb      	beq.n	8001dd8 <_close_r+0x14>
 8001de0:	602b      	str	r3, [r5, #0]
 8001de2:	bd38      	pop	{r3, r4, r5, pc}
 8001de4:	20000338 	.word	0x20000338

08001de8 <__env_lock>:
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop

08001dec <__env_unlock>:
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop

08001df0 <_lseek_r>:
 8001df0:	b570      	push	{r4, r5, r6, lr}
 8001df2:	460d      	mov	r5, r1
 8001df4:	4c08      	ldr	r4, [pc, #32]	; (8001e18 <_lseek_r+0x28>)
 8001df6:	4611      	mov	r1, r2
 8001df8:	4606      	mov	r6, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4628      	mov	r0, r5
 8001dfe:	2300      	movs	r3, #0
 8001e00:	6023      	str	r3, [r4, #0]
 8001e02:	f002 fc82 	bl	800470a <_lseek>
 8001e06:	1c43      	adds	r3, r0, #1
 8001e08:	d000      	beq.n	8001e0c <_lseek_r+0x1c>
 8001e0a:	bd70      	pop	{r4, r5, r6, pc}
 8001e0c:	6823      	ldr	r3, [r4, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0fb      	beq.n	8001e0a <_lseek_r+0x1a>
 8001e12:	6033      	str	r3, [r6, #0]
 8001e14:	bd70      	pop	{r4, r5, r6, pc}
 8001e16:	bf00      	nop
 8001e18:	20000338 	.word	0x20000338

08001e1c <_sungetc_r>:
 8001e1c:	b538      	push	{r3, r4, r5, lr}
 8001e1e:	1c4b      	adds	r3, r1, #1
 8001e20:	d01a      	beq.n	8001e58 <_sungetc_r+0x3c>
 8001e22:	8993      	ldrh	r3, [r2, #12]
 8001e24:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8001e26:	f023 0320 	bic.w	r3, r3, #32
 8001e2a:	b2cd      	uxtb	r5, r1
 8001e2c:	8193      	strh	r3, [r2, #12]
 8001e2e:	b1b4      	cbz	r4, 8001e5e <_sungetc_r+0x42>
 8001e30:	4614      	mov	r4, r2
 8001e32:	6852      	ldr	r2, [r2, #4]
 8001e34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e36:	429a      	cmp	r2, r3
 8001e38:	da09      	bge.n	8001e4e <_sungetc_r+0x32>
 8001e3a:	6823      	ldr	r3, [r4, #0]
 8001e3c:	1e5a      	subs	r2, r3, #1
 8001e3e:	6022      	str	r2, [r4, #0]
 8001e40:	f803 5c01 	strb.w	r5, [r3, #-1]
 8001e44:	6863      	ldr	r3, [r4, #4]
 8001e46:	3301      	adds	r3, #1
 8001e48:	6063      	str	r3, [r4, #4]
 8001e4a:	4628      	mov	r0, r5
 8001e4c:	bd38      	pop	{r3, r4, r5, pc}
 8001e4e:	4621      	mov	r1, r4
 8001e50:	f000 fc52 	bl	80026f8 <__submore>
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d0f0      	beq.n	8001e3a <_sungetc_r+0x1e>
 8001e58:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001e5c:	e7f5      	b.n	8001e4a <_sungetc_r+0x2e>
 8001e5e:	6911      	ldr	r1, [r2, #16]
 8001e60:	6813      	ldr	r3, [r2, #0]
 8001e62:	b129      	cbz	r1, 8001e70 <_sungetc_r+0x54>
 8001e64:	4299      	cmp	r1, r3
 8001e66:	d203      	bcs.n	8001e70 <_sungetc_r+0x54>
 8001e68:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8001e6c:	428d      	cmp	r5, r1
 8001e6e:	d00f      	beq.n	8001e90 <_sungetc_r+0x74>
 8001e70:	6393      	str	r3, [r2, #56]	; 0x38
 8001e72:	4613      	mov	r3, r2
 8001e74:	6854      	ldr	r4, [r2, #4]
 8001e76:	63d4      	str	r4, [r2, #60]	; 0x3c
 8001e78:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8001e7c:	2103      	movs	r1, #3
 8001e7e:	6310      	str	r0, [r2, #48]	; 0x30
 8001e80:	6351      	str	r1, [r2, #52]	; 0x34
 8001e82:	f803 5f42 	strb.w	r5, [r3, #66]!
 8001e86:	2101      	movs	r1, #1
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	6051      	str	r1, [r2, #4]
 8001e8c:	4628      	mov	r0, r5
 8001e8e:	bd38      	pop	{r3, r4, r5, pc}
 8001e90:	6851      	ldr	r1, [r2, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	3101      	adds	r1, #1
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	6051      	str	r1, [r2, #4]
 8001e9a:	e7d6      	b.n	8001e4a <_sungetc_r+0x2e>

08001e9c <__ssrefill_r>:
 8001e9c:	b510      	push	{r4, lr}
 8001e9e:	460c      	mov	r4, r1
 8001ea0:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001ea2:	b169      	cbz	r1, 8001ec0 <__ssrefill_r+0x24>
 8001ea4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8001ea8:	4299      	cmp	r1, r3
 8001eaa:	d001      	beq.n	8001eb0 <__ssrefill_r+0x14>
 8001eac:	f7ff fd28 	bl	8001900 <_free_r>
 8001eb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001eb2:	6063      	str	r3, [r4, #4]
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	6320      	str	r0, [r4, #48]	; 0x30
 8001eb8:	b113      	cbz	r3, 8001ec0 <__ssrefill_r+0x24>
 8001eba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ebc:	6023      	str	r3, [r4, #0]
 8001ebe:	bd10      	pop	{r4, pc}
 8001ec0:	89a3      	ldrh	r3, [r4, #12]
 8001ec2:	6922      	ldr	r2, [r4, #16]
 8001ec4:	6022      	str	r2, [r4, #0]
 8001ec6:	f043 0320 	orr.w	r3, r3, #32
 8001eca:	2200      	movs	r2, #0
 8001ecc:	81a3      	strh	r3, [r4, #12]
 8001ece:	6062      	str	r2, [r4, #4]
 8001ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ed4:	bd10      	pop	{r4, pc}
 8001ed6:	bf00      	nop

08001ed8 <__ssvfiscanf_r>:
 8001ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001edc:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8001ee0:	f8df c278 	ldr.w	ip, [pc, #632]	; 800215c <__ssvfiscanf_r+0x284>
 8001ee4:	f8df e278 	ldr.w	lr, [pc, #632]	; 8002160 <__ssvfiscanf_r+0x288>
 8001ee8:	9301      	str	r3, [sp, #4]
 8001eea:	f10d 080c 	add.w	r8, sp, #12
 8001eee:	2300      	movs	r3, #0
 8001ef0:	4d98      	ldr	r5, [pc, #608]	; (8002154 <__ssvfiscanf_r+0x27c>)
 8001ef2:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8002158 <__ssvfiscanf_r+0x280>
 8001ef6:	f8df a26c 	ldr.w	sl, [pc, #620]	; 8002164 <__ssvfiscanf_r+0x28c>
 8001efa:	f8cd c288 	str.w	ip, [sp, #648]	; 0x288
 8001efe:	4607      	mov	r7, r0
 8001f00:	460c      	mov	r4, r1
 8001f02:	4616      	mov	r6, r2
 8001f04:	f8cd e28c 	str.w	lr, [sp, #652]	; 0x28c
 8001f08:	9346      	str	r3, [sp, #280]	; 0x118
 8001f0a:	9347      	str	r3, [sp, #284]	; 0x11c
 8001f0c:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 8001f10:	7833      	ldrb	r3, [r6, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d02d      	beq.n	8001f72 <__ssvfiscanf_r+0x9a>
 8001f16:	682a      	ldr	r2, [r5, #0]
 8001f18:	441a      	add	r2, r3
 8001f1a:	7852      	ldrb	r2, [r2, #1]
 8001f1c:	f012 0208 	ands.w	r2, r2, #8
 8001f20:	d01a      	beq.n	8001f58 <__ssvfiscanf_r+0x80>
 8001f22:	6862      	ldr	r2, [r4, #4]
 8001f24:	e00e      	b.n	8001f44 <__ssvfiscanf_r+0x6c>
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	682a      	ldr	r2, [r5, #0]
 8001f2a:	7819      	ldrb	r1, [r3, #0]
 8001f2c:	440a      	add	r2, r1
 8001f2e:	3301      	adds	r3, #1
 8001f30:	7852      	ldrb	r2, [r2, #1]
 8001f32:	0712      	lsls	r2, r2, #28
 8001f34:	d50e      	bpl.n	8001f54 <__ssvfiscanf_r+0x7c>
 8001f36:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8001f38:	6862      	ldr	r2, [r4, #4]
 8001f3a:	6023      	str	r3, [r4, #0]
 8001f3c:	3101      	adds	r1, #1
 8001f3e:	3a01      	subs	r2, #1
 8001f40:	9147      	str	r1, [sp, #284]	; 0x11c
 8001f42:	6062      	str	r2, [r4, #4]
 8001f44:	2a00      	cmp	r2, #0
 8001f46:	dcee      	bgt.n	8001f26 <__ssvfiscanf_r+0x4e>
 8001f48:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	4638      	mov	r0, r7
 8001f4e:	4798      	blx	r3
 8001f50:	2800      	cmp	r0, #0
 8001f52:	d0e8      	beq.n	8001f26 <__ssvfiscanf_r+0x4e>
 8001f54:	3601      	adds	r6, #1
 8001f56:	e7db      	b.n	8001f10 <__ssvfiscanf_r+0x38>
 8001f58:	2b25      	cmp	r3, #37	; 0x25
 8001f5a:	f106 0b01 	add.w	fp, r6, #1
 8001f5e:	d00d      	beq.n	8001f7c <__ssvfiscanf_r+0xa4>
 8001f60:	6862      	ldr	r2, [r4, #4]
 8001f62:	2a00      	cmp	r2, #0
 8001f64:	f340 80bd 	ble.w	80020e2 <__ssvfiscanf_r+0x20a>
 8001f68:	6822      	ldr	r2, [r4, #0]
 8001f6a:	7811      	ldrb	r1, [r2, #0]
 8001f6c:	428b      	cmp	r3, r1
 8001f6e:	f000 80ae 	beq.w	80020ce <__ssvfiscanf_r+0x1f6>
 8001f72:	9846      	ldr	r0, [sp, #280]	; 0x118
 8001f74:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8001f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f7c:	9245      	str	r2, [sp, #276]	; 0x114
 8001f7e:	9243      	str	r2, [sp, #268]	; 0x10c
 8001f80:	7871      	ldrb	r1, [r6, #1]
 8001f82:	292a      	cmp	r1, #42	; 0x2a
 8001f84:	f000 80b7 	beq.w	80020f6 <__ssvfiscanf_r+0x21e>
 8001f88:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8001f8c:	2a09      	cmp	r2, #9
 8001f8e:	d80c      	bhi.n	8001faa <__ssvfiscanf_r+0xd2>
 8001f90:	2200      	movs	r2, #0
 8001f92:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001f96:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8001f9a:	3a30      	subs	r2, #48	; 0x30
 8001f9c:	9245      	str	r2, [sp, #276]	; 0x114
 8001f9e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8001fa2:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8001fa6:	2809      	cmp	r0, #9
 8001fa8:	d9f3      	bls.n	8001f92 <__ssvfiscanf_r+0xba>
 8001faa:	2203      	movs	r2, #3
 8001fac:	486a      	ldr	r0, [pc, #424]	; (8002158 <__ssvfiscanf_r+0x280>)
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	f000 fe5e 	bl	8002c70 <memchr>
 8001fb4:	9b00      	ldr	r3, [sp, #0]
 8001fb6:	b140      	cbz	r0, 8001fca <__ssvfiscanf_r+0xf2>
 8001fb8:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8001fba:	eba0 0009 	sub.w	r0, r0, r9
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4082      	lsls	r2, r0
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	f10b 0b01 	add.w	fp, fp, #1
 8001fc8:	9243      	str	r2, [sp, #268]	; 0x10c
 8001fca:	f89b 2000 	ldrb.w	r2, [fp]
 8001fce:	f10b 0601 	add.w	r6, fp, #1
 8001fd2:	2a78      	cmp	r2, #120	; 0x78
 8001fd4:	f200 8125 	bhi.w	8002222 <__ssvfiscanf_r+0x34a>
 8001fd8:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001fdc:	012300df 	.word	0x012300df
 8001fe0:	01230123 	.word	0x01230123
 8001fe4:	01230123 	.word	0x01230123
 8001fe8:	01230123 	.word	0x01230123
 8001fec:	01230123 	.word	0x01230123
 8001ff0:	01230123 	.word	0x01230123
 8001ff4:	01230123 	.word	0x01230123
 8001ff8:	01230123 	.word	0x01230123
 8001ffc:	01230123 	.word	0x01230123
 8002000:	01230123 	.word	0x01230123
 8002004:	01230123 	.word	0x01230123
 8002008:	01230123 	.word	0x01230123
 800200c:	01230123 	.word	0x01230123
 8002010:	01230123 	.word	0x01230123
 8002014:	01230123 	.word	0x01230123
 8002018:	01230123 	.word	0x01230123
 800201c:	01230123 	.word	0x01230123
 8002020:	01230123 	.word	0x01230123
 8002024:	00e20123 	.word	0x00e20123
 8002028:	01230123 	.word	0x01230123
 800202c:	01230123 	.word	0x01230123
 8002030:	01230123 	.word	0x01230123
 8002034:	01230123 	.word	0x01230123
 8002038:	01230123 	.word	0x01230123
 800203c:	01230123 	.word	0x01230123
 8002040:	01230123 	.word	0x01230123
 8002044:	01230123 	.word	0x01230123
 8002048:	01230123 	.word	0x01230123
 800204c:	01230123 	.word	0x01230123
 8002050:	01230123 	.word	0x01230123
 8002054:	01230123 	.word	0x01230123
 8002058:	01230123 	.word	0x01230123
 800205c:	01230123 	.word	0x01230123
 8002060:	01230123 	.word	0x01230123
 8002064:	00e40123 	.word	0x00e40123
 8002068:	00e400e4 	.word	0x00e400e4
 800206c:	01230123 	.word	0x01230123
 8002070:	01230123 	.word	0x01230123
 8002074:	01230123 	.word	0x01230123
 8002078:	01230123 	.word	0x01230123
 800207c:	01230123 	.word	0x01230123
 8002080:	01230123 	.word	0x01230123
 8002084:	01230123 	.word	0x01230123
 8002088:	01230123 	.word	0x01230123
 800208c:	012300e7 	.word	0x012300e7
 8002090:	00f20123 	.word	0x00f20123
 8002094:	01230123 	.word	0x01230123
 8002098:	01230123 	.word	0x01230123
 800209c:	01230123 	.word	0x01230123
 80020a0:	00fe0123 	.word	0x00fe0123
 80020a4:	00e40105 	.word	0x00e40105
 80020a8:	00e400e4 	.word	0x00e400e4
 80020ac:	01080123 	.word	0x01080123
 80020b0:	01230123 	.word	0x01230123
 80020b4:	01230123 	.word	0x01230123
 80020b8:	011b010c 	.word	0x011b010c
 80020bc:	0123011f 	.word	0x0123011f
 80020c0:	00930123 	.word	0x00930123
 80020c4:	01050123 	.word	0x01050123
 80020c8:	01230123 	.word	0x01230123
 80020cc:	00e7      	.short	0x00e7
 80020ce:	6861      	ldr	r1, [r4, #4]
 80020d0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80020d2:	3201      	adds	r2, #1
 80020d4:	3901      	subs	r1, #1
 80020d6:	3301      	adds	r3, #1
 80020d8:	6022      	str	r2, [r4, #0]
 80020da:	465e      	mov	r6, fp
 80020dc:	6061      	str	r1, [r4, #4]
 80020de:	9347      	str	r3, [sp, #284]	; 0x11c
 80020e0:	e716      	b.n	8001f10 <__ssvfiscanf_r+0x38>
 80020e2:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	4621      	mov	r1, r4
 80020e8:	4638      	mov	r0, r7
 80020ea:	4790      	blx	r2
 80020ec:	9b00      	ldr	r3, [sp, #0]
 80020ee:	2800      	cmp	r0, #0
 80020f0:	f43f af3a 	beq.w	8001f68 <__ssvfiscanf_r+0x90>
 80020f4:	e025      	b.n	8002142 <__ssvfiscanf_r+0x26a>
 80020f6:	2210      	movs	r2, #16
 80020f8:	9243      	str	r2, [sp, #268]	; 0x10c
 80020fa:	78b1      	ldrb	r1, [r6, #2]
 80020fc:	f106 0b02 	add.w	fp, r6, #2
 8002100:	e742      	b.n	8001f88 <__ssvfiscanf_r+0xb0>
 8002102:	2302      	movs	r3, #2
 8002104:	9349      	str	r3, [sp, #292]	; 0x124
 8002106:	6863      	ldr	r3, [r4, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	f340 809d 	ble.w	8002248 <__ssvfiscanf_r+0x370>
 800210e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002110:	065a      	lsls	r2, r3, #25
 8002112:	d52f      	bpl.n	8002174 <__ssvfiscanf_r+0x29c>
 8002114:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8002116:	2b02      	cmp	r3, #2
 8002118:	f340 8088 	ble.w	800222c <__ssvfiscanf_r+0x354>
 800211c:	2b04      	cmp	r3, #4
 800211e:	f340 808c 	ble.w	800223a <__ssvfiscanf_r+0x362>
 8002122:	f1ba 0f00 	cmp.w	sl, #0
 8002126:	f43f aef3 	beq.w	8001f10 <__ssvfiscanf_r+0x38>
 800212a:	ab01      	add	r3, sp, #4
 800212c:	4622      	mov	r2, r4
 800212e:	a943      	add	r1, sp, #268	; 0x10c
 8002130:	4638      	mov	r0, r7
 8002132:	f3af 8000 	nop.w
 8002136:	2801      	cmp	r0, #1
 8002138:	f43f af1b 	beq.w	8001f72 <__ssvfiscanf_r+0x9a>
 800213c:	2802      	cmp	r0, #2
 800213e:	f47f aee7 	bne.w	8001f10 <__ssvfiscanf_r+0x38>
 8002142:	9846      	ldr	r0, [sp, #280]	; 0x118
 8002144:	b348      	cbz	r0, 800219a <__ssvfiscanf_r+0x2c2>
 8002146:	89a3      	ldrh	r3, [r4, #12]
 8002148:	f013 0f40 	tst.w	r3, #64	; 0x40
 800214c:	bf18      	it	ne
 800214e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8002152:	e70f      	b.n	8001f74 <__ssvfiscanf_r+0x9c>
 8002154:	20001460 	.word	0x20001460
 8002158:	080068e8 	.word	0x080068e8
 800215c:	08001e1d 	.word	0x08001e1d
 8002160:	08001e9d 	.word	0x08001e9d
 8002164:	00000000 	.word	0x00000000
 8002168:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800216a:	4621      	mov	r1, r4
 800216c:	4638      	mov	r0, r7
 800216e:	4798      	blx	r3
 8002170:	2800      	cmp	r0, #0
 8002172:	d1e6      	bne.n	8002142 <__ssvfiscanf_r+0x26a>
 8002174:	6828      	ldr	r0, [r5, #0]
 8002176:	6822      	ldr	r2, [r4, #0]
 8002178:	e000      	b.n	800217c <__ssvfiscanf_r+0x2a4>
 800217a:	6022      	str	r2, [r4, #0]
 800217c:	7813      	ldrb	r3, [r2, #0]
 800217e:	4403      	add	r3, r0
 8002180:	3201      	adds	r2, #1
 8002182:	785b      	ldrb	r3, [r3, #1]
 8002184:	071b      	lsls	r3, r3, #28
 8002186:	d5c5      	bpl.n	8002114 <__ssvfiscanf_r+0x23c>
 8002188:	6863      	ldr	r3, [r4, #4]
 800218a:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800218c:	3b01      	subs	r3, #1
 800218e:	3101      	adds	r1, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	9147      	str	r1, [sp, #284]	; 0x11c
 8002194:	6063      	str	r3, [r4, #4]
 8002196:	dcf0      	bgt.n	800217a <__ssvfiscanf_r+0x2a2>
 8002198:	e7e6      	b.n	8002168 <__ssvfiscanf_r+0x290>
 800219a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800219e:	e6e9      	b.n	8001f74 <__ssvfiscanf_r+0x9c>
 80021a0:	46b3      	mov	fp, r6
 80021a2:	e6dd      	b.n	8001f60 <__ssvfiscanf_r+0x88>
 80021a4:	2305      	movs	r3, #5
 80021a6:	9349      	str	r3, [sp, #292]	; 0x124
 80021a8:	e7ad      	b.n	8002106 <__ssvfiscanf_r+0x22e>
 80021aa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80021ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021b0:	2110      	movs	r1, #16
 80021b2:	9343      	str	r3, [sp, #268]	; 0x10c
 80021b4:	9144      	str	r1, [sp, #272]	; 0x110
 80021b6:	2a6e      	cmp	r2, #110	; 0x6e
 80021b8:	bfcc      	ite	gt
 80021ba:	2304      	movgt	r3, #4
 80021bc:	2303      	movle	r3, #3
 80021be:	e7a1      	b.n	8002104 <__ssvfiscanf_r+0x22c>
 80021c0:	4631      	mov	r1, r6
 80021c2:	4640      	mov	r0, r8
 80021c4:	f000 f9ca 	bl	800255c <__sccl>
 80021c8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80021ca:	2201      	movs	r2, #1
 80021cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021d0:	4606      	mov	r6, r0
 80021d2:	9343      	str	r3, [sp, #268]	; 0x10c
 80021d4:	9249      	str	r2, [sp, #292]	; 0x124
 80021d6:	e796      	b.n	8002106 <__ssvfiscanf_r+0x22e>
 80021d8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80021da:	2200      	movs	r2, #0
 80021dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021e0:	9343      	str	r3, [sp, #268]	; 0x10c
 80021e2:	9249      	str	r2, [sp, #292]	; 0x124
 80021e4:	e78f      	b.n	8002106 <__ssvfiscanf_r+0x22e>
 80021e6:	230a      	movs	r3, #10
 80021e8:	9344      	str	r3, [sp, #272]	; 0x110
 80021ea:	e7e4      	b.n	80021b6 <__ssvfiscanf_r+0x2de>
 80021ec:	2300      	movs	r3, #0
 80021ee:	9344      	str	r3, [sp, #272]	; 0x110
 80021f0:	2303      	movs	r3, #3
 80021f2:	e787      	b.n	8002104 <__ssvfiscanf_r+0x22c>
 80021f4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80021f6:	06d8      	lsls	r0, r3, #27
 80021f8:	f53f ae8a 	bmi.w	8001f10 <__ssvfiscanf_r+0x38>
 80021fc:	07d9      	lsls	r1, r3, #31
 80021fe:	9b01      	ldr	r3, [sp, #4]
 8002200:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8002202:	f103 0104 	add.w	r1, r3, #4
 8002206:	9101      	str	r1, [sp, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	bf4c      	ite	mi
 800220c:	801a      	strhmi	r2, [r3, #0]
 800220e:	601a      	strpl	r2, [r3, #0]
 8002210:	e67e      	b.n	8001f10 <__ssvfiscanf_r+0x38>
 8002212:	2308      	movs	r3, #8
 8002214:	9344      	str	r3, [sp, #272]	; 0x110
 8002216:	2304      	movs	r3, #4
 8002218:	e774      	b.n	8002104 <__ssvfiscanf_r+0x22c>
 800221a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800221c:	f043 0320 	orr.w	r3, r3, #32
 8002220:	e7c4      	b.n	80021ac <__ssvfiscanf_r+0x2d4>
 8002222:	2203      	movs	r2, #3
 8002224:	230a      	movs	r3, #10
 8002226:	9249      	str	r2, [sp, #292]	; 0x124
 8002228:	9344      	str	r3, [sp, #272]	; 0x110
 800222a:	e76c      	b.n	8002106 <__ssvfiscanf_r+0x22e>
 800222c:	ab01      	add	r3, sp, #4
 800222e:	4622      	mov	r2, r4
 8002230:	a943      	add	r1, sp, #268	; 0x10c
 8002232:	4638      	mov	r0, r7
 8002234:	f000 f810 	bl	8002258 <_scanf_chars>
 8002238:	e77d      	b.n	8002136 <__ssvfiscanf_r+0x25e>
 800223a:	ab01      	add	r3, sp, #4
 800223c:	4622      	mov	r2, r4
 800223e:	a943      	add	r1, sp, #268	; 0x10c
 8002240:	4638      	mov	r0, r7
 8002242:	f000 f86b 	bl	800231c <_scanf_i>
 8002246:	e776      	b.n	8002136 <__ssvfiscanf_r+0x25e>
 8002248:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800224a:	4621      	mov	r1, r4
 800224c:	4638      	mov	r0, r7
 800224e:	4798      	blx	r3
 8002250:	2800      	cmp	r0, #0
 8002252:	f43f af5c 	beq.w	800210e <__ssvfiscanf_r+0x236>
 8002256:	e774      	b.n	8002142 <__ssvfiscanf_r+0x26a>

08002258 <_scanf_chars>:
 8002258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800225c:	460d      	mov	r5, r1
 800225e:	6889      	ldr	r1, [r1, #8]
 8002260:	4680      	mov	r8, r0
 8002262:	4614      	mov	r4, r2
 8002264:	69a8      	ldr	r0, [r5, #24]
 8002266:	b929      	cbnz	r1, 8002274 <_scanf_chars+0x1c>
 8002268:	2800      	cmp	r0, #0
 800226a:	bf0c      	ite	eq
 800226c:	2201      	moveq	r2, #1
 800226e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8002272:	60aa      	str	r2, [r5, #8]
 8002274:	682a      	ldr	r2, [r5, #0]
 8002276:	06d6      	lsls	r6, r2, #27
 8002278:	d549      	bpl.n	800230e <_scanf_chars+0xb6>
 800227a:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8002318 <_scanf_chars+0xc0>
 800227e:	2600      	movs	r6, #0
 8002280:	b310      	cbz	r0, 80022c8 <_scanf_chars+0x70>
 8002282:	2801      	cmp	r0, #1
 8002284:	d022      	beq.n	80022cc <_scanf_chars+0x74>
 8002286:	2802      	cmp	r0, #2
 8002288:	d127      	bne.n	80022da <_scanf_chars+0x82>
 800228a:	6823      	ldr	r3, [r4, #0]
 800228c:	f8d9 2000 	ldr.w	r2, [r9]
 8002290:	7819      	ldrb	r1, [r3, #0]
 8002292:	440a      	add	r2, r1
 8002294:	7852      	ldrb	r2, [r2, #1]
 8002296:	0712      	lsls	r2, r2, #28
 8002298:	d41f      	bmi.n	80022da <_scanf_chars+0x82>
 800229a:	682a      	ldr	r2, [r5, #0]
 800229c:	06d1      	lsls	r1, r2, #27
 800229e:	f106 0601 	add.w	r6, r6, #1
 80022a2:	d403      	bmi.n	80022ac <_scanf_chars+0x54>
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	703b      	strb	r3, [r7, #0]
 80022a8:	6823      	ldr	r3, [r4, #0]
 80022aa:	3701      	adds	r7, #1
 80022ac:	68a9      	ldr	r1, [r5, #8]
 80022ae:	6860      	ldr	r0, [r4, #4]
 80022b0:	3301      	adds	r3, #1
 80022b2:	3801      	subs	r0, #1
 80022b4:	3901      	subs	r1, #1
 80022b6:	6023      	str	r3, [r4, #0]
 80022b8:	6060      	str	r0, [r4, #4]
 80022ba:	60a9      	str	r1, [r5, #8]
 80022bc:	b169      	cbz	r1, 80022da <_scanf_chars+0x82>
 80022be:	2800      	cmp	r0, #0
 80022c0:	dd1b      	ble.n	80022fa <_scanf_chars+0xa2>
 80022c2:	69a8      	ldr	r0, [r5, #24]
 80022c4:	2800      	cmp	r0, #0
 80022c6:	d1dc      	bne.n	8002282 <_scanf_chars+0x2a>
 80022c8:	6823      	ldr	r3, [r4, #0]
 80022ca:	e7e6      	b.n	800229a <_scanf_chars+0x42>
 80022cc:	6823      	ldr	r3, [r4, #0]
 80022ce:	696a      	ldr	r2, [r5, #20]
 80022d0:	7819      	ldrb	r1, [r3, #0]
 80022d2:	5c52      	ldrb	r2, [r2, r1]
 80022d4:	2a00      	cmp	r2, #0
 80022d6:	d1e0      	bne.n	800229a <_scanf_chars+0x42>
 80022d8:	b1be      	cbz	r6, 800230a <_scanf_chars+0xb2>
 80022da:	682b      	ldr	r3, [r5, #0]
 80022dc:	f013 0310 	ands.w	r3, r3, #16
 80022e0:	d105      	bne.n	80022ee <_scanf_chars+0x96>
 80022e2:	68ea      	ldr	r2, [r5, #12]
 80022e4:	69a9      	ldr	r1, [r5, #24]
 80022e6:	3201      	adds	r2, #1
 80022e8:	60ea      	str	r2, [r5, #12]
 80022ea:	b101      	cbz	r1, 80022ee <_scanf_chars+0x96>
 80022ec:	703b      	strb	r3, [r7, #0]
 80022ee:	692b      	ldr	r3, [r5, #16]
 80022f0:	441e      	add	r6, r3
 80022f2:	612e      	str	r6, [r5, #16]
 80022f4:	2000      	movs	r0, #0
 80022f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022fa:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
 80022fe:	4621      	mov	r1, r4
 8002300:	4640      	mov	r0, r8
 8002302:	4798      	blx	r3
 8002304:	2800      	cmp	r0, #0
 8002306:	d0dc      	beq.n	80022c2 <_scanf_chars+0x6a>
 8002308:	e7e7      	b.n	80022da <_scanf_chars+0x82>
 800230a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	1d11      	adds	r1, r2, #4
 8002312:	6019      	str	r1, [r3, #0]
 8002314:	6817      	ldr	r7, [r2, #0]
 8002316:	e7b0      	b.n	800227a <_scanf_chars+0x22>
 8002318:	20001460 	.word	0x20001460

0800231c <_scanf_i>:
 800231c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002320:	460c      	mov	r4, r1
 8002322:	b087      	sub	sp, #28
 8002324:	4f7e      	ldr	r7, [pc, #504]	; (8002520 <_scanf_i+0x204>)
 8002326:	f8df 8204 	ldr.w	r8, [pc, #516]	; 800252c <_scanf_i+0x210>
 800232a:	4e7e      	ldr	r6, [pc, #504]	; (8002524 <_scanf_i+0x208>)
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	4681      	mov	r9, r0
 8002330:	4615      	mov	r5, r2
 8002332:	69a3      	ldr	r3, [r4, #24]
 8002334:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8002338:	68a7      	ldr	r7, [r4, #8]
 800233a:	2b03      	cmp	r3, #3
 800233c:	bf08      	it	eq
 800233e:	46b0      	moveq	r8, r6
 8002340:	f107 3eff 	add.w	lr, r7, #4294967295	; 0xffffffff
 8002344:	f8cd 8000 	str.w	r8, [sp]
 8002348:	f5be 7fae 	cmp.w	lr, #348	; 0x15c
 800234c:	f10d 080c 	add.w	r8, sp, #12
 8002350:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8002354:	f240 8090 	bls.w	8002478 <_scanf_i+0x15c>
 8002358:	f240 135d 	movw	r3, #349	; 0x15d
 800235c:	f46f 76ae 	mvn.w	r6, #348	; 0x15c
 8002360:	4437      	add	r7, r6
 8002362:	60a3      	str	r3, [r4, #8]
 8002364:	6823      	ldr	r3, [r4, #0]
 8002366:	f104 0b1c 	add.w	fp, r4, #28
 800236a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800236e:	6023      	str	r3, [r4, #0]
 8002370:	465e      	mov	r6, fp
 8002372:	f04f 0a00 	mov.w	sl, #0
 8002376:	682b      	ldr	r3, [r5, #0]
 8002378:	f858 002a 	ldr.w	r0, [r8, sl, lsl #2]
 800237c:	7819      	ldrb	r1, [r3, #0]
 800237e:	2202      	movs	r2, #2
 8002380:	f000 fc76 	bl	8002c70 <memchr>
 8002384:	b1c0      	cbz	r0, 80023b8 <_scanf_i+0x9c>
 8002386:	f1ba 0f01 	cmp.w	sl, #1
 800238a:	f000 80ae 	beq.w	80024ea <_scanf_i+0x1ce>
 800238e:	f1ba 0f02 	cmp.w	sl, #2
 8002392:	f000 80b1 	beq.w	80024f8 <_scanf_i+0x1dc>
 8002396:	68a3      	ldr	r3, [r4, #8]
 8002398:	1e5a      	subs	r2, r3, #1
 800239a:	60a2      	str	r2, [r4, #8]
 800239c:	b163      	cbz	r3, 80023b8 <_scanf_i+0x9c>
 800239e:	682b      	ldr	r3, [r5, #0]
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	602a      	str	r2, [r5, #0]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	7033      	strb	r3, [r6, #0]
 80023a8:	686b      	ldr	r3, [r5, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f106 0601 	add.w	r6, r6, #1
 80023b2:	606b      	str	r3, [r5, #4]
 80023b4:	f340 8081 	ble.w	80024ba <_scanf_i+0x19e>
 80023b8:	f10a 0a01 	add.w	sl, sl, #1
 80023bc:	f1ba 0f03 	cmp.w	sl, #3
 80023c0:	d1d9      	bne.n	8002376 <_scanf_i+0x5a>
 80023c2:	6861      	ldr	r1, [r4, #4]
 80023c4:	2900      	cmp	r1, #0
 80023c6:	d059      	beq.n	800247c <_scanf_i+0x160>
 80023c8:	f1c1 0110 	rsb	r1, r1, #16
 80023cc:	4b56      	ldr	r3, [pc, #344]	; (8002528 <_scanf_i+0x20c>)
 80023ce:	6960      	ldr	r0, [r4, #20]
 80023d0:	4419      	add	r1, r3
 80023d2:	f000 f8c3 	bl	800255c <__sccl>
 80023d6:	68a3      	ldr	r3, [r4, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d076      	beq.n	80024ca <_scanf_i+0x1ae>
 80023dc:	6829      	ldr	r1, [r5, #0]
 80023de:	6960      	ldr	r0, [r4, #20]
 80023e0:	780a      	ldrb	r2, [r1, #0]
 80023e2:	5c80      	ldrb	r0, [r0, r2]
 80023e4:	2800      	cmp	r0, #0
 80023e6:	d07e      	beq.n	80024e6 <_scanf_i+0x1ca>
 80023e8:	f04f 0800 	mov.w	r8, #0
 80023ec:	e016      	b.n	800241c <_scanf_i+0x100>
 80023ee:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80023f2:	6022      	str	r2, [r4, #0]
 80023f4:	780b      	ldrb	r3, [r1, #0]
 80023f6:	7033      	strb	r3, [r6, #0]
 80023f8:	3601      	adds	r6, #1
 80023fa:	686b      	ldr	r3, [r5, #4]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	606b      	str	r3, [r5, #4]
 8002402:	dd1d      	ble.n	8002440 <_scanf_i+0x124>
 8002404:	682b      	ldr	r3, [r5, #0]
 8002406:	3301      	adds	r3, #1
 8002408:	602b      	str	r3, [r5, #0]
 800240a:	68a3      	ldr	r3, [r4, #8]
 800240c:	3b01      	subs	r3, #1
 800240e:	60a3      	str	r3, [r4, #8]
 8002410:	b1eb      	cbz	r3, 800244e <_scanf_i+0x132>
 8002412:	6829      	ldr	r1, [r5, #0]
 8002414:	6960      	ldr	r0, [r4, #20]
 8002416:	780a      	ldrb	r2, [r1, #0]
 8002418:	5c80      	ldrb	r0, [r0, r2]
 800241a:	b1c0      	cbz	r0, 800244e <_scanf_i+0x132>
 800241c:	2a30      	cmp	r2, #48	; 0x30
 800241e:	6822      	ldr	r2, [r4, #0]
 8002420:	d1e5      	bne.n	80023ee <_scanf_i+0xd2>
 8002422:	0510      	lsls	r0, r2, #20
 8002424:	d5e3      	bpl.n	80023ee <_scanf_i+0xd2>
 8002426:	f108 0801 	add.w	r8, r8, #1
 800242a:	2f00      	cmp	r7, #0
 800242c:	d0e5      	beq.n	80023fa <_scanf_i+0xde>
 800242e:	3301      	adds	r3, #1
 8002430:	60a3      	str	r3, [r4, #8]
 8002432:	686b      	ldr	r3, [r5, #4]
 8002434:	3b01      	subs	r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 800243c:	606b      	str	r3, [r5, #4]
 800243e:	dce1      	bgt.n	8002404 <_scanf_i+0xe8>
 8002440:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002444:	4629      	mov	r1, r5
 8002446:	4648      	mov	r0, r9
 8002448:	4798      	blx	r3
 800244a:	2800      	cmp	r0, #0
 800244c:	d0dd      	beq.n	800240a <_scanf_i+0xee>
 800244e:	6822      	ldr	r2, [r4, #0]
 8002450:	05d1      	lsls	r1, r2, #23
 8002452:	d504      	bpl.n	800245e <_scanf_i+0x142>
 8002454:	455e      	cmp	r6, fp
 8002456:	d83b      	bhi.n	80024d0 <_scanf_i+0x1b4>
 8002458:	455e      	cmp	r6, fp
 800245a:	d042      	beq.n	80024e2 <_scanf_i+0x1c6>
 800245c:	6822      	ldr	r2, [r4, #0]
 800245e:	f012 0210 	ands.w	r2, r2, #16
 8002462:	d00f      	beq.n	8002484 <_scanf_i+0x168>
 8002464:	6923      	ldr	r3, [r4, #16]
 8002466:	eba6 060b 	sub.w	r6, r6, fp
 800246a:	44b0      	add	r8, r6
 800246c:	4443      	add	r3, r8
 800246e:	6123      	str	r3, [r4, #16]
 8002470:	2000      	movs	r0, #0
 8002472:	b007      	add	sp, #28
 8002474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002478:	2700      	movs	r7, #0
 800247a:	e773      	b.n	8002364 <_scanf_i+0x48>
 800247c:	230a      	movs	r3, #10
 800247e:	6063      	str	r3, [r4, #4]
 8002480:	2106      	movs	r1, #6
 8002482:	e7a3      	b.n	80023cc <_scanf_i+0xb0>
 8002484:	7032      	strb	r2, [r6, #0]
 8002486:	6863      	ldr	r3, [r4, #4]
 8002488:	9d00      	ldr	r5, [sp, #0]
 800248a:	4659      	mov	r1, fp
 800248c:	4648      	mov	r0, r9
 800248e:	47a8      	blx	r5
 8002490:	6823      	ldr	r3, [r4, #0]
 8002492:	9901      	ldr	r1, [sp, #4]
 8002494:	069a      	lsls	r2, r3, #26
 8002496:	d407      	bmi.n	80024a8 <_scanf_i+0x18c>
 8002498:	07db      	lsls	r3, r3, #31
 800249a:	d505      	bpl.n	80024a8 <_scanf_i+0x18c>
 800249c:	680b      	ldr	r3, [r1, #0]
 800249e:	1d1a      	adds	r2, r3, #4
 80024a0:	600a      	str	r2, [r1, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	8018      	strh	r0, [r3, #0]
 80024a6:	e004      	b.n	80024b2 <_scanf_i+0x196>
 80024a8:	680b      	ldr	r3, [r1, #0]
 80024aa:	1d1a      	adds	r2, r3, #4
 80024ac:	600a      	str	r2, [r1, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6018      	str	r0, [r3, #0]
 80024b2:	68e3      	ldr	r3, [r4, #12]
 80024b4:	3301      	adds	r3, #1
 80024b6:	60e3      	str	r3, [r4, #12]
 80024b8:	e7d4      	b.n	8002464 <_scanf_i+0x148>
 80024ba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80024be:	4629      	mov	r1, r5
 80024c0:	4648      	mov	r0, r9
 80024c2:	4798      	blx	r3
 80024c4:	2800      	cmp	r0, #0
 80024c6:	f43f af77 	beq.w	80023b8 <_scanf_i+0x9c>
 80024ca:	f04f 0800 	mov.w	r8, #0
 80024ce:	e7be      	b.n	800244e <_scanf_i+0x132>
 80024d0:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80024d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80024d8:	462a      	mov	r2, r5
 80024da:	4648      	mov	r0, r9
 80024dc:	4798      	blx	r3
 80024de:	3e01      	subs	r6, #1
 80024e0:	e7ba      	b.n	8002458 <_scanf_i+0x13c>
 80024e2:	2001      	movs	r0, #1
 80024e4:	e7c5      	b.n	8002472 <_scanf_i+0x156>
 80024e6:	4680      	mov	r8, r0
 80024e8:	e7b1      	b.n	800244e <_scanf_i+0x132>
 80024ea:	6863      	ldr	r3, [r4, #4]
 80024ec:	b18b      	cbz	r3, 8002512 <_scanf_i+0x1f6>
 80024ee:	6823      	ldr	r3, [r4, #0]
 80024f0:	f423 63a0 	bic.w	r3, r3, #1280	; 0x500
 80024f4:	6023      	str	r3, [r4, #0]
 80024f6:	e74e      	b.n	8002396 <_scanf_i+0x7a>
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	f403 62c0 	and.w	r2, r3, #1536	; 0x600
 80024fe:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002502:	f47f af5e 	bne.w	80023c2 <_scanf_i+0xa6>
 8002506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250a:	6023      	str	r3, [r4, #0]
 800250c:	2310      	movs	r3, #16
 800250e:	6063      	str	r3, [r4, #4]
 8002510:	e741      	b.n	8002396 <_scanf_i+0x7a>
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	2208      	movs	r2, #8
 8002516:	6062      	str	r2, [r4, #4]
 8002518:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800251c:	e7e8      	b.n	80024f0 <_scanf_i+0x1d4>
 800251e:	bf00      	nop
 8002520:	080060f8 	.word	0x080060f8
 8002524:	080025d1 	.word	0x080025d1
 8002528:	080068ec 	.word	0x080068ec
 800252c:	08001c4d 	.word	0x08001c4d

08002530 <_read_r>:
 8002530:	b570      	push	{r4, r5, r6, lr}
 8002532:	460d      	mov	r5, r1
 8002534:	4c08      	ldr	r4, [pc, #32]	; (8002558 <_read_r+0x28>)
 8002536:	4611      	mov	r1, r2
 8002538:	4606      	mov	r6, r0
 800253a:	461a      	mov	r2, r3
 800253c:	4628      	mov	r0, r5
 800253e:	2300      	movs	r3, #0
 8002540:	6023      	str	r3, [r4, #0]
 8002542:	f002 f8d7 	bl	80046f4 <_read>
 8002546:	1c43      	adds	r3, r0, #1
 8002548:	d000      	beq.n	800254c <_read_r+0x1c>
 800254a:	bd70      	pop	{r4, r5, r6, pc}
 800254c:	6823      	ldr	r3, [r4, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0fb      	beq.n	800254a <_read_r+0x1a>
 8002552:	6033      	str	r3, [r6, #0]
 8002554:	bd70      	pop	{r4, r5, r6, pc}
 8002556:	bf00      	nop
 8002558:	20000338 	.word	0x20000338

0800255c <__sccl>:
 800255c:	b470      	push	{r4, r5, r6}
 800255e:	780c      	ldrb	r4, [r1, #0]
 8002560:	2c5e      	cmp	r4, #94	; 0x5e
 8002562:	d02f      	beq.n	80025c4 <__sccl+0x68>
 8002564:	2200      	movs	r2, #0
 8002566:	1c4d      	adds	r5, r1, #1
 8002568:	4616      	mov	r6, r2
 800256a:	1e43      	subs	r3, r0, #1
 800256c:	f100 01ff 	add.w	r1, r0, #255	; 0xff
 8002570:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002574:	428b      	cmp	r3, r1
 8002576:	d1fb      	bne.n	8002570 <__sccl+0x14>
 8002578:	b174      	cbz	r4, 8002598 <__sccl+0x3c>
 800257a:	f086 0201 	eor.w	r2, r6, #1
 800257e:	5502      	strb	r2, [r0, r4]
 8002580:	1c6e      	adds	r6, r5, #1
 8002582:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8002586:	2b2d      	cmp	r3, #45	; 0x2d
 8002588:	4631      	mov	r1, r6
 800258a:	d00d      	beq.n	80025a8 <__sccl+0x4c>
 800258c:	2b5d      	cmp	r3, #93	; 0x5d
 800258e:	d004      	beq.n	800259a <__sccl+0x3e>
 8002590:	b133      	cbz	r3, 80025a0 <__sccl+0x44>
 8002592:	461c      	mov	r4, r3
 8002594:	4635      	mov	r5, r6
 8002596:	e7f2      	b.n	800257e <__sccl+0x22>
 8002598:	1e69      	subs	r1, r5, #1
 800259a:	4608      	mov	r0, r1
 800259c:	bc70      	pop	{r4, r5, r6}
 800259e:	4770      	bx	lr
 80025a0:	4629      	mov	r1, r5
 80025a2:	4608      	mov	r0, r1
 80025a4:	bc70      	pop	{r4, r5, r6}
 80025a6:	4770      	bx	lr
 80025a8:	7869      	ldrb	r1, [r5, #1]
 80025aa:	295d      	cmp	r1, #93	; 0x5d
 80025ac:	d0f1      	beq.n	8002592 <__sccl+0x36>
 80025ae:	428c      	cmp	r4, r1
 80025b0:	dcef      	bgt.n	8002592 <__sccl+0x36>
 80025b2:	3502      	adds	r5, #2
 80025b4:	1903      	adds	r3, r0, r4
 80025b6:	3401      	adds	r4, #1
 80025b8:	42a1      	cmp	r1, r4
 80025ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80025be:	dcfa      	bgt.n	80025b6 <__sccl+0x5a>
 80025c0:	3602      	adds	r6, #2
 80025c2:	e7de      	b.n	8002582 <__sccl+0x26>
 80025c4:	2201      	movs	r2, #1
 80025c6:	784c      	ldrb	r4, [r1, #1]
 80025c8:	4616      	mov	r6, r2
 80025ca:	1c8d      	adds	r5, r1, #2
 80025cc:	e7cd      	b.n	800256a <__sccl+0xe>
 80025ce:	bf00      	nop

080025d0 <_strtol_r>:
 80025d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025d4:	4c41      	ldr	r4, [pc, #260]	; (80026dc <_strtol_r+0x10c>)
 80025d6:	b083      	sub	sp, #12
 80025d8:	f8d4 c000 	ldr.w	ip, [r4]
 80025dc:	9001      	str	r0, [sp, #4]
 80025de:	4608      	mov	r0, r1
 80025e0:	e000      	b.n	80025e4 <_strtol_r+0x14>
 80025e2:	4628      	mov	r0, r5
 80025e4:	4605      	mov	r5, r0
 80025e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80025ea:	eb0c 0604 	add.w	r6, ip, r4
 80025ee:	7877      	ldrb	r7, [r6, #1]
 80025f0:	f017 0708 	ands.w	r7, r7, #8
 80025f4:	d1f5      	bne.n	80025e2 <_strtol_r+0x12>
 80025f6:	2c2d      	cmp	r4, #45	; 0x2d
 80025f8:	d04b      	beq.n	8002692 <_strtol_r+0xc2>
 80025fa:	2c2b      	cmp	r4, #43	; 0x2b
 80025fc:	bf04      	itt	eq
 80025fe:	782c      	ldrbeq	r4, [r5, #0]
 8002600:	1c85      	addeq	r5, r0, #2
 8002602:	b11b      	cbz	r3, 800260c <_strtol_r+0x3c>
 8002604:	2b10      	cmp	r3, #16
 8002606:	d053      	beq.n	80026b0 <_strtol_r+0xe0>
 8002608:	4699      	mov	r9, r3
 800260a:	e003      	b.n	8002614 <_strtol_r+0x44>
 800260c:	2c30      	cmp	r4, #48	; 0x30
 800260e:	d05c      	beq.n	80026ca <_strtol_r+0xfa>
 8002610:	230a      	movs	r3, #10
 8002612:	4699      	mov	r9, r3
 8002614:	2f00      	cmp	r7, #0
 8002616:	bf0c      	ite	eq
 8002618:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
 800261c:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
 8002620:	f04f 0e00 	mov.w	lr, #0
 8002624:	fbba f8f9 	udiv	r8, sl, r9
 8002628:	4670      	mov	r0, lr
 800262a:	fb09 ab18 	mls	fp, r9, r8, sl
 800262e:	e00e      	b.n	800264e <_strtol_r+0x7e>
 8002630:	3c30      	subs	r4, #48	; 0x30
 8002632:	42a3      	cmp	r3, r4
 8002634:	dd1b      	ble.n	800266e <_strtol_r+0x9e>
 8002636:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800263a:	d006      	beq.n	800264a <_strtol_r+0x7a>
 800263c:	4540      	cmp	r0, r8
 800263e:	d825      	bhi.n	800268c <_strtol_r+0xbc>
 8002640:	d022      	beq.n	8002688 <_strtol_r+0xb8>
 8002642:	fb09 4000 	mla	r0, r9, r0, r4
 8002646:	f04f 0e01 	mov.w	lr, #1
 800264a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800264e:	eb0c 0604 	add.w	r6, ip, r4
 8002652:	7876      	ldrb	r6, [r6, #1]
 8002654:	f016 0f04 	tst.w	r6, #4
 8002658:	d1ea      	bne.n	8002630 <_strtol_r+0x60>
 800265a:	f016 0603 	ands.w	r6, r6, #3
 800265e:	d006      	beq.n	800266e <_strtol_r+0x9e>
 8002660:	2e01      	cmp	r6, #1
 8002662:	bf14      	ite	ne
 8002664:	2657      	movne	r6, #87	; 0x57
 8002666:	2637      	moveq	r6, #55	; 0x37
 8002668:	1ba4      	subs	r4, r4, r6
 800266a:	42a3      	cmp	r3, r4
 800266c:	dce3      	bgt.n	8002636 <_strtol_r+0x66>
 800266e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8002672:	d012      	beq.n	800269a <_strtol_r+0xca>
 8002674:	b107      	cbz	r7, 8002678 <_strtol_r+0xa8>
 8002676:	4240      	negs	r0, r0
 8002678:	b11a      	cbz	r2, 8002682 <_strtol_r+0xb2>
 800267a:	f1be 0f00 	cmp.w	lr, #0
 800267e:	d115      	bne.n	80026ac <_strtol_r+0xdc>
 8002680:	6011      	str	r1, [r2, #0]
 8002682:	b003      	add	sp, #12
 8002684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002688:	455c      	cmp	r4, fp
 800268a:	ddda      	ble.n	8002642 <_strtol_r+0x72>
 800268c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8002690:	e7db      	b.n	800264a <_strtol_r+0x7a>
 8002692:	782c      	ldrb	r4, [r5, #0]
 8002694:	2701      	movs	r7, #1
 8002696:	1c85      	adds	r5, r0, #2
 8002698:	e7b3      	b.n	8002602 <_strtol_r+0x32>
 800269a:	9901      	ldr	r1, [sp, #4]
 800269c:	2322      	movs	r3, #34	; 0x22
 800269e:	600b      	str	r3, [r1, #0]
 80026a0:	4650      	mov	r0, sl
 80026a2:	2a00      	cmp	r2, #0
 80026a4:	d0ed      	beq.n	8002682 <_strtol_r+0xb2>
 80026a6:	1e69      	subs	r1, r5, #1
 80026a8:	4650      	mov	r0, sl
 80026aa:	e7e9      	b.n	8002680 <_strtol_r+0xb0>
 80026ac:	4682      	mov	sl, r0
 80026ae:	e7fa      	b.n	80026a6 <_strtol_r+0xd6>
 80026b0:	2c30      	cmp	r4, #48	; 0x30
 80026b2:	d1a9      	bne.n	8002608 <_strtol_r+0x38>
 80026b4:	7828      	ldrb	r0, [r5, #0]
 80026b6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80026ba:	2858      	cmp	r0, #88	; 0x58
 80026bc:	d1a4      	bne.n	8002608 <_strtol_r+0x38>
 80026be:	f04f 0910 	mov.w	r9, #16
 80026c2:	786c      	ldrb	r4, [r5, #1]
 80026c4:	464b      	mov	r3, r9
 80026c6:	3502      	adds	r5, #2
 80026c8:	e7a4      	b.n	8002614 <_strtol_r+0x44>
 80026ca:	782b      	ldrb	r3, [r5, #0]
 80026cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80026d0:	2b58      	cmp	r3, #88	; 0x58
 80026d2:	d0f4      	beq.n	80026be <_strtol_r+0xee>
 80026d4:	2308      	movs	r3, #8
 80026d6:	4699      	mov	r9, r3
 80026d8:	e79c      	b.n	8002614 <_strtol_r+0x44>
 80026da:	bf00      	nop
 80026dc:	20001460 	.word	0x20001460

080026e0 <strtol>:
 80026e0:	b410      	push	{r4}
 80026e2:	4c04      	ldr	r4, [pc, #16]	; (80026f4 <strtol+0x14>)
 80026e4:	4613      	mov	r3, r2
 80026e6:	460a      	mov	r2, r1
 80026e8:	4601      	mov	r1, r0
 80026ea:	6820      	ldr	r0, [r4, #0]
 80026ec:	bc10      	pop	{r4}
 80026ee:	f7ff bf6f 	b.w	80025d0 <_strtol_r>
 80026f2:	bf00      	nop
 80026f4:	200011c8 	.word	0x200011c8

080026f8 <__submore>:
 80026f8:	f101 0340 	add.w	r3, r1, #64	; 0x40
 80026fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002700:	460c      	mov	r4, r1
 8002702:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002704:	4299      	cmp	r1, r3
 8002706:	d014      	beq.n	8002732 <__submore+0x3a>
 8002708:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800270a:	0077      	lsls	r7, r6, #1
 800270c:	463a      	mov	r2, r7
 800270e:	f000 faff 	bl	8002d10 <_realloc_r>
 8002712:	4605      	mov	r5, r0
 8002714:	b340      	cbz	r0, 8002768 <__submore+0x70>
 8002716:	eb00 0806 	add.w	r8, r0, r6
 800271a:	4632      	mov	r2, r6
 800271c:	4640      	mov	r0, r8
 800271e:	4629      	mov	r1, r5
 8002720:	f7fd ffc0 	bl	80006a4 <memcpy>
 8002724:	f8c4 8000 	str.w	r8, [r4]
 8002728:	6325      	str	r5, [r4, #48]	; 0x30
 800272a:	6367      	str	r7, [r4, #52]	; 0x34
 800272c:	2000      	movs	r0, #0
 800272e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002732:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002736:	f7ff f92b 	bl	8001990 <_malloc_r>
 800273a:	b1a8      	cbz	r0, 8002768 <__submore+0x70>
 800273c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8002740:	6320      	str	r0, [r4, #48]	; 0x30
 8002742:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002746:	6362      	str	r2, [r4, #52]	; 0x34
 8002748:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800274c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002750:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8002754:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8002758:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800275c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8002760:	6020      	str	r0, [r4, #0]
 8002762:	2000      	movs	r0, #0
 8002764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800276c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002770 <_ungetc_r>:
 8002770:	b570      	push	{r4, r5, r6, lr}
 8002772:	1c4c      	adds	r4, r1, #1
 8002774:	d02b      	beq.n	80027ce <_ungetc_r+0x5e>
 8002776:	4606      	mov	r6, r0
 8002778:	4614      	mov	r4, r2
 800277a:	460d      	mov	r5, r1
 800277c:	b108      	cbz	r0, 8002782 <_ungetc_r+0x12>
 800277e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002780:	b343      	cbz	r3, 80027d4 <_ungetc_r+0x64>
 8002782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002786:	f023 0320 	bic.w	r3, r3, #32
 800278a:	b29a      	uxth	r2, r3
 800278c:	0750      	lsls	r0, r2, #29
 800278e:	81a3      	strh	r3, [r4, #12]
 8002790:	d406      	bmi.n	80027a0 <_ungetc_r+0x30>
 8002792:	06d1      	lsls	r1, r2, #27
 8002794:	d51b      	bpl.n	80027ce <_ungetc_r+0x5e>
 8002796:	0712      	lsls	r2, r2, #28
 8002798:	d438      	bmi.n	800280c <_ungetc_r+0x9c>
 800279a:	f043 0304 	orr.w	r3, r3, #4
 800279e:	81a3      	strh	r3, [r4, #12]
 80027a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80027a2:	b2ed      	uxtb	r5, r5
 80027a4:	b1cb      	cbz	r3, 80027da <_ungetc_r+0x6a>
 80027a6:	6862      	ldr	r2, [r4, #4]
 80027a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80027aa:	429a      	cmp	r2, r3
 80027ac:	da09      	bge.n	80027c2 <_ungetc_r+0x52>
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	1e5a      	subs	r2, r3, #1
 80027b2:	6022      	str	r2, [r4, #0]
 80027b4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80027b8:	6863      	ldr	r3, [r4, #4]
 80027ba:	3301      	adds	r3, #1
 80027bc:	6063      	str	r3, [r4, #4]
 80027be:	4628      	mov	r0, r5
 80027c0:	bd70      	pop	{r4, r5, r6, pc}
 80027c2:	4630      	mov	r0, r6
 80027c4:	4621      	mov	r1, r4
 80027c6:	f7ff ff97 	bl	80026f8 <__submore>
 80027ca:	2800      	cmp	r0, #0
 80027cc:	d0ef      	beq.n	80027ae <_ungetc_r+0x3e>
 80027ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80027d2:	e7f4      	b.n	80027be <_ungetc_r+0x4e>
 80027d4:	f000 f9dc 	bl	8002b90 <__sinit>
 80027d8:	e7d3      	b.n	8002782 <_ungetc_r+0x12>
 80027da:	6922      	ldr	r2, [r4, #16]
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	b12a      	cbz	r2, 80027ec <_ungetc_r+0x7c>
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d203      	bcs.n	80027ec <_ungetc_r+0x7c>
 80027e4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80027e8:	4295      	cmp	r5, r2
 80027ea:	d01c      	beq.n	8002826 <_ungetc_r+0xb6>
 80027ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80027ee:	4623      	mov	r3, r4
 80027f0:	6860      	ldr	r0, [r4, #4]
 80027f2:	63e0      	str	r0, [r4, #60]	; 0x3c
 80027f4:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80027f8:	2203      	movs	r2, #3
 80027fa:	6362      	str	r2, [r4, #52]	; 0x34
 80027fc:	6321      	str	r1, [r4, #48]	; 0x30
 80027fe:	f803 5f42 	strb.w	r5, [r3, #66]!
 8002802:	2201      	movs	r2, #1
 8002804:	6023      	str	r3, [r4, #0]
 8002806:	6062      	str	r2, [r4, #4]
 8002808:	4628      	mov	r0, r5
 800280a:	bd70      	pop	{r4, r5, r6, pc}
 800280c:	4621      	mov	r1, r4
 800280e:	4630      	mov	r0, r6
 8002810:	f000 f8ac 	bl	800296c <_fflush_r>
 8002814:	2800      	cmp	r0, #0
 8002816:	d1da      	bne.n	80027ce <_ungetc_r+0x5e>
 8002818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800281c:	60a0      	str	r0, [r4, #8]
 800281e:	61a0      	str	r0, [r4, #24]
 8002820:	f023 0308 	bic.w	r3, r3, #8
 8002824:	e7b9      	b.n	800279a <_ungetc_r+0x2a>
 8002826:	6862      	ldr	r2, [r4, #4]
 8002828:	3b01      	subs	r3, #1
 800282a:	3201      	adds	r2, #1
 800282c:	6023      	str	r3, [r4, #0]
 800282e:	6062      	str	r2, [r4, #4]
 8002830:	e7c5      	b.n	80027be <_ungetc_r+0x4e>
 8002832:	bf00      	nop

08002834 <ungetc>:
 8002834:	4b02      	ldr	r3, [pc, #8]	; (8002840 <ungetc+0xc>)
 8002836:	460a      	mov	r2, r1
 8002838:	4601      	mov	r1, r0
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	f7ff bf98 	b.w	8002770 <_ungetc_r>
 8002840:	200011c8 	.word	0x200011c8

08002844 <__sflush_r>:
 8002844:	898b      	ldrh	r3, [r1, #12]
 8002846:	071a      	lsls	r2, r3, #28
 8002848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800284c:	460d      	mov	r5, r1
 800284e:	4680      	mov	r8, r0
 8002850:	d433      	bmi.n	80028ba <__sflush_r+0x76>
 8002852:	684a      	ldr	r2, [r1, #4]
 8002854:	2a00      	cmp	r2, #0
 8002856:	dd67      	ble.n	8002928 <__sflush_r+0xe4>
 8002858:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800285a:	2c00      	cmp	r4, #0
 800285c:	d045      	beq.n	80028ea <__sflush_r+0xa6>
 800285e:	2200      	movs	r2, #0
 8002860:	f8d8 6000 	ldr.w	r6, [r8]
 8002864:	f8c8 2000 	str.w	r2, [r8]
 8002868:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 800286c:	d060      	beq.n	8002930 <__sflush_r+0xec>
 800286e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8002870:	075f      	lsls	r7, r3, #29
 8002872:	d505      	bpl.n	8002880 <__sflush_r+0x3c>
 8002874:	6869      	ldr	r1, [r5, #4]
 8002876:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002878:	1a52      	subs	r2, r2, r1
 800287a:	b10b      	cbz	r3, 8002880 <__sflush_r+0x3c>
 800287c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800287e:	1ad2      	subs	r2, r2, r3
 8002880:	2300      	movs	r3, #0
 8002882:	69e9      	ldr	r1, [r5, #28]
 8002884:	4640      	mov	r0, r8
 8002886:	47a0      	blx	r4
 8002888:	1c44      	adds	r4, r0, #1
 800288a:	d039      	beq.n	8002900 <__sflush_r+0xbc>
 800288c:	89ab      	ldrh	r3, [r5, #12]
 800288e:	692a      	ldr	r2, [r5, #16]
 8002890:	602a      	str	r2, [r5, #0]
 8002892:	04db      	lsls	r3, r3, #19
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	606a      	str	r2, [r5, #4]
 800289a:	d443      	bmi.n	8002924 <__sflush_r+0xe0>
 800289c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800289e:	f8c8 6000 	str.w	r6, [r8]
 80028a2:	b311      	cbz	r1, 80028ea <__sflush_r+0xa6>
 80028a4:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80028a8:	4299      	cmp	r1, r3
 80028aa:	d002      	beq.n	80028b2 <__sflush_r+0x6e>
 80028ac:	4640      	mov	r0, r8
 80028ae:	f7ff f827 	bl	8001900 <_free_r>
 80028b2:	2000      	movs	r0, #0
 80028b4:	6328      	str	r0, [r5, #48]	; 0x30
 80028b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028ba:	690e      	ldr	r6, [r1, #16]
 80028bc:	b1ae      	cbz	r6, 80028ea <__sflush_r+0xa6>
 80028be:	680c      	ldr	r4, [r1, #0]
 80028c0:	600e      	str	r6, [r1, #0]
 80028c2:	0798      	lsls	r0, r3, #30
 80028c4:	bf0c      	ite	eq
 80028c6:	694b      	ldreq	r3, [r1, #20]
 80028c8:	2300      	movne	r3, #0
 80028ca:	1ba4      	subs	r4, r4, r6
 80028cc:	608b      	str	r3, [r1, #8]
 80028ce:	e00a      	b.n	80028e6 <__sflush_r+0xa2>
 80028d0:	4623      	mov	r3, r4
 80028d2:	4632      	mov	r2, r6
 80028d4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80028d6:	69e9      	ldr	r1, [r5, #28]
 80028d8:	4640      	mov	r0, r8
 80028da:	47b8      	blx	r7
 80028dc:	2800      	cmp	r0, #0
 80028de:	eba4 0400 	sub.w	r4, r4, r0
 80028e2:	4406      	add	r6, r0
 80028e4:	dd04      	ble.n	80028f0 <__sflush_r+0xac>
 80028e6:	2c00      	cmp	r4, #0
 80028e8:	dcf2      	bgt.n	80028d0 <__sflush_r+0x8c>
 80028ea:	2000      	movs	r0, #0
 80028ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028f0:	89ab      	ldrh	r3, [r5, #12]
 80028f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028f6:	81ab      	strh	r3, [r5, #12]
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002900:	f8d8 2000 	ldr.w	r2, [r8]
 8002904:	2a1d      	cmp	r2, #29
 8002906:	d8f3      	bhi.n	80028f0 <__sflush_r+0xac>
 8002908:	4b17      	ldr	r3, [pc, #92]	; (8002968 <__sflush_r+0x124>)
 800290a:	40d3      	lsrs	r3, r2
 800290c:	43db      	mvns	r3, r3
 800290e:	f013 0301 	ands.w	r3, r3, #1
 8002912:	d1ed      	bne.n	80028f0 <__sflush_r+0xac>
 8002914:	89a9      	ldrh	r1, [r5, #12]
 8002916:	692c      	ldr	r4, [r5, #16]
 8002918:	606b      	str	r3, [r5, #4]
 800291a:	04c9      	lsls	r1, r1, #19
 800291c:	602c      	str	r4, [r5, #0]
 800291e:	d5bd      	bpl.n	800289c <__sflush_r+0x58>
 8002920:	2a00      	cmp	r2, #0
 8002922:	d1bb      	bne.n	800289c <__sflush_r+0x58>
 8002924:	6528      	str	r0, [r5, #80]	; 0x50
 8002926:	e7b9      	b.n	800289c <__sflush_r+0x58>
 8002928:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800292a:	2a00      	cmp	r2, #0
 800292c:	dc94      	bgt.n	8002858 <__sflush_r+0x14>
 800292e:	e7dc      	b.n	80028ea <__sflush_r+0xa6>
 8002930:	2301      	movs	r3, #1
 8002932:	69e9      	ldr	r1, [r5, #28]
 8002934:	4640      	mov	r0, r8
 8002936:	47a0      	blx	r4
 8002938:	1c43      	adds	r3, r0, #1
 800293a:	4602      	mov	r2, r0
 800293c:	d002      	beq.n	8002944 <__sflush_r+0x100>
 800293e:	89ab      	ldrh	r3, [r5, #12]
 8002940:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8002942:	e795      	b.n	8002870 <__sflush_r+0x2c>
 8002944:	f8d8 3000 	ldr.w	r3, [r8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0f8      	beq.n	800293e <__sflush_r+0xfa>
 800294c:	2b1d      	cmp	r3, #29
 800294e:	d001      	beq.n	8002954 <__sflush_r+0x110>
 8002950:	2b16      	cmp	r3, #22
 8002952:	d102      	bne.n	800295a <__sflush_r+0x116>
 8002954:	f8c8 6000 	str.w	r6, [r8]
 8002958:	e7c7      	b.n	80028ea <__sflush_r+0xa6>
 800295a:	89ab      	ldrh	r3, [r5, #12]
 800295c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002960:	81ab      	strh	r3, [r5, #12]
 8002962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002966:	bf00      	nop
 8002968:	20400001 	.word	0x20400001

0800296c <_fflush_r>:
 800296c:	b510      	push	{r4, lr}
 800296e:	4604      	mov	r4, r0
 8002970:	b082      	sub	sp, #8
 8002972:	b108      	cbz	r0, 8002978 <_fflush_r+0xc>
 8002974:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002976:	b153      	cbz	r3, 800298e <_fflush_r+0x22>
 8002978:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800297c:	b908      	cbnz	r0, 8002982 <_fflush_r+0x16>
 800297e:	b002      	add	sp, #8
 8002980:	bd10      	pop	{r4, pc}
 8002982:	4620      	mov	r0, r4
 8002984:	b002      	add	sp, #8
 8002986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800298a:	f7ff bf5b 	b.w	8002844 <__sflush_r>
 800298e:	9101      	str	r1, [sp, #4]
 8002990:	f000 f8fe 	bl	8002b90 <__sinit>
 8002994:	9901      	ldr	r1, [sp, #4]
 8002996:	e7ef      	b.n	8002978 <_fflush_r+0xc>

08002998 <fflush>:
 8002998:	b120      	cbz	r0, 80029a4 <fflush+0xc>
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <fflush+0x18>)
 800299c:	4601      	mov	r1, r0
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	f7ff bfe4 	b.w	800296c <_fflush_r>
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <fflush+0x1c>)
 80029a6:	4904      	ldr	r1, [pc, #16]	; (80029b8 <fflush+0x20>)
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	f000 b937 	b.w	8002c1c <_fwalk_reent>
 80029ae:	bf00      	nop
 80029b0:	200011c8 	.word	0x200011c8
 80029b4:	08005f90 	.word	0x08005f90
 80029b8:	0800296d 	.word	0x0800296d

080029bc <__fp_unlock>:
 80029bc:	2000      	movs	r0, #0
 80029be:	4770      	bx	lr

080029c0 <_cleanup_r>:
 80029c0:	4901      	ldr	r1, [pc, #4]	; (80029c8 <_cleanup_r+0x8>)
 80029c2:	f000 b92b 	b.w	8002c1c <_fwalk_reent>
 80029c6:	bf00      	nop
 80029c8:	0800296d 	.word	0x0800296d

080029cc <__sinit.part.1>:
 80029cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029d0:	4b35      	ldr	r3, [pc, #212]	; (8002aa8 <__sinit.part.1+0xdc>)
 80029d2:	6845      	ldr	r5, [r0, #4]
 80029d4:	63c3      	str	r3, [r0, #60]	; 0x3c
 80029d6:	2400      	movs	r4, #0
 80029d8:	4607      	mov	r7, r0
 80029da:	f500 72ac 	add.w	r2, r0, #344	; 0x158
 80029de:	2304      	movs	r3, #4
 80029e0:	2103      	movs	r1, #3
 80029e2:	f8c0 1150 	str.w	r1, [r0, #336]	; 0x150
 80029e6:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
 80029ea:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
 80029ee:	b083      	sub	sp, #12
 80029f0:	602c      	str	r4, [r5, #0]
 80029f2:	606c      	str	r4, [r5, #4]
 80029f4:	60ac      	str	r4, [r5, #8]
 80029f6:	666c      	str	r4, [r5, #100]	; 0x64
 80029f8:	81ec      	strh	r4, [r5, #14]
 80029fa:	612c      	str	r4, [r5, #16]
 80029fc:	616c      	str	r4, [r5, #20]
 80029fe:	61ac      	str	r4, [r5, #24]
 8002a00:	81ab      	strh	r3, [r5, #12]
 8002a02:	4621      	mov	r1, r4
 8002a04:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8002a08:	2208      	movs	r2, #8
 8002a0a:	f7fd fee5 	bl	80007d8 <memset>
 8002a0e:	68be      	ldr	r6, [r7, #8]
 8002a10:	f8df b098 	ldr.w	fp, [pc, #152]	; 8002aac <__sinit.part.1+0xe0>
 8002a14:	f8df a098 	ldr.w	sl, [pc, #152]	; 8002ab0 <__sinit.part.1+0xe4>
 8002a18:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002ab4 <__sinit.part.1+0xe8>
 8002a1c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002ab8 <__sinit.part.1+0xec>
 8002a20:	f8c5 b020 	str.w	fp, [r5, #32]
 8002a24:	2301      	movs	r3, #1
 8002a26:	2209      	movs	r2, #9
 8002a28:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8002a2c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8002a30:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8002a34:	61ed      	str	r5, [r5, #28]
 8002a36:	4621      	mov	r1, r4
 8002a38:	81f3      	strh	r3, [r6, #14]
 8002a3a:	81b2      	strh	r2, [r6, #12]
 8002a3c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8002a40:	6034      	str	r4, [r6, #0]
 8002a42:	6074      	str	r4, [r6, #4]
 8002a44:	60b4      	str	r4, [r6, #8]
 8002a46:	6674      	str	r4, [r6, #100]	; 0x64
 8002a48:	6134      	str	r4, [r6, #16]
 8002a4a:	6174      	str	r4, [r6, #20]
 8002a4c:	61b4      	str	r4, [r6, #24]
 8002a4e:	2208      	movs	r2, #8
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	f7fd fec1 	bl	80007d8 <memset>
 8002a56:	68fd      	ldr	r5, [r7, #12]
 8002a58:	61f6      	str	r6, [r6, #28]
 8002a5a:	2012      	movs	r0, #18
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	f8c6 b020 	str.w	fp, [r6, #32]
 8002a62:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8002a66:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8002a6a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8002a6e:	4621      	mov	r1, r4
 8002a70:	81a8      	strh	r0, [r5, #12]
 8002a72:	81ea      	strh	r2, [r5, #14]
 8002a74:	602c      	str	r4, [r5, #0]
 8002a76:	606c      	str	r4, [r5, #4]
 8002a78:	60ac      	str	r4, [r5, #8]
 8002a7a:	666c      	str	r4, [r5, #100]	; 0x64
 8002a7c:	612c      	str	r4, [r5, #16]
 8002a7e:	616c      	str	r4, [r5, #20]
 8002a80:	61ac      	str	r4, [r5, #24]
 8002a82:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8002a86:	2208      	movs	r2, #8
 8002a88:	f7fd fea6 	bl	80007d8 <memset>
 8002a8c:	9b01      	ldr	r3, [sp, #4]
 8002a8e:	61ed      	str	r5, [r5, #28]
 8002a90:	f8c5 b020 	str.w	fp, [r5, #32]
 8002a94:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8002a98:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8002a9c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8002aa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aa2:	b003      	add	sp, #12
 8002aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aa8:	080029c1 	.word	0x080029c1
 8002aac:	08001b1d 	.word	0x08001b1d
 8002ab0:	08001b45 	.word	0x08001b45
 8002ab4:	08001b81 	.word	0x08001b81
 8002ab8:	08001ba1 	.word	0x08001ba1

08002abc <__fp_lock>:
 8002abc:	2000      	movs	r0, #0
 8002abe:	4770      	bx	lr

08002ac0 <__sfmoreglue>:
 8002ac0:	b570      	push	{r4, r5, r6, lr}
 8002ac2:	1e4a      	subs	r2, r1, #1
 8002ac4:	2568      	movs	r5, #104	; 0x68
 8002ac6:	fb05 f502 	mul.w	r5, r5, r2
 8002aca:	460e      	mov	r6, r1
 8002acc:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002ad0:	f7fe ff5e 	bl	8001990 <_malloc_r>
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	b140      	cbz	r0, 8002aea <__sfmoreglue+0x2a>
 8002ad8:	2100      	movs	r1, #0
 8002ada:	300c      	adds	r0, #12
 8002adc:	6066      	str	r6, [r4, #4]
 8002ade:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ae2:	6021      	str	r1, [r4, #0]
 8002ae4:	60a0      	str	r0, [r4, #8]
 8002ae6:	f7fd fe77 	bl	80007d8 <memset>
 8002aea:	4620      	mov	r0, r4
 8002aec:	bd70      	pop	{r4, r5, r6, pc}
 8002aee:	bf00      	nop

08002af0 <__sfp>:
 8002af0:	4b21      	ldr	r3, [pc, #132]	; (8002b78 <__sfp+0x88>)
 8002af2:	b570      	push	{r4, r5, r6, lr}
 8002af4:	681d      	ldr	r5, [r3, #0]
 8002af6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002af8:	4606      	mov	r6, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d02c      	beq.n	8002b58 <__sfp+0x68>
 8002afe:	f505 75a6 	add.w	r5, r5, #332	; 0x14c
 8002b02:	686b      	ldr	r3, [r5, #4]
 8002b04:	68ac      	ldr	r4, [r5, #8]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	d505      	bpl.n	8002b16 <__sfp+0x26>
 8002b0a:	e021      	b.n	8002b50 <__sfp+0x60>
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8002b14:	d01c      	beq.n	8002b50 <__sfp+0x60>
 8002b16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b1a:	2a00      	cmp	r2, #0
 8002b1c:	d1f6      	bne.n	8002b0c <__sfp+0x1c>
 8002b1e:	2500      	movs	r5, #0
 8002b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b24:	2301      	movs	r3, #1
 8002b26:	81e2      	strh	r2, [r4, #14]
 8002b28:	81a3      	strh	r3, [r4, #12]
 8002b2a:	6665      	str	r5, [r4, #100]	; 0x64
 8002b2c:	6025      	str	r5, [r4, #0]
 8002b2e:	60a5      	str	r5, [r4, #8]
 8002b30:	6065      	str	r5, [r4, #4]
 8002b32:	6125      	str	r5, [r4, #16]
 8002b34:	6165      	str	r5, [r4, #20]
 8002b36:	61a5      	str	r5, [r4, #24]
 8002b38:	4629      	mov	r1, r5
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002b40:	f7fd fe4a 	bl	80007d8 <memset>
 8002b44:	6325      	str	r5, [r4, #48]	; 0x30
 8002b46:	6365      	str	r5, [r4, #52]	; 0x34
 8002b48:	6465      	str	r5, [r4, #68]	; 0x44
 8002b4a:	64a5      	str	r5, [r4, #72]	; 0x48
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	bd70      	pop	{r4, r5, r6, pc}
 8002b50:	6828      	ldr	r0, [r5, #0]
 8002b52:	b128      	cbz	r0, 8002b60 <__sfp+0x70>
 8002b54:	4605      	mov	r5, r0
 8002b56:	e7d4      	b.n	8002b02 <__sfp+0x12>
 8002b58:	4628      	mov	r0, r5
 8002b5a:	f7ff ff37 	bl	80029cc <__sinit.part.1>
 8002b5e:	e7ce      	b.n	8002afe <__sfp+0xe>
 8002b60:	2104      	movs	r1, #4
 8002b62:	4630      	mov	r0, r6
 8002b64:	f7ff ffac 	bl	8002ac0 <__sfmoreglue>
 8002b68:	6028      	str	r0, [r5, #0]
 8002b6a:	2800      	cmp	r0, #0
 8002b6c:	d1f2      	bne.n	8002b54 <__sfp+0x64>
 8002b6e:	230c      	movs	r3, #12
 8002b70:	4604      	mov	r4, r0
 8002b72:	6033      	str	r3, [r6, #0]
 8002b74:	e7ea      	b.n	8002b4c <__sfp+0x5c>
 8002b76:	bf00      	nop
 8002b78:	08005f90 	.word	0x08005f90

08002b7c <_cleanup>:
 8002b7c:	4b02      	ldr	r3, [pc, #8]	; (8002b88 <_cleanup+0xc>)
 8002b7e:	4903      	ldr	r1, [pc, #12]	; (8002b8c <_cleanup+0x10>)
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	f000 b84b 	b.w	8002c1c <_fwalk_reent>
 8002b86:	bf00      	nop
 8002b88:	08005f90 	.word	0x08005f90
 8002b8c:	0800296d 	.word	0x0800296d

08002b90 <__sinit>:
 8002b90:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002b92:	b103      	cbz	r3, 8002b96 <__sinit+0x6>
 8002b94:	4770      	bx	lr
 8002b96:	e719      	b.n	80029cc <__sinit.part.1>

08002b98 <__sfp_lock_acquire>:
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop

08002b9c <__sfp_lock_release>:
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop

08002ba0 <__sinit_lock_acquire>:
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop

08002ba4 <__sinit_lock_release>:
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop

08002ba8 <__fp_lock_all>:
 8002ba8:	4b02      	ldr	r3, [pc, #8]	; (8002bb4 <__fp_lock_all+0xc>)
 8002baa:	4903      	ldr	r1, [pc, #12]	; (8002bb8 <__fp_lock_all+0x10>)
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	f000 b80f 	b.w	8002bd0 <_fwalk>
 8002bb2:	bf00      	nop
 8002bb4:	200011c8 	.word	0x200011c8
 8002bb8:	08002abd 	.word	0x08002abd

08002bbc <__fp_unlock_all>:
 8002bbc:	4b02      	ldr	r3, [pc, #8]	; (8002bc8 <__fp_unlock_all+0xc>)
 8002bbe:	4903      	ldr	r1, [pc, #12]	; (8002bcc <__fp_unlock_all+0x10>)
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	f000 b805 	b.w	8002bd0 <_fwalk>
 8002bc6:	bf00      	nop
 8002bc8:	200011c8 	.word	0x200011c8
 8002bcc:	080029bd 	.word	0x080029bd

08002bd0 <_fwalk>:
 8002bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bd4:	f510 77a6 	adds.w	r7, r0, #332	; 0x14c
 8002bd8:	d01b      	beq.n	8002c12 <_fwalk+0x42>
 8002bda:	4688      	mov	r8, r1
 8002bdc:	2600      	movs	r6, #0
 8002bde:	687d      	ldr	r5, [r7, #4]
 8002be0:	68bc      	ldr	r4, [r7, #8]
 8002be2:	3d01      	subs	r5, #1
 8002be4:	d40f      	bmi.n	8002c06 <_fwalk+0x36>
 8002be6:	89a3      	ldrh	r3, [r4, #12]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8002bee:	d906      	bls.n	8002bfe <_fwalk+0x2e>
 8002bf0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	d001      	beq.n	8002bfe <_fwalk+0x2e>
 8002bfa:	47c0      	blx	r8
 8002bfc:	4306      	orrs	r6, r0
 8002bfe:	1c6b      	adds	r3, r5, #1
 8002c00:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8002c04:	d1ef      	bne.n	8002be6 <_fwalk+0x16>
 8002c06:	683f      	ldr	r7, [r7, #0]
 8002c08:	2f00      	cmp	r7, #0
 8002c0a:	d1e8      	bne.n	8002bde <_fwalk+0xe>
 8002c0c:	4630      	mov	r0, r6
 8002c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c12:	463e      	mov	r6, r7
 8002c14:	4630      	mov	r0, r6
 8002c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c1a:	bf00      	nop

08002c1c <_fwalk_reent>:
 8002c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c20:	f510 77a6 	adds.w	r7, r0, #332	; 0x14c
 8002c24:	d01f      	beq.n	8002c66 <_fwalk_reent+0x4a>
 8002c26:	4688      	mov	r8, r1
 8002c28:	4606      	mov	r6, r0
 8002c2a:	f04f 0900 	mov.w	r9, #0
 8002c2e:	687d      	ldr	r5, [r7, #4]
 8002c30:	68bc      	ldr	r4, [r7, #8]
 8002c32:	3d01      	subs	r5, #1
 8002c34:	d411      	bmi.n	8002c5a <_fwalk_reent+0x3e>
 8002c36:	89a3      	ldrh	r3, [r4, #12]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8002c3e:	d908      	bls.n	8002c52 <_fwalk_reent+0x36>
 8002c40:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8002c44:	3301      	adds	r3, #1
 8002c46:	4621      	mov	r1, r4
 8002c48:	4630      	mov	r0, r6
 8002c4a:	d002      	beq.n	8002c52 <_fwalk_reent+0x36>
 8002c4c:	47c0      	blx	r8
 8002c4e:	ea49 0900 	orr.w	r9, r9, r0
 8002c52:	1c6b      	adds	r3, r5, #1
 8002c54:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8002c58:	d1ed      	bne.n	8002c36 <_fwalk_reent+0x1a>
 8002c5a:	683f      	ldr	r7, [r7, #0]
 8002c5c:	2f00      	cmp	r7, #0
 8002c5e:	d1e6      	bne.n	8002c2e <_fwalk_reent+0x12>
 8002c60:	4648      	mov	r0, r9
 8002c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c66:	46b9      	mov	r9, r7
 8002c68:	4648      	mov	r0, r9
 8002c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c6e:	bf00      	nop

08002c70 <memchr>:
 8002c70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002c74:	2a10      	cmp	r2, #16
 8002c76:	db2b      	blt.n	8002cd0 <memchr+0x60>
 8002c78:	f010 0f07 	tst.w	r0, #7
 8002c7c:	d008      	beq.n	8002c90 <memchr+0x20>
 8002c7e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002c82:	3a01      	subs	r2, #1
 8002c84:	428b      	cmp	r3, r1
 8002c86:	d02d      	beq.n	8002ce4 <memchr+0x74>
 8002c88:	f010 0f07 	tst.w	r0, #7
 8002c8c:	b342      	cbz	r2, 8002ce0 <memchr+0x70>
 8002c8e:	d1f6      	bne.n	8002c7e <memchr+0xe>
 8002c90:	b4f0      	push	{r4, r5, r6, r7}
 8002c92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002c96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8002c9a:	f022 0407 	bic.w	r4, r2, #7
 8002c9e:	f07f 0700 	mvns.w	r7, #0
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002ca8:	3c08      	subs	r4, #8
 8002caa:	ea85 0501 	eor.w	r5, r5, r1
 8002cae:	ea86 0601 	eor.w	r6, r6, r1
 8002cb2:	fa85 f547 	uadd8	r5, r5, r7
 8002cb6:	faa3 f587 	sel	r5, r3, r7
 8002cba:	fa86 f647 	uadd8	r6, r6, r7
 8002cbe:	faa5 f687 	sel	r6, r5, r7
 8002cc2:	b98e      	cbnz	r6, 8002ce8 <memchr+0x78>
 8002cc4:	d1ee      	bne.n	8002ca4 <memchr+0x34>
 8002cc6:	bcf0      	pop	{r4, r5, r6, r7}
 8002cc8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002ccc:	f002 0207 	and.w	r2, r2, #7
 8002cd0:	b132      	cbz	r2, 8002ce0 <memchr+0x70>
 8002cd2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002cd6:	3a01      	subs	r2, #1
 8002cd8:	ea83 0301 	eor.w	r3, r3, r1
 8002cdc:	b113      	cbz	r3, 8002ce4 <memchr+0x74>
 8002cde:	d1f8      	bne.n	8002cd2 <memchr+0x62>
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	4770      	bx	lr
 8002ce4:	3801      	subs	r0, #1
 8002ce6:	4770      	bx	lr
 8002ce8:	2d00      	cmp	r5, #0
 8002cea:	bf06      	itte	eq
 8002cec:	4635      	moveq	r5, r6
 8002cee:	3803      	subeq	r0, #3
 8002cf0:	3807      	subne	r0, #7
 8002cf2:	f015 0f01 	tst.w	r5, #1
 8002cf6:	d107      	bne.n	8002d08 <memchr+0x98>
 8002cf8:	3001      	adds	r0, #1
 8002cfa:	f415 7f80 	tst.w	r5, #256	; 0x100
 8002cfe:	bf02      	ittt	eq
 8002d00:	3001      	addeq	r0, #1
 8002d02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8002d06:	3001      	addeq	r0, #1
 8002d08:	bcf0      	pop	{r4, r5, r6, r7}
 8002d0a:	3801      	subs	r0, #1
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop

08002d10 <_realloc_r>:
 8002d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d12:	4614      	mov	r4, r2
 8002d14:	b1f9      	cbz	r1, 8002d56 <_realloc_r+0x46>
 8002d16:	b1c2      	cbz	r2, 8002d4a <_realloc_r+0x3a>
 8002d18:	4606      	mov	r6, r0
 8002d1a:	460d      	mov	r5, r1
 8002d1c:	f000 f820 	bl	8002d60 <_malloc_usable_size_r>
 8002d20:	4284      	cmp	r4, r0
 8002d22:	d801      	bhi.n	8002d28 <_realloc_r+0x18>
 8002d24:	4628      	mov	r0, r5
 8002d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d28:	4621      	mov	r1, r4
 8002d2a:	4630      	mov	r0, r6
 8002d2c:	f7fe fe30 	bl	8001990 <_malloc_r>
 8002d30:	4607      	mov	r7, r0
 8002d32:	b170      	cbz	r0, 8002d52 <_realloc_r+0x42>
 8002d34:	4622      	mov	r2, r4
 8002d36:	4629      	mov	r1, r5
 8002d38:	f7fd fcb4 	bl	80006a4 <memcpy>
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	4630      	mov	r0, r6
 8002d40:	463d      	mov	r5, r7
 8002d42:	f7fe fddd 	bl	8001900 <_free_r>
 8002d46:	4628      	mov	r0, r5
 8002d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d4a:	f7fe fdd9 	bl	8001900 <_free_r>
 8002d4e:	4625      	mov	r5, r4
 8002d50:	e7e8      	b.n	8002d24 <_realloc_r+0x14>
 8002d52:	4605      	mov	r5, r0
 8002d54:	e7e6      	b.n	8002d24 <_realloc_r+0x14>
 8002d56:	4611      	mov	r1, r2
 8002d58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002d5c:	f7fe be18 	b.w	8001990 <_malloc_r>

08002d60 <_malloc_usable_size_r>:
 8002d60:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002d64:	2800      	cmp	r0, #0
 8002d66:	f1a0 0004 	sub.w	r0, r0, #4
 8002d6a:	bfbc      	itt	lt
 8002d6c:	580b      	ldrlt	r3, [r1, r0]
 8002d6e:	18c0      	addlt	r0, r0, r3
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop

08002d74 <uart_fifo_callback>:
static inline int _impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
 8002d74:	6843      	ldr	r3, [r0, #4]
 8002d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
{
    __uart_callback = callback;
}

static void uart_fifo_callback(struct device *dev)
{
 8002d78:	b513      	push	{r0, r1, r4, lr}
 8002d7a:	4604      	mov	r4, r0
 8002d7c:	b923      	cbnz	r3, 8002d88 <uart_fifo_callback+0x14>
    u8_t recv_data;
    /* Verify uart_irq_update() */
    if (!uart_irq_update(dev)) {
        printk("Error: retval should always be 1");
 8002d7e:	480f      	ldr	r0, [pc, #60]	; (8002dbc <uart_fifo_callback+0x48>)
 8002d80:	f000 fad2 	bl	8003328 <printk>
        //     __uart_callback(recv_data);
        // }
        //printk("%c", recv_data);
	k_msgq_put(&modem_queue, &recv_data, K_NO_WAIT);
    }
}
 8002d84:	b002      	add	sp, #8
 8002d86:	bd10      	pop	{r4, pc}
		return api->irq_update(dev);
 8002d88:	4798      	blx	r3
    if (!uart_irq_update(dev)) {
 8002d8a:	2800      	cmp	r0, #0
 8002d8c:	d0f7      	beq.n	8002d7e <uart_fifo_callback+0xa>
	if (api->irq_rx_ready) {
 8002d8e:	6863      	ldr	r3, [r4, #4]
 8002d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f6      	beq.n	8002d84 <uart_fifo_callback+0x10>
		return api->irq_rx_ready(dev);
 8002d96:	4620      	mov	r0, r4
 8002d98:	4798      	blx	r3
    if (uart_irq_rx_ready(dev)) {
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	d0f2      	beq.n	8002d84 <uart_fifo_callback+0x10>
	if (api->fifo_read) {
 8002d9e:	6863      	ldr	r3, [r4, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	b123      	cbz	r3, 8002dae <uart_fifo_callback+0x3a>
		return api->fifo_read(dev, rx_data, size);
 8002da4:	2201      	movs	r2, #1
 8002da6:	f10d 0107 	add.w	r1, sp, #7
 8002daa:	4620      	mov	r0, r4
 8002dac:	4798      	blx	r3

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_ALERT_SEND, k_alert_send, struct k_alert *, alert)

K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_ALLOC_INIT, k_msgq_alloc_init, int, struct k_msgq *, q, size_t, msg_size, u32_t, max_msgs)

K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_PUT, k_msgq_put, int, struct k_msgq *, q, void *, data, s32_t, timeout)
 8002dae:	2200      	movs	r2, #0
 8002db0:	f10d 0107 	add.w	r1, sp, #7
 8002db4:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <uart_fifo_callback+0x4c>)
 8002db6:	f002 f9a3 	bl	8005100 <_impl_k_msgq_put>
 8002dba:	e7e3      	b.n	8002d84 <uart_fifo_callback+0x10>
 8002dbc:	080061b1 	.word	0x080061b1
 8002dc0:	20001584 	.word	0x20001584

08002dc4 <ay_uart_driver_open>:

u8_t ay_uart_driver_open()
{
 8002dc4:	b510      	push	{r4, lr}

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
 8002dc6:	480e      	ldr	r0, [pc, #56]	; (8002e00 <ay_uart_driver_open+0x3c>)
    modem_dev = device_get_binding(MODEM_UART);
 8002dc8:	4c0e      	ldr	r4, [pc, #56]	; (8002e04 <ay_uart_driver_open+0x40>)
 8002dca:	f002 f8b7 	bl	8004f3c <_impl_device_get_binding>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	6020      	str	r0, [r4, #0]
    if (!modem_dev) {
 8002dd2:	b920      	cbnz	r0, 8002dde <ay_uart_driver_open+0x1a>
        printk("Error: Problem to load uart device\n");
 8002dd4:	480c      	ldr	r0, [pc, #48]	; (8002e08 <ay_uart_driver_open+0x44>)
 8002dd6:	f000 faa7 	bl	8003328 <printk>
        return 1;
 8002dda:	2001      	movs	r0, #1
 8002ddc:	bd10      	pop	{r4, pc}
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
 8002dde:	6843      	ldr	r3, [r0, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
 8002de0:	b11b      	cbz	r3, 8002dea <ay_uart_driver_open+0x26>
 8002de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de4:	b10b      	cbz	r3, 8002dea <ay_uart_driver_open+0x26>
		api->irq_callback_set(dev, cb, user_data);
 8002de6:	4909      	ldr	r1, [pc, #36]	; (8002e0c <ay_uart_driver_open+0x48>)
 8002de8:	4798      	blx	r3
    }
    /* Verify uart_irq_callback_set() */
    uart_irq_callback_set(modem_dev, uart_fifo_callback);
    /* Enable Tx/Rx interrupt before using fifo */
    /* Verify uart_irq_rx_enable() */
    uart_irq_rx_enable(modem_dev);
 8002dea:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable) {
 8002dec:	6843      	ldr	r3, [r0, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	b103      	cbz	r3, 8002df4 <ay_uart_driver_open+0x30>
		api->irq_rx_enable(dev);
 8002df2:	4798      	blx	r3
    printk("UART device loaded.\n");
 8002df4:	4806      	ldr	r0, [pc, #24]	; (8002e10 <ay_uart_driver_open+0x4c>)
 8002df6:	f000 fa97 	bl	8003328 <printk>
    return 0;
 8002dfa:	2000      	movs	r0, #0
}
 8002dfc:	bd10      	pop	{r4, pc}
 8002dfe:	bf00      	nop
 8002e00:	08006104 	.word	0x08006104
 8002e04:	20000030 	.word	0x20000030
 8002e08:	0800610b 	.word	0x0800610b
 8002e0c:	08002d75 	.word	0x08002d75
 8002e10:	0800612f 	.word	0x0800612f

08002e14 <ay_uart_driver_write>:

void ay_uart_driver_write(char *data)
{
 8002e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t i;
    u8_t temp;
    // unsigned char recvChar;
    for (i = 0; i < strlen(data); i++) {
        temp = data[i];
        uart_poll_out(modem_dev, temp);
 8002e16:	4f09      	ldr	r7, [pc, #36]	; (8002e3c <ay_uart_driver_write+0x28>)
{
 8002e18:	4605      	mov	r5, r0
    for (i = 0; i < strlen(data); i++) {
 8002e1a:	2400      	movs	r4, #0
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	f7fe fa0f 	bl	8001240 <strlen>
 8002e22:	1c66      	adds	r6, r4, #1
 8002e24:	b2e4      	uxtb	r4, r4
 8002e26:	4284      	cmp	r4, r0
 8002e28:	db00      	blt.n	8002e2c <ay_uart_driver_write+0x18>
    }
}
 8002e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uart_poll_out(modem_dev, temp);
 8002e2c:	6838      	ldr	r0, [r7, #0]
	api->poll_out(dev, out_char);
 8002e2e:	5d29      	ldrb	r1, [r5, r4]
 8002e30:	6843      	ldr	r3, [r0, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	4798      	blx	r3
 8002e36:	4634      	mov	r4, r6
 8002e38:	e7f0      	b.n	8002e1c <ay_uart_driver_write+0x8>
 8002e3a:	bf00      	nop
 8002e3c:	20000030 	.word	0x20000030

08002e40 <consumer_modem_queue>:

void consumer_modem_queue(void)
{
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	4d17      	ldr	r5, [pc, #92]	; (8002ea0 <consumer_modem_queue+0x60>)
	u8_t recv_data;
	u8_t number_of_messages;
	u8_t i;
	u8_t full_message[512];
	strcpy(full_message, "");
 8002e44:	4917      	ldr	r1, [pc, #92]	; (8002ea4 <consumer_modem_queue+0x64>)
{
 8002e46:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
	strcpy(full_message, "");
 8002e4a:	a802      	add	r0, sp, #8
 8002e4c:	f7fe f996 	bl	800117c <strcpy>
	number_of_messages = k_msgq_num_used_get(&modem_queue);
 8002e50:	f895 6020 	ldrb.w	r6, [r5, #32]
	if (number_of_messages > 0) {
 8002e54:	b1f6      	cbz	r6, 8002e94 <consumer_modem_queue+0x54>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
 8002e56:	f002 fe41 	bl	8005adc <_impl_k_uptime_get_32>
		printk("%d - Consuming %d items from queue.\n", k_uptime_get_32(), number_of_messages);
 8002e5a:	4632      	mov	r2, r6
 8002e5c:	4601      	mov	r1, r0
 8002e5e:	4812      	ldr	r0, [pc, #72]	; (8002ea8 <consumer_modem_queue+0x68>)
 8002e60:	f000 fa62 	bl	8003328 <printk>
		for ( i = 1; i <= number_of_messages; i++) {
 8002e64:	2401      	movs	r4, #1

K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_GET, k_msgq_get, int, struct k_msgq *, q, void *, data, s32_t, timeout)
 8002e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e6a:	f10d 0107 	add.w	r1, sp, #7
 8002e6e:	4628      	mov	r0, r5
 8002e70:	3401      	adds	r4, #1
 8002e72:	f002 f987 	bl	8005184 <_impl_k_msgq_get>
 8002e76:	b2e4      	uxtb	r4, r4
       			/* get a data item */
       			k_msgq_get(&modem_queue, &recv_data, K_FOREVER);
       			/* process data item */
			//printk("  - Item %d from queue: %c\n", i, data.response);
			strcat(full_message, recv_data);
 8002e78:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002e7c:	a802      	add	r0, sp, #8
 8002e7e:	f7fd ffed 	bl	8000e5c <strcat>
		for ( i = 1; i <= number_of_messages; i++) {
 8002e82:	42a6      	cmp	r6, r4
 8002e84:	d2ef      	bcs.n	8002e66 <consumer_modem_queue+0x26>
		}
		printk("%s\n", full_message);
 8002e86:	4809      	ldr	r0, [pc, #36]	; (8002eac <consumer_modem_queue+0x6c>)
 8002e88:	a902      	add	r1, sp, #8
	} else {
		printk("%d - Queue empty.\n", k_uptime_get_32());
 8002e8a:	f000 fa4d 	bl	8003328 <printk>
	}
}
 8002e8e:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 8002e92:	bd70      	pop	{r4, r5, r6, pc}
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
 8002e94:	f002 fe22 	bl	8005adc <_impl_k_uptime_get_32>
		printk("%d - Queue empty.\n", k_uptime_get_32());
 8002e98:	4601      	mov	r1, r0
 8002e9a:	4805      	ldr	r0, [pc, #20]	; (8002eb0 <consumer_modem_queue+0x70>)
 8002e9c:	e7f5      	b.n	8002e8a <consumer_modem_queue+0x4a>
 8002e9e:	bf00      	nop
 8002ea0:	20001584 	.word	0x20001584
 8002ea4:	080061b0 	.word	0x080061b0
 8002ea8:	08006144 	.word	0x08006144
 8002eac:	08006169 	.word	0x08006169
 8002eb0:	0800616d 	.word	0x0800616d

08002eb4 <main>:

void main(void)
{
 8002eb4:	b508      	push	{r3, lr}
    printk("stm32_lte project\n");
 8002eb6:	480b      	ldr	r0, [pc, #44]	; (8002ee4 <main+0x30>)
 8002eb8:	f000 fa36 	bl	8003328 <printk>
    u8_t status;
    status = ay_uart_driver_open();
 8002ebc:	f7ff ff82 	bl	8002dc4 <ay_uart_driver_open>
    if (status == 0) {
 8002ec0:	b940      	cbnz	r0, 8002ed4 <main+0x20>
        printk("Sending AT to UART...\n");
 8002ec2:	4809      	ldr	r0, [pc, #36]	; (8002ee8 <main+0x34>)
 8002ec4:	f000 fa30 	bl	8003328 <printk>
        ay_uart_driver_write("AT\r\n\r\n");
 8002ec8:	4808      	ldr	r0, [pc, #32]	; (8002eec <main+0x38>)
 8002eca:	f7ff ffa3 	bl	8002e14 <ay_uart_driver_write>
	printk("\n");
 8002ece:	4808      	ldr	r0, [pc, #32]	; (8002ef0 <main+0x3c>)
 8002ed0:	f000 fa2a 	bl	8003328 <printk>
    }
    while(1) {
    // Read the modem queue
    consumer_modem_queue();
 8002ed4:	f7ff ffb4 	bl	8002e40 <consumer_modem_queue>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
 8002ed8:	f242 7010 	movw	r0, #10000	; 0x2710
 8002edc:	f002 fb80 	bl	80055e0 <_impl_k_sleep>
 8002ee0:	e7f8      	b.n	8002ed4 <main+0x20>
 8002ee2:	bf00      	nop
 8002ee4:	08006180 	.word	0x08006180
 8002ee8:	08006193 	.word	0x08006193
 8002eec:	080061aa 	.word	0x080061aa
 8002ef0:	080061af 	.word	0x080061af

08002ef4 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8002ef4:	b508      	push	{r3, lr}
 8002ef6:	4604      	mov	r4, r0
 8002ef8:	4608      	mov	r0, r1
 8002efa:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 8002efc:	461a      	mov	r2, r3
 8002efe:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
 8002f00:	f002 fba6 	bl	8005650 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
 8002f04:	f001 fb16 	bl	8004534 <_impl_k_thread_abort>

08002f08 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
 8002f08:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
 8002f0a:	f990 400b 	ldrsb.w	r4, [r0, #11]
 8002f0e:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
 8002f10:	428c      	cmp	r4, r1
 8002f12:	f04f 040c 	mov.w	r4, #12
 8002f16:	bfb6      	itet	lt
 8002f18:	4361      	mullt	r1, r4
 8002f1a:	fb04 0101 	mlage	r1, r4, r1, r0
 8002f1e:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
 8002f20:	2420      	movs	r4, #32
 8002f22:	fb92 f4f4 	sdiv	r4, r2, r4
 8002f26:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8002f2a:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
 8002f2c:	f002 001f 	and.w	r0, r2, #31
 8002f30:	bd10      	pop	{r4, pc}

08002f32 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
 8002f32:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
 8002f34:	ab01      	add	r3, sp, #4
 8002f36:	f7ff ffe7 	bl	8002f08 <get_bit_ptr>

	*word |= (1<<bit);
 8002f3a:	9a01      	ldr	r2, [sp, #4]
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	fa03 f000 	lsl.w	r0, r3, r0
 8002f42:	6813      	ldr	r3, [r2, #0]
 8002f44:	4303      	orrs	r3, r0
 8002f46:	6013      	str	r3, [r2, #0]
}
 8002f48:	b003      	add	sp, #12
 8002f4a:	f85d fb04 	ldr.w	pc, [sp], #4

08002f4e <_sys_mem_pool_base_init>:
{
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
 8002f4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 8002f52:	6843      	ldr	r3, [r0, #4]
 8002f54:	8905      	ldrh	r5, [r0, #8]
{
 8002f56:	4604      	mov	r4, r0
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 8002f58:	6800      	ldr	r0, [r0, #0]

	p->max_inline_level = -1;

	for (i = 0; i < p->n_levels; i++) {
 8002f5a:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 8002f5c:	435d      	muls	r5, r3
	p->max_inline_level = -1;
 8002f5e:	22ff      	movs	r2, #255	; 0xff
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 8002f60:	4428      	add	r0, r5
	p->max_inline_level = -1;
 8002f62:	72e2      	strb	r2, [r4, #11]
	for (i = 0; i < p->n_levels; i++) {
 8002f64:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
 8002f66:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
 8002f6a:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
 8002f6e:	42b9      	cmp	r1, r7
 8002f70:	db05      	blt.n	8002f7e <_sys_mem_pool_base_init+0x30>
 8002f72:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
 8002f74:	8923      	ldrh	r3, [r4, #8]
 8002f76:	429d      	cmp	r5, r3
 8002f78:	db23      	blt.n	8002fc2 <_sys_mem_pool_base_init+0x74>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
 8002f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
 8002f7e:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
 8002f82:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
 8002f86:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
 8002f8a:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
 8002f8c:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
 8002f90:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
 8002f94:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
 8002f98:	bfc8      	it	gt
 8002f9a:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
 8002f9c:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8002fa0:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
 8002fa4:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
 8002fa8:	bfca      	itet	gt
 8002faa:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
 8002fae:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
 8002fb0:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
 8002fb4:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
 8002fb8:	bfc8      	it	gt
 8002fba:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
 8002fbe:	3101      	adds	r1, #1
 8002fc0:	e7d5      	b.n	8002f6e <_sys_mem_pool_base_init+0x20>
	return (u8_t *)p->buf + lsz * block;
 8002fc2:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
 8002fc4:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
 8002fc6:	6820      	ldr	r0, [r4, #0]
 8002fc8:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
 8002fca:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
 8002fcc:	5086      	str	r6, [r0, r2]
	return (u8_t *)p->buf + lsz * block;
 8002fce:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
 8002fd4:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	6011      	str	r1, [r2, #0]
	list->tail = node;
 8002fda:	6099      	str	r1, [r3, #8]
 8002fdc:	462a      	mov	r2, r5
 8002fde:	2100      	movs	r1, #0
 8002fe0:	f7ff ffa7 	bl	8002f32 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
 8002fe4:	3501      	adds	r5, #1
 8002fe6:	e7c5      	b.n	8002f74 <_sys_mem_pool_base_init+0x26>

08002fe8 <z_arch_printk_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
 8002fe8:	2000      	movs	r0, #0
 8002fea:	4770      	bx	lr

08002fec <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8002fec:	680b      	ldr	r3, [r1, #0]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8002ff2:	4b01      	ldr	r3, [pc, #4]	; (8002ff8 <char_out+0xc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4718      	bx	r3
 8002ff8:	20001468 	.word	0x20001468

08002ffc <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
 8002ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003000:	b085      	sub	sp, #20
 8003002:	469b      	mov	fp, r3
 8003004:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8003006:	f8df a090 	ldr.w	sl, [pc, #144]	; 8003098 <_printk_dec_ulong+0x9c>
 800300a:	2c01      	cmp	r4, #1
 800300c:	bfb8      	it	lt
 800300e:	2401      	movlt	r4, #1
 8003010:	2b01      	cmp	r3, #1
 8003012:	bf0c      	ite	eq
 8003014:	2330      	moveq	r3, #48	; 0x30
 8003016:	2320      	movne	r3, #32
 8003018:	4615      	mov	r5, r2
 800301a:	4680      	mov	r8, r0
 800301c:	4689      	mov	r9, r1
 800301e:	9401      	str	r4, [sp, #4]
 8003020:	9302      	str	r3, [sp, #8]
 8003022:	2601      	movs	r6, #1
 8003024:	270a      	movs	r7, #10
 8003026:	2200      	movs	r2, #0
 8003028:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
 800302c:	b90a      	cbnz	r2, 8003032 <_printk_dec_ulong+0x36>
 800302e:	45aa      	cmp	sl, r5
 8003030:	d21f      	bcs.n	8003072 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
 8003032:	fbb5 f0f4 	udiv	r0, r5, r4
 8003036:	4649      	mov	r1, r9
 8003038:	3030      	adds	r0, #48	; 0x30
 800303a:	47c0      	blx	r8
			digits++;
 800303c:	3601      	adds	r6, #1
			found_largest_digit = 1;
 800303e:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
 8003040:	3f01      	subs	r7, #1
	while (pos >= 9) {
 8003042:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
 8003044:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
 8003048:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
 800304c:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
 8003050:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
 8003054:	d1e8      	bne.n	8003028 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
 8003056:	4649      	mov	r1, r9
 8003058:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800305c:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
 800305e:	f1bb 0f03 	cmp.w	fp, #3
 8003062:	d103      	bne.n	800306c <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
 8003064:	9b01      	ldr	r3, [sp, #4]
 8003066:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
 8003068:	2c00      	cmp	r4, #0
 800306a:	dc0f      	bgt.n	800308c <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
 800306c:	b005      	add	sp, #20
 800306e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
 8003072:	9b01      	ldr	r3, [sp, #4]
 8003074:	42bb      	cmp	r3, r7
 8003076:	dbe3      	blt.n	8003040 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
 8003078:	f1bb 0f02 	cmp.w	fp, #2
 800307c:	d8e0      	bhi.n	8003040 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 800307e:	4649      	mov	r1, r9
 8003080:	9802      	ldr	r0, [sp, #8]
 8003082:	9203      	str	r2, [sp, #12]
			digits++;
 8003084:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 8003086:	47c0      	blx	r8
			digits++;
 8003088:	9a03      	ldr	r2, [sp, #12]
 800308a:	e7d9      	b.n	8003040 <_printk_dec_ulong+0x44>
			out(' ', ctx);
 800308c:	4649      	mov	r1, r9
 800308e:	2020      	movs	r0, #32
 8003090:	47c0      	blx	r8
 8003092:	3c01      	subs	r4, #1
 8003094:	e7e8      	b.n	8003068 <_printk_dec_ulong+0x6c>
 8003096:	bf00      	nop
 8003098:	3b9ac9ff 	.word	0x3b9ac9ff

0800309c <__printk_hook_install>:
	_char_out = fn;
 800309c:	4b01      	ldr	r3, [pc, #4]	; (80030a4 <__printk_hook_install+0x8>)
 800309e:	6018      	str	r0, [r3, #0]
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	20001468 	.word	0x20001468

080030a8 <_vprintk>:
{
 80030a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ac:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
 80030ae:	f04f 0a00 	mov.w	sl, #0
{
 80030b2:	4606      	mov	r6, r0
 80030b4:	460f      	mov	r7, r1
 80030b6:	9204      	str	r2, [sp, #16]
 80030b8:	461c      	mov	r4, r3
	int min_width = -1;
 80030ba:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
 80030be:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
 80030c0:	4655      	mov	r5, sl
	while (*fmt) {
 80030c2:	9b04      	ldr	r3, [sp, #16]
 80030c4:	7818      	ldrb	r0, [r3, #0]
 80030c6:	b910      	cbnz	r0, 80030ce <_vprintk+0x26>
}
 80030c8:	b009      	add	sp, #36	; 0x24
 80030ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
 80030ce:	b945      	cbnz	r5, 80030e2 <_vprintk+0x3a>
			if (*fmt != '%') {
 80030d0:	2825      	cmp	r0, #37	; 0x25
 80030d2:	f000 810c 	beq.w	80032ee <_vprintk+0x246>
				out((int)*fmt, ctx);
 80030d6:	4639      	mov	r1, r7
 80030d8:	47b0      	blx	r6
		++fmt;
 80030da:	9b04      	ldr	r3, [sp, #16]
 80030dc:	3301      	adds	r3, #1
 80030de:	9304      	str	r3, [sp, #16]
 80030e0:	e7ef      	b.n	80030c2 <_vprintk+0x1a>
			switch (*fmt) {
 80030e2:	2864      	cmp	r0, #100	; 0x64
 80030e4:	d061      	beq.n	80031aa <_vprintk+0x102>
 80030e6:	d819      	bhi.n	800311c <_vprintk+0x74>
 80030e8:	2839      	cmp	r0, #57	; 0x39
 80030ea:	d80a      	bhi.n	8003102 <_vprintk+0x5a>
 80030ec:	2831      	cmp	r0, #49	; 0x31
 80030ee:	d250      	bcs.n	8003192 <_vprintk+0xea>
 80030f0:	282d      	cmp	r0, #45	; 0x2d
 80030f2:	d03c      	beq.n	800316e <_vprintk+0xc6>
 80030f4:	2830      	cmp	r0, #48	; 0x30
 80030f6:	d03d      	beq.n	8003174 <_vprintk+0xcc>
 80030f8:	2825      	cmp	r0, #37	; 0x25
 80030fa:	d108      	bne.n	800310e <_vprintk+0x66>
				out((int)'%', ctx);
 80030fc:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
 80030fe:	47b0      	blx	r6
 8003100:	e06f      	b.n	80031e2 <_vprintk+0x13a>
			switch (*fmt) {
 8003102:	2858      	cmp	r0, #88	; 0x58
 8003104:	f000 8089 	beq.w	800321a <_vprintk+0x172>
 8003108:	2863      	cmp	r0, #99	; 0x63
 800310a:	f000 80ea 	beq.w	80032e2 <_vprintk+0x23a>
				out((int)'%', ctx);
 800310e:	4639      	mov	r1, r7
 8003110:	2025      	movs	r0, #37	; 0x25
 8003112:	47b0      	blx	r6
				out((int)*fmt, ctx);
 8003114:	9b04      	ldr	r3, [sp, #16]
 8003116:	4639      	mov	r1, r7
 8003118:	7818      	ldrb	r0, [r3, #0]
 800311a:	e7f0      	b.n	80030fe <_vprintk+0x56>
			switch (*fmt) {
 800311c:	2870      	cmp	r0, #112	; 0x70
 800311e:	d072      	beq.n	8003206 <_vprintk+0x15e>
 8003120:	d806      	bhi.n	8003130 <_vprintk+0x88>
 8003122:	2869      	cmp	r0, #105	; 0x69
 8003124:	d041      	beq.n	80031aa <_vprintk+0x102>
 8003126:	286c      	cmp	r0, #108	; 0x6c
 8003128:	d03c      	beq.n	80031a4 <_vprintk+0xfc>
 800312a:	2868      	cmp	r0, #104	; 0x68
 800312c:	d0d5      	beq.n	80030da <_vprintk+0x32>
 800312e:	e7ee      	b.n	800310e <_vprintk+0x66>
 8003130:	2875      	cmp	r0, #117	; 0x75
 8003132:	d058      	beq.n	80031e6 <_vprintk+0x13e>
 8003134:	d817      	bhi.n	8003166 <_vprintk+0xbe>
 8003136:	2873      	cmp	r0, #115	; 0x73
 8003138:	d1e9      	bne.n	800310e <_vprintk+0x66>
				char *s = va_arg(ap, char *);
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	f104 0b04 	add.w	fp, r4, #4
 8003140:	461c      	mov	r4, r3
				while (*s)
 8003142:	4625      	mov	r5, r4
 8003144:	f815 0b01 	ldrb.w	r0, [r5], #1
 8003148:	2800      	cmp	r0, #0
 800314a:	f040 80bf 	bne.w	80032cc <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
 800314e:	f1b8 0f03 	cmp.w	r8, #3
 8003152:	f040 80d5 	bne.w	8003300 <_vprintk+0x258>
					int remaining = min_width - (s - start);
 8003156:	1ae4      	subs	r4, r4, r3
 8003158:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
 800315c:	2c00      	cmp	r4, #0
 800315e:	f300 80bb 	bgt.w	80032d8 <_vprintk+0x230>
				char *s = va_arg(ap, char *);
 8003162:	465c      	mov	r4, fp
 8003164:	e03d      	b.n	80031e2 <_vprintk+0x13a>
			switch (*fmt) {
 8003166:	2878      	cmp	r0, #120	; 0x78
 8003168:	d057      	beq.n	800321a <_vprintk+0x172>
 800316a:	287a      	cmp	r0, #122	; 0x7a
 800316c:	e7de      	b.n	800312c <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
 800316e:	f04f 0803 	mov.w	r8, #3
 8003172:	e7b2      	b.n	80030da <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
 8003174:	f1b9 0f00 	cmp.w	r9, #0
 8003178:	da0e      	bge.n	8003198 <_vprintk+0xf0>
 800317a:	f1b8 0f00 	cmp.w	r8, #0
 800317e:	f000 80bc 	beq.w	80032fa <_vprintk+0x252>
					min_width = *fmt - '0';
 8003182:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
 8003186:	f1b8 0f00 	cmp.w	r8, #0
 800318a:	bf08      	it	eq
 800318c:	f04f 0802 	moveq.w	r8, #2
 8003190:	e7a3      	b.n	80030da <_vprintk+0x32>
				if (min_width < 0) {
 8003192:	f1b9 0f00 	cmp.w	r9, #0
 8003196:	dbf4      	blt.n	8003182 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
 8003198:	230a      	movs	r3, #10
 800319a:	fb03 0909 	mla	r9, r3, r9, r0
 800319e:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 80031a2:	e7f0      	b.n	8003186 <_vprintk+0xde>
				long_ctr++;
 80031a4:	f10a 0a01 	add.w	sl, sl, #1
 80031a8:	e797      	b.n	80030da <_vprintk+0x32>
				if (long_ctr < 2) {
 80031aa:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
 80031ae:	bfc5      	ittet	gt
 80031b0:	3407      	addgt	r4, #7
 80031b2:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
 80031b6:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
 80031b8:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
 80031ba:	bfd4      	ite	le
 80031bc:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
 80031be:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
 80031c2:	2d00      	cmp	r5, #0
 80031c4:	da05      	bge.n	80031d2 <_vprintk+0x12a>
					out((int)'-', ctx);
 80031c6:	4639      	mov	r1, r7
 80031c8:	202d      	movs	r0, #45	; 0x2d
 80031ca:	47b0      	blx	r6
					d = -d;
 80031cc:	426d      	negs	r5, r5
					min_width--;
 80031ce:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
 80031d2:	f8cd 9000 	str.w	r9, [sp]
 80031d6:	4643      	mov	r3, r8
 80031d8:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
 80031da:	4639      	mov	r1, r7
 80031dc:	4630      	mov	r0, r6
 80031de:	f7ff ff0d 	bl	8002ffc <_printk_dec_ulong>
			might_format = 0;
 80031e2:	2500      	movs	r5, #0
				break;
 80031e4:	e779      	b.n	80030da <_vprintk+0x32>
				if (long_ctr < 2) {
 80031e6:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
 80031ea:	bfc5      	ittet	gt
 80031ec:	3407      	addgt	r4, #7
 80031ee:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
 80031f2:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
 80031f4:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
 80031f6:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
 80031fa:	bfcc      	ite	gt
 80031fc:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
 8003200:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
 8003202:	4643      	mov	r3, r8
 8003204:	e7e9      	b.n	80031da <_vprintk+0x132>
				  out('0', ctx);
 8003206:	4639      	mov	r1, r7
 8003208:	2030      	movs	r0, #48	; 0x30
 800320a:	47b0      	blx	r6
				  out('x', ctx);
 800320c:	4639      	mov	r1, r7
 800320e:	2078      	movs	r0, #120	; 0x78
 8003210:	47b0      	blx	r6
				  min_width = 8;
 8003212:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
 8003216:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
 800321a:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
 800321e:	bfc7      	ittee	gt
 8003220:	3407      	addgt	r4, #7
 8003222:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
 8003226:	6823      	ldrle	r3, [r4, #0]
 8003228:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
 800322a:	bfc2      	ittt	gt
 800322c:	f103 0408 	addgt.w	r4, r3, #8
 8003230:	681b      	ldrgt	r3, [r3, #0]
 8003232:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
 8003234:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
 8003238:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
 800323c:	bfd8      	it	le
 800323e:	3404      	addle	r4, #4
	int digits = 0;
 8003240:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
 8003242:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
 8003244:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
 8003246:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800324a:	9b05      	ldr	r3, [sp, #20]
 800324c:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8003250:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
 8003254:	f010 000f 	ands.w	r0, r0, #15
 8003258:	d109      	bne.n	800326e <_vprintk+0x1c6>
 800325a:	9b07      	ldr	r3, [sp, #28]
 800325c:	b913      	cbnz	r3, 8003264 <_vprintk+0x1bc>
 800325e:	f1bb 0f00 	cmp.w	fp, #0
 8003262:	d122      	bne.n	80032aa <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
 8003264:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8003268:	e007      	b.n	800327a <_vprintk+0x1d2>
	for (; size; size--) {
 800326a:	9a06      	ldr	r2, [sp, #24]
 800326c:	e7eb      	b.n	8003246 <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
 800326e:	2809      	cmp	r0, #9
 8003270:	bf8c      	ite	hi
 8003272:	f04f 0e57 	movhi.w	lr, #87	; 0x57
 8003276:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
 800327a:	4639      	mov	r1, r7
 800327c:	4470      	add	r0, lr
 800327e:	9206      	str	r2, [sp, #24]
 8003280:	47b0      	blx	r6
			digits++;
 8003282:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
 8003284:	9507      	str	r5, [sp, #28]
			digits++;
 8003286:	3301      	adds	r3, #1
 8003288:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
 800328a:	f1bb 0f00 	cmp.w	fp, #0
 800328e:	d1ec      	bne.n	800326a <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
 8003290:	f1b8 0f03 	cmp.w	r8, #3
 8003294:	d1a5      	bne.n	80031e2 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
 8003296:	9b03      	ldr	r3, [sp, #12]
 8003298:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
 800329c:	2d00      	cmp	r5, #0
 800329e:	dda0      	ble.n	80031e2 <_vprintk+0x13a>
			out(' ', ctx);
 80032a0:	4639      	mov	r1, r7
 80032a2:	2020      	movs	r0, #32
 80032a4:	47b0      	blx	r6
 80032a6:	3d01      	subs	r5, #1
 80032a8:	e7f8      	b.n	800329c <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
 80032aa:	1e53      	subs	r3, r2, #1
 80032ac:	4591      	cmp	r9, r2
 80032ae:	9306      	str	r3, [sp, #24]
 80032b0:	dbeb      	blt.n	800328a <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
 80032b2:	f1b8 0f01 	cmp.w	r8, #1
 80032b6:	d103      	bne.n	80032c0 <_vprintk+0x218>
				out('0', ctx);
 80032b8:	4639      	mov	r1, r7
 80032ba:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
 80032bc:	47b0      	blx	r6
 80032be:	e7e4      	b.n	800328a <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
 80032c0:	f1b8 0f02 	cmp.w	r8, #2
 80032c4:	d1e1      	bne.n	800328a <_vprintk+0x1e2>
				out(' ', ctx);
 80032c6:	4639      	mov	r1, r7
 80032c8:	2020      	movs	r0, #32
 80032ca:	e7f7      	b.n	80032bc <_vprintk+0x214>
					out((int)(*s++), ctx);
 80032cc:	4639      	mov	r1, r7
 80032ce:	9303      	str	r3, [sp, #12]
 80032d0:	462c      	mov	r4, r5
 80032d2:	47b0      	blx	r6
 80032d4:	9b03      	ldr	r3, [sp, #12]
 80032d6:	e734      	b.n	8003142 <_vprintk+0x9a>
						out(' ', ctx);
 80032d8:	4639      	mov	r1, r7
 80032da:	2020      	movs	r0, #32
 80032dc:	47b0      	blx	r6
 80032de:	3c01      	subs	r4, #1
 80032e0:	e73c      	b.n	800315c <_vprintk+0xb4>
				out(c, ctx);
 80032e2:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
 80032e4:	1d25      	adds	r5, r4, #4
				out(c, ctx);
 80032e6:	4639      	mov	r1, r7
 80032e8:	47b0      	blx	r6
				int c = va_arg(ap, int);
 80032ea:	462c      	mov	r4, r5
 80032ec:	e779      	b.n	80031e2 <_vprintk+0x13a>
				long_ctr = 0;
 80032ee:	46aa      	mov	sl, r5
				padding = PAD_NONE;
 80032f0:	46a8      	mov	r8, r5
				min_width = -1;
 80032f2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
 80032f6:	2501      	movs	r5, #1
 80032f8:	e6ef      	b.n	80030da <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
 80032fa:	f04f 0801 	mov.w	r8, #1
 80032fe:	e6ec      	b.n	80030da <_vprintk+0x32>
				char *s = va_arg(ap, char *);
 8003300:	465c      	mov	r4, fp
			might_format = 0;
 8003302:	4605      	mov	r5, r0
 8003304:	e6e9      	b.n	80030da <_vprintk+0x32>
	...

08003308 <vprintk>:
{
 8003308:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
 800330a:	ac02      	add	r4, sp, #8
 800330c:	2300      	movs	r3, #0
 800330e:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4803      	ldr	r0, [pc, #12]	; (8003324 <vprintk+0x1c>)
 8003318:	4621      	mov	r1, r4
 800331a:	f7ff fec5 	bl	80030a8 <_vprintk>
}
 800331e:	b002      	add	sp, #8
 8003320:	bd10      	pop	{r4, pc}
 8003322:	bf00      	nop
 8003324:	08002fed 	.word	0x08002fed

08003328 <printk>:
{
 8003328:	b40f      	push	{r0, r1, r2, r3}
 800332a:	b507      	push	{r0, r1, r2, lr}
 800332c:	a904      	add	r1, sp, #16
 800332e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8003332:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 8003334:	f7ff ffe8 	bl	8003308 <vprintk>
}
 8003338:	b003      	add	sp, #12
 800333a:	f85d eb04 	ldr.w	lr, [sp], #4
 800333e:	b004      	add	sp, #16
 8003340:	4770      	bx	lr

08003342 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_COMPILER_OPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_KERNEL_BIN_NAME, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
 8003342:	4770      	bx	lr

08003344 <stm32l4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8003344:	f04f 0310 	mov.w	r3, #16
 8003348:	f3ef 8111 	mrs	r1, BASEPRI
 800334c:	f383 8811 	msr	BASEPRI, r3
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <stm32l4_init+0x24>)
 8003352:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003356:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8003358:	62da      	str	r2, [r3, #44]	; 0x2c
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 800335a:	f381 8811 	msr	BASEPRI, r1

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 800335e:	4b03      	ldr	r3, [pc, #12]	; (800336c <stm32l4_init+0x28>)
 8003360:	4a03      	ldr	r2, [pc, #12]	; (8003370 <stm32l4_init+0x2c>)
 8003362:	601a      	str	r2, [r3, #0]

	return 0;
}
 8003364:	2000      	movs	r0, #0
 8003366:	4770      	bx	lr
 8003368:	e000ed00 	.word	0xe000ed00
 800336c:	2000146c 	.word	0x2000146c
 8003370:	003d0900 	.word	0x003d0900

08003374 <stm32_gpio_flags_to_conf>:
	u32_t ascr; /* Only present on STM32L4x1, STM32L4x5, STM32L4x6 */
};

int stm32_gpio_flags_to_conf(int flags, int *pincfg)
{
	int direction = flags & GPIO_DIR_MASK;
 8003374:	f000 0301 	and.w	r3, r0, #1
	int pud = flags & GPIO_PUD_MASK;

	if (!pincfg) {
 8003378:	b1b1      	cbz	r1, 80033a8 <stm32_gpio_flags_to_conf+0x34>
		return -EINVAL;
	}

	if (direction == GPIO_DIR_OUT) {
 800337a:	b123      	cbz	r3, 8003386 <stm32_gpio_flags_to_conf+0x12>
		*pincfg = STM32_MODER_OUTPUT_MODE;
 800337c:	2310      	movs	r3, #16
 800337e:	600b      	str	r3, [r1, #0]
			/* floating */
			*pincfg = *pincfg | STM32_PUPDR_NO_PULL;
		}
	}

	return 0;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	4770      	bx	lr
	int pud = flags & GPIO_PUD_MASK;
 8003386:	f400 7040 	and.w	r0, r0, #768	; 0x300
		if (pud == GPIO_PUD_PULL_UP) {
 800338a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800338e:	d103      	bne.n	8003398 <stm32_gpio_flags_to_conf+0x24>
			*pincfg = *pincfg | STM32_PUPDR_PULL_UP;
 8003390:	f44f 7200 	mov.w	r2, #512	; 0x200
			*pincfg = *pincfg | STM32_PUPDR_PULL_DOWN;
 8003394:	600a      	str	r2, [r1, #0]
 8003396:	e7f4      	b.n	8003382 <stm32_gpio_flags_to_conf+0xe>
		} else if (pud == GPIO_PUD_PULL_DOWN) {
 8003398:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800339c:	d001      	beq.n	80033a2 <stm32_gpio_flags_to_conf+0x2e>
		*pincfg = STM32_MODER_INPUT_MODE;
 800339e:	600b      	str	r3, [r1, #0]
 80033a0:	e7ef      	b.n	8003382 <stm32_gpio_flags_to_conf+0xe>
			*pincfg = *pincfg | STM32_PUPDR_PULL_DOWN;
 80033a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033a6:	e7f5      	b.n	8003394 <stm32_gpio_flags_to_conf+0x20>
		return -EINVAL;
 80033a8:	f06f 0315 	mvn.w	r3, #21
 80033ac:	e7e9      	b.n	8003382 <stm32_gpio_flags_to_conf+0xe>

080033ae <stm32_gpio_configure>:

int stm32_gpio_configure(u32_t *base_addr, int pin, int pinconf, int afnum)
{
 80033ae:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile struct stm32l4x_gpio *gpio =
		(struct stm32l4x_gpio *)(base_addr);
	unsigned int mode, otype, ospeed, pupd;
	unsigned int pin_shift = pin << 1;
	unsigned int afr_bank = pin / 8;
	unsigned int afr_shift = (pin % 8) << 2;
 80033b0:	424c      	negs	r4, r1
 80033b2:	f004 0407 	and.w	r4, r4, #7
	unsigned int pin_shift = pin << 1;
 80033b6:	ea4f 0741 	mov.w	r7, r1, lsl #1
	unsigned int afr_shift = (pin % 8) << 2;
 80033ba:	f001 0507 	and.w	r5, r1, #7
 80033be:	bf58      	it	pl
 80033c0:	4265      	negpl	r5, r4
	mode = (pinconf >> STM32_MODER_SHIFT) & STM32_MODER_MASK;
	otype = (pinconf >> STM32_OTYPER_SHIFT) & STM32_OTYPER_MASK;
	ospeed = (pinconf >> STM32_OSPEEDR_SHIFT) & STM32_OSPEEDR_MASK;
	pupd = (pinconf >> STM32_PUPDR_SHIFT) & STM32_PUPDR_MASK;

	scratch = gpio->moder & ~(STM32_MODER_MASK << pin_shift);
 80033c2:	2403      	movs	r4, #3
 80033c4:	f8d0 e000 	ldr.w	lr, [r0]
 80033c8:	40bc      	lsls	r4, r7
 80033ca:	43e4      	mvns	r4, r4
	mode = (pinconf >> STM32_MODER_SHIFT) & STM32_MODER_MASK;
 80033cc:	f3c2 1601 	ubfx	r6, r2, #4, #2
	scratch = gpio->moder & ~(STM32_MODER_MASK << pin_shift);
 80033d0:	ea0e 0e04 	and.w	lr, lr, r4
	gpio->moder = scratch | (mode << pin_shift);
 80033d4:	40be      	lsls	r6, r7
 80033d6:	ea46 060e 	orr.w	r6, r6, lr
 80033da:	6006      	str	r6, [r0, #0]

	scratch = gpio->ospeedr & ~(STM32_OSPEEDR_MASK << pin_shift);
 80033dc:	f8d0 e008 	ldr.w	lr, [r0, #8]
	ospeed = (pinconf >> STM32_OSPEEDR_SHIFT) & STM32_OSPEEDR_MASK;
 80033e0:	f3c2 16c1 	ubfx	r6, r2, #7, #2
	scratch = gpio->ospeedr & ~(STM32_OSPEEDR_MASK << pin_shift);
 80033e4:	ea04 0e0e 	and.w	lr, r4, lr
	gpio->ospeedr = scratch | (ospeed << pin_shift);
 80033e8:	40be      	lsls	r6, r7
 80033ea:	ea46 060e 	orr.w	r6, r6, lr
 80033ee:	6086      	str	r6, [r0, #8]

	scratch = gpio->otyper & ~(STM32_OTYPER_MASK << pin);
 80033f0:	6846      	ldr	r6, [r0, #4]
 80033f2:	f04f 0e01 	mov.w	lr, #1
 80033f6:	fa0e fe01 	lsl.w	lr, lr, r1
 80033fa:	ea26 060e 	bic.w	r6, r6, lr
	otype = (pinconf >> STM32_OTYPER_SHIFT) & STM32_OTYPER_MASK;
 80033fe:	f3c2 1e80 	ubfx	lr, r2, #6, #1
	gpio->otyper = scratch | (otype << pin);
 8003402:	fa0e fe01 	lsl.w	lr, lr, r1
 8003406:	ea46 060e 	orr.w	r6, r6, lr
 800340a:	6046      	str	r6, [r0, #4]

	scratch = gpio->pupdr & ~(STM32_PUPDR_MASK << pin_shift);
 800340c:	68c6      	ldr	r6, [r0, #12]
	pupd = (pinconf >> STM32_PUPDR_SHIFT) & STM32_PUPDR_MASK;
 800340e:	f3c2 2241 	ubfx	r2, r2, #9, #2
	gpio->pupdr = scratch | (pupd << pin_shift);
 8003412:	40ba      	lsls	r2, r7
	scratch = gpio->pupdr & ~(STM32_PUPDR_MASK << pin_shift);
 8003414:	4034      	ands	r4, r6
	gpio->pupdr = scratch | (pupd << pin_shift);
 8003416:	4322      	orrs	r2, r4
 8003418:	60c2      	str	r2, [r0, #12]
	unsigned int afr_bank = pin / 8;
 800341a:	2208      	movs	r2, #8
 800341c:	fb91 f1f2 	sdiv	r1, r1, r2
 8003420:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	unsigned int afr_shift = (pin % 8) << 2;
 8003424:	00ad      	lsls	r5, r5, #2

	scratch = gpio->afr[afr_bank] & ~(STM32_AFR_MASK << afr_shift);
 8003426:	6a02      	ldr	r2, [r0, #32]
 8003428:	210f      	movs	r1, #15
 800342a:	40a9      	lsls	r1, r5
 800342c:	ea22 0201 	bic.w	r2, r2, r1
	gpio->afr[afr_bank] = scratch | (afnum << afr_shift);
 8003430:	40ab      	lsls	r3, r5
 8003432:	431a      	orrs	r2, r3
 8003434:	6202      	str	r2, [r0, #32]

	return 0;
}
 8003436:	2000      	movs	r0, #0
 8003438:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800343a <stm32_gpio_set>:

int stm32_gpio_set(u32_t *base, int pin, int value)
{
	struct stm32l4x_gpio *gpio = (struct stm32l4x_gpio *)base;
	int pval = 1 << (pin & 0xf);
 800343a:	2301      	movs	r3, #1
 800343c:	f001 010f 	and.w	r1, r1, #15
 8003440:	fa03 f101 	lsl.w	r1, r3, r1
 8003444:	6943      	ldr	r3, [r0, #20]

	if (value) {
 8003446:	b11a      	cbz	r2, 8003450 <stm32_gpio_set+0x16>
		gpio->odr |= pval;
 8003448:	430b      	orrs	r3, r1
	} else {
		gpio->odr &= ~pval;
 800344a:	6143      	str	r3, [r0, #20]
	}

	return 0;
}
 800344c:	2000      	movs	r0, #0
 800344e:	4770      	bx	lr
		gpio->odr &= ~pval;
 8003450:	ea23 0301 	bic.w	r3, r3, r1
 8003454:	e7f9      	b.n	800344a <stm32_gpio_set+0x10>

08003456 <stm32_gpio_get>:

int stm32_gpio_get(u32_t *base, int pin)
{
	struct stm32l4x_gpio *gpio = (struct stm32l4x_gpio *)base;

	return (gpio->idr >> pin) & STM32L4X_IDR_PIN_MASK;
 8003456:	6900      	ldr	r0, [r0, #16]
 8003458:	40c8      	lsrs	r0, r1
}
 800345a:	f000 0001 	and.w	r0, r0, #1
 800345e:	4770      	bx	lr

08003460 <stm32_gpio_enable_int>:

int stm32_gpio_enable_int(int port, int pin)
{
 8003460:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003462:	4605      	mov	r5, r0
 8003464:	481d      	ldr	r0, [pc, #116]	; (80034dc <stm32_gpio_enable_int+0x7c>)
 8003466:	460c      	mov	r4, r1
 8003468:	f001 fd68 	bl	8004f3c <_impl_device_get_binding>
	struct stm32l4x_syscfg *syscfg = (struct stm32l4x_syscfg *)SYSCFG_BASE;
	struct device *clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	u32_t *reg;

	/* Enable SYSCFG clock */
	struct stm32_pclken pclken = {
 800346c:	491c      	ldr	r1, [pc, #112]	; (80034e0 <stm32_gpio_enable_int+0x80>)
 800346e:	4602      	mov	r2, r0
 8003470:	c903      	ldmia	r1, {r0, r1}
 8003472:	e88d 0003 	stmia.w	sp, {r0, r1}
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
 8003476:	6851      	ldr	r1, [r2, #4]
 8003478:	4610      	mov	r0, r2
 800347a:	680e      	ldr	r6, [r1, #0]
 800347c:	4669      	mov	r1, sp
 800347e:	47b0      	blx	r6
		.bus = STM32_CLOCK_BUS_APB2,
		.enr = LL_APB2_GRP1_PERIPH_SYSCFG
	};
	clock_control_on(clk, (clock_control_subsys_t *) &pclken);

	if (pin <= STM32L4X_PIN3) {
 8003480:	2c03      	cmp	r4, #3
 8003482:	dc15      	bgt.n	80034b0 <stm32_gpio_enable_int+0x50>
		reg = &syscfg->exticr1;
 8003484:	4b17      	ldr	r3, [pc, #92]	; (80034e4 <stm32_gpio_enable_int+0x84>)
 8003486:	4a18      	ldr	r2, [pc, #96]	; (80034e8 <stm32_gpio_enable_int+0x88>)
 8003488:	689b      	ldr	r3, [r3, #8]
		reg = &syscfg->exticr4;
	} else {
		return -EINVAL;
	}

	*reg &= ~(STM32L4X_SYSCFG_EXTICR_PIN_MASK << ((pin % 4) * 4));
 800348a:	4261      	negs	r1, r4
 800348c:	f001 0103 	and.w	r1, r1, #3
 8003490:	f004 0403 	and.w	r4, r4, #3
 8003494:	bf58      	it	pl
 8003496:	424c      	negpl	r4, r1
 8003498:	00a4      	lsls	r4, r4, #2
 800349a:	2107      	movs	r1, #7
 800349c:	40a1      	lsls	r1, r4
 800349e:	ea23 0301 	bic.w	r3, r3, r1
	*reg |= port << ((pin % 4) * 4);
 80034a2:	fa05 f404 	lsl.w	r4, r5, r4
 80034a6:	431c      	orrs	r4, r3
 80034a8:	6014      	str	r4, [r2, #0]

	return 0; /* Nothing to do here for STM32L4s */
 80034aa:	2000      	movs	r0, #0
}
 80034ac:	b002      	add	sp, #8
 80034ae:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pin <= STM32L4X_PIN7) {
 80034b0:	2c07      	cmp	r4, #7
 80034b2:	dc03      	bgt.n	80034bc <stm32_gpio_enable_int+0x5c>
		reg = &syscfg->exticr2;
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <stm32_gpio_enable_int+0x84>)
 80034b6:	4a0d      	ldr	r2, [pc, #52]	; (80034ec <stm32_gpio_enable_int+0x8c>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	e7e6      	b.n	800348a <stm32_gpio_enable_int+0x2a>
	} else if (pin <= STM32L4X_PIN11) {
 80034bc:	2c0b      	cmp	r4, #11
 80034be:	dc03      	bgt.n	80034c8 <stm32_gpio_enable_int+0x68>
		reg = &syscfg->exticr3;
 80034c0:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <stm32_gpio_enable_int+0x84>)
 80034c2:	4a0b      	ldr	r2, [pc, #44]	; (80034f0 <stm32_gpio_enable_int+0x90>)
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	e7e0      	b.n	800348a <stm32_gpio_enable_int+0x2a>
	} else if (pin <= STM32L4X_PIN15) {
 80034c8:	2c0f      	cmp	r4, #15
 80034ca:	dc03      	bgt.n	80034d4 <stm32_gpio_enable_int+0x74>
		reg = &syscfg->exticr4;
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <stm32_gpio_enable_int+0x84>)
 80034ce:	4a09      	ldr	r2, [pc, #36]	; (80034f4 <stm32_gpio_enable_int+0x94>)
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	e7da      	b.n	800348a <stm32_gpio_enable_int+0x2a>
		return -EINVAL;
 80034d4:	f06f 0015 	mvn.w	r0, #21
 80034d8:	e7e8      	b.n	80034ac <stm32_gpio_enable_int+0x4c>
 80034da:	bf00      	nop
 80034dc:	080061d2 	.word	0x080061d2
 80034e0:	08005f28 	.word	0x08005f28
 80034e4:	40010000 	.word	0x40010000
 80034e8:	40010008 	.word	0x40010008
 80034ec:	4001000c 	.word	0x4001000c
 80034f0:	40010010 	.word	0x40010010
 80034f4:	40010014 	.word	0x40010014

080034f8 <LL_RTC_ALMA_Init>:
  *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
  *         @arg @ref LL_RTC_HOURFORMAT_AMPM
  */
__STATIC_INLINE uint32_t LL_RTC_GetHourFormat(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 80034f8:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_RTC_ALMA_MASK(RTC_AlarmStruct->AlarmMask));
  assert_param(IS_LL_RTC_ALMA_DATE_WEEKDAY_SEL(RTC_AlarmStruct->AlarmDateWeekDaySel));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 80034fa:	065b      	lsls	r3, r3, #25
      assert_param(IS_LL_RTC_HOUR12(RTC_AlarmStruct->AlarmTime.Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_AlarmStruct->AlarmTime.TimeFormat));
    }
    else
    {
      RTC_AlarmStruct->AlarmTime.TimeFormat = 0x00U;
 80034fc:	bf58      	it	pl
 80034fe:	2300      	movpl	r3, #0
{
 8003500:	b5f0      	push	{r4, r5, r6, r7, lr}
      RTC_AlarmStruct->AlarmTime.TimeFormat = 0x00U;
 8003502:	bf58      	it	pl
 8003504:	6013      	strpl	r3, [r2, #0]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8003506:	23ca      	movs	r3, #202	; 0xca
 8003508:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800350a:	2353      	movs	r3, #83	; 0x53
 800350c:	6243      	str	r3, [r0, #36]	; 0x24

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);

  /* Select weekday selection */
  if (RTC_AlarmStruct->AlarmDateWeekDaySel == LL_RTC_ALMA_DATEWEEKDAYSEL_DATE)
 800350e:	68d3      	ldr	r3, [r2, #12]
 8003510:	6817      	ldr	r7, [r2, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d154      	bne.n	80035c0 <LL_RTC_ALMA_Init+0xc8>
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ALMA_DisableWeekday(RTC_TypeDef *RTCx)
{
  CLEAR_BIT(RTCx->ALRMAR, RTC_ALRMAR_WDSEL);
 8003516:	69c3      	ldr	r3, [r0, #28]
 8003518:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800351c:	61c3      	str	r3, [r0, #28]
 800351e:	7c14      	ldrb	r4, [r2, #16]
  {
    /* Set the date for ALARM */
    LL_RTC_ALMA_DisableWeekday(RTCx);
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8003520:	b1f1      	cbz	r1, 8003560 <LL_RTC_ALMA_Init+0x68>
  * @param  Day Value between Min_Data=0x01 and Max_Data=0x31
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ALMA_SetDay(RTC_TypeDef *RTCx, uint32_t Day)
{
  MODIFY_REG(RTCx->ALRMAR, (RTC_ALRMAR_DT | RTC_ALRMAR_DU),
 8003522:	69c1      	ldr	r1, [r0, #28]
 8003524:	f021 517c 	bic.w	r1, r1, #1056964608	; 0x3f000000
 8003528:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800352c:	61c1      	str	r1, [r0, #28]

  temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos))    | \
         (((Minutes & 0xF0U) << (RTC_ALRMAR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_ALRMAR_MNU_Pos)) | \
         (((Seconds & 0xF0U) << (RTC_ALRMAR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_ALRMAR_SU_Pos));

  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALRMAR_MNU | RTC_ALRMAR_ST | RTC_ALRMAR_SU, temp);
 800352e:	69c1      	ldr	r1, [r0, #28]
  }

  /* Configure the Alarm register */
  if (RTC_Format != LL_RTC_FORMAT_BIN)
  {
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat, RTC_AlarmStruct->AlarmTime.Hours,
 8003530:	7993      	ldrb	r3, [r2, #6]
 8003532:	7954      	ldrb	r4, [r2, #5]
 8003534:	433b      	orrs	r3, r7
 8003536:	f021 117f 	bic.w	r1, r1, #8323199	; 0x7f007f
 800353a:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
 800353e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8003542:	430b      	orrs	r3, r1
 8003544:	7911      	ldrb	r1, [r2, #4]
 8003546:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800354a:	61c3      	str	r3, [r0, #28]
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_MSK4 | RTC_ALRMAR_MSK3 | RTC_ALRMAR_MSK2 | RTC_ALRMAR_MSK1, Mask);
 800354c:	69c3      	ldr	r3, [r0, #28]
 800354e:	6892      	ldr	r2, [r2, #8]
 8003550:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003554:	4313      	orrs	r3, r2
 8003556:	61c3      	str	r3, [r0, #28]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8003558:	23ff      	movs	r3, #255	; 0xff
 800355a:	6243      	str	r3, [r0, #36]	; 0x24

  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);

  return SUCCESS;
}
 800355c:	2001      	movs	r0, #1
 800355e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(RTCx->ALRMAR, (RTC_ALRMAR_DT | RTC_ALRMAR_DU),
 8003560:	69c3      	ldr	r3, [r0, #28]
      LL_RTC_ALMA_SetDay(RTCx, __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmDateWeekDay));
 8003562:	210a      	movs	r1, #10
 8003564:	fbb4 f5f1 	udiv	r5, r4, r1
 8003568:	fb01 4115 	mls	r1, r1, r5, r4
 800356c:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8003570:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003574:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 8003578:	61c1      	str	r1, [r0, #28]
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Seconds));
 800357a:	7993      	ldrb	r3, [r2, #6]
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALRMAR_MNU | RTC_ALRMAR_ST | RTC_ALRMAR_SU, temp);
 800357c:	69c6      	ldr	r6, [r0, #28]
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Minutes),
 800357e:	7954      	ldrb	r4, [r2, #5]
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Hours),
 8003580:	7915      	ldrb	r5, [r2, #4]
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Seconds));
 8003582:	210a      	movs	r1, #10
 8003584:	f026 167f 	bic.w	r6, r6, #8323199	; 0x7f007f
 8003588:	fbb3 fef1 	udiv	lr, r3, r1
 800358c:	fb01 331e 	mls	r3, r1, lr, r3
 8003590:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
 8003594:	f426 46fe 	bic.w	r6, r6, #32512	; 0x7f00
 8003598:	433e      	orrs	r6, r7
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat,
 800359a:	b2db      	uxtb	r3, r3
 800359c:	4333      	orrs	r3, r6
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Minutes),
 800359e:	fbb4 f6f1 	udiv	r6, r4, r1
 80035a2:	fb01 4416 	mls	r4, r1, r6, r4
 80035a6:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat,
 80035aa:	b2e4      	uxtb	r4, r4
 80035ac:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Hours),
 80035b0:	fbb5 f4f1 	udiv	r4, r5, r1
 80035b4:	fb01 5114 	mls	r1, r1, r4, r5
 80035b8:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat,
 80035bc:	b2c9      	uxtb	r1, r1
 80035be:	e7c2      	b.n	8003546 <LL_RTC_ALMA_Init+0x4e>
  SET_BIT(RTCx->ALRMAR, RTC_ALRMAR_WDSEL);
 80035c0:	69c3      	ldr	r3, [r0, #28]
 80035c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035c6:	61c3      	str	r3, [r0, #28]
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_DU, WeekDay << RTC_ALRMAR_DU_Pos);
 80035c8:	69c3      	ldr	r3, [r0, #28]
    LL_RTC_ALMA_SetWeekDay(RTCx, RTC_AlarmStruct->AlarmDateWeekDay);
 80035ca:	7c14      	ldrb	r4, [r2, #16]
 80035cc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80035d0:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80035d4:	61c3      	str	r3, [r0, #28]
  if (RTC_Format != LL_RTC_FORMAT_BIN)
 80035d6:	2900      	cmp	r1, #0
 80035d8:	d0cf      	beq.n	800357a <LL_RTC_ALMA_Init+0x82>
 80035da:	e7a8      	b.n	800352e <LL_RTC_ALMA_Init+0x36>

080035dc <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 80035dc:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 80035de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035e2:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 80035e4:	68c3      	ldr	r3, [r0, #12]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 80035e6:	065a      	lsls	r2, r3, #25
 80035e8:	d41c      	bmi.n	8003624 <LL_RTC_EnterInitMode+0x48>
  WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035ee:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 80035f0:	68c3      	ldr	r3, [r0, #12]
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 80035f2:	490d      	ldr	r1, [pc, #52]	; (8003628 <LL_RTC_EnterInitMode+0x4c>)
 80035f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
  ErrorStatus status = SUCCESS;
 80035f8:	2201      	movs	r2, #1
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 80035fa:	9c01      	ldr	r4, [sp, #4]
 80035fc:	b104      	cbz	r4, 8003600 <LL_RTC_EnterInitMode+0x24>
 80035fe:	b113      	cbz	r3, 8003606 <LL_RTC_EnterInitMode+0x2a>
        status = ERROR;
      }
    }
  }
  return status;
}
 8003600:	4610      	mov	r0, r2
 8003602:	b002      	add	sp, #8
 8003604:	bd10      	pop	{r4, pc}
 8003606:	680b      	ldr	r3, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8003608:	03db      	lsls	r3, r3, #15
        timeout --;
 800360a:	bf42      	ittt	mi
 800360c:	9b01      	ldrmi	r3, [sp, #4]
 800360e:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8003612:	9301      	strmi	r3, [sp, #4]
 8003614:	68c3      	ldr	r3, [r0, #12]
      if (timeout == 0U)
 8003616:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 8003618:	2c00      	cmp	r4, #0
 800361a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800361e:	bf08      	it	eq
 8003620:	2200      	moveq	r2, #0
 8003622:	e7ea      	b.n	80035fa <LL_RTC_EnterInitMode+0x1e>
  ErrorStatus status = SUCCESS;
 8003624:	2201      	movs	r2, #1
 8003626:	e7eb      	b.n	8003600 <LL_RTC_EnterInitMode+0x24>
 8003628:	e000e010 	.word	0xe000e010

0800362c <LL_RTC_Init>:
{
 800362c:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800362e:	23ca      	movs	r3, #202	; 0xca
 8003630:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8003632:	2353      	movs	r3, #83	; 0x53
 8003634:	6243      	str	r3, [r0, #36]	; 0x24
 8003636:	4604      	mov	r4, r0
 8003638:	460d      	mov	r5, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800363a:	f7ff ffcf 	bl	80035dc <LL_RTC_EnterInitMode>
 800363e:	b1c0      	cbz	r0, 8003672 <LL_RTC_Init+0x46>
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8003640:	68a3      	ldr	r3, [r4, #8]
 8003642:	682a      	ldr	r2, [r5, #0]
 8003644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003648:	4313      	orrs	r3, r2
 800364a:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 800364c:	6923      	ldr	r3, [r4, #16]
 800364e:	68aa      	ldr	r2, [r5, #8]
 8003650:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003654:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003658:	4313      	orrs	r3, r2
 800365a:	6123      	str	r3, [r4, #16]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 800365c:	6923      	ldr	r3, [r4, #16]
 800365e:	686a      	ldr	r2, [r5, #4]
 8003660:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003664:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003668:	6123      	str	r3, [r4, #16]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 800366a:	f06f 0380 	mvn.w	r3, #128	; 0x80
 800366e:	60e3      	str	r3, [r4, #12]
    status = SUCCESS;
 8003670:	2001      	movs	r0, #1
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8003672:	23ff      	movs	r3, #255	; 0xff
 8003674:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003676:	bd38      	pop	{r3, r4, r5, pc}

08003678 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8003678:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 800367a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800367e:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8003680:	68c3      	ldr	r3, [r0, #12]
 8003682:	491e      	ldr	r1, [pc, #120]	; (80036fc <LL_RTC_WaitForSynchro+0x84>)
 8003684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003688:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 800368c:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 800368e:	68c2      	ldr	r2, [r0, #12]
  ErrorStatus status = SUCCESS;
 8003690:	2301      	movs	r3, #1
 8003692:	f3c2 1240 	ubfx	r2, r2, #5, #1
  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
  while ((timeout != 0U) && (tmp != 0U))
 8003696:	9c01      	ldr	r4, [sp, #4]
 8003698:	b91c      	cbnz	r4, 80036a2 <LL_RTC_WaitForSynchro+0x2a>
    {
      status = ERROR;
    }
  }

  if (status != ERROR)
 800369a:	b99b      	cbnz	r3, 80036c4 <LL_RTC_WaitForSynchro+0x4c>
      }
    }
  }

  return (status);
}
 800369c:	4618      	mov	r0, r3
 800369e:	b002      	add	sp, #8
 80036a0:	bd10      	pop	{r4, pc}
  while ((timeout != 0U) && (tmp != 0U))
 80036a2:	2a00      	cmp	r2, #0
 80036a4:	d0f9      	beq.n	800369a <LL_RTC_WaitForSynchro+0x22>
 80036a6:	680a      	ldr	r2, [r1, #0]
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80036a8:	03d4      	lsls	r4, r2, #15
      timeout--;
 80036aa:	bf42      	ittt	mi
 80036ac:	9a01      	ldrmi	r2, [sp, #4]
 80036ae:	f102 32ff 	addmi.w	r2, r2, #4294967295	; 0xffffffff
 80036b2:	9201      	strmi	r2, [sp, #4]
 80036b4:	68c2      	ldr	r2, [r0, #12]
    if (timeout == 0U)
 80036b6:	9c01      	ldr	r4, [sp, #4]
      status = ERROR;
 80036b8:	2c00      	cmp	r4, #0
 80036ba:	f3c2 1240 	ubfx	r2, r2, #5, #1
 80036be:	bf08      	it	eq
 80036c0:	2300      	moveq	r3, #0
 80036c2:	e7e8      	b.n	8003696 <LL_RTC_WaitForSynchro+0x1e>
    timeout = RTC_SYNCHRO_TIMEOUT;
 80036c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036c8:	9201      	str	r2, [sp, #4]
 80036ca:	68c2      	ldr	r2, [r0, #12]
 80036cc:	490b      	ldr	r1, [pc, #44]	; (80036fc <LL_RTC_WaitForSynchro+0x84>)
 80036ce:	f3c2 1240 	ubfx	r2, r2, #5, #1
    while ((timeout != 0U) && (tmp != 1U))
 80036d2:	9c01      	ldr	r4, [sp, #4]
 80036d4:	2c00      	cmp	r4, #0
 80036d6:	d0e1      	beq.n	800369c <LL_RTC_WaitForSynchro+0x24>
 80036d8:	2a00      	cmp	r2, #0
 80036da:	d1df      	bne.n	800369c <LL_RTC_WaitForSynchro+0x24>
 80036dc:	680a      	ldr	r2, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80036de:	03d2      	lsls	r2, r2, #15
        timeout--;
 80036e0:	bf42      	ittt	mi
 80036e2:	9a01      	ldrmi	r2, [sp, #4]
 80036e4:	f102 32ff 	addmi.w	r2, r2, #4294967295	; 0xffffffff
 80036e8:	9201      	strmi	r2, [sp, #4]
 80036ea:	68c2      	ldr	r2, [r0, #12]
      if (timeout == 0U)
 80036ec:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 80036ee:	2c00      	cmp	r4, #0
 80036f0:	f3c2 1240 	ubfx	r2, r2, #5, #1
 80036f4:	bf08      	it	eq
 80036f6:	2300      	moveq	r3, #0
 80036f8:	e7eb      	b.n	80036d2 <LL_RTC_WaitForSynchro+0x5a>
 80036fa:	bf00      	nop
 80036fc:	e000e010 	.word	0xe000e010

08003700 <LL_RTC_DeInit>:
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8003700:	23ca      	movs	r3, #202	; 0xca
{
 8003702:	b510      	push	{r4, lr}
 8003704:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8003706:	2353      	movs	r3, #83	; 0x53
 8003708:	6243      	str	r3, [r0, #36]	; 0x24
 800370a:	4604      	mov	r4, r0
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800370c:	f7ff ff66 	bl	80035dc <LL_RTC_EnterInitMode>
 8003710:	b1c8      	cbz	r0, 8003746 <LL_RTC_DeInit+0x46>
    LL_RTC_WriteReg(RTCx, TR, 0x00000000U);
 8003712:	2300      	movs	r3, #0
    LL_RTC_WriteReg(RTCx, WUTR, RTC_WUTR_WUT);
 8003714:	f64f 72ff 	movw	r2, #65535	; 0xffff
    LL_RTC_WriteReg(RTCx, TR, 0x00000000U);
 8003718:	6023      	str	r3, [r4, #0]
    LL_RTC_WriteReg(RTCx, WUTR, RTC_WUTR_WUT);
 800371a:	6162      	str	r2, [r4, #20]
    LL_RTC_WriteReg(RTCx, DR, (RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 800371c:	f242 1201 	movw	r2, #8449	; 0x2101
 8003720:	6062      	str	r2, [r4, #4]
    LL_RTC_WriteReg(RTCx, CR, (LL_RTC_ReadReg(RTCx, CR) & RTC_CR_WUCKSEL));
 8003722:	68a2      	ldr	r2, [r4, #8]
 8003724:	f002 0207 	and.w	r2, r2, #7
 8003728:	60a2      	str	r2, [r4, #8]
    LL_RTC_WriteReg(RTCx, PRER,     (RTC_PRER_PREDIV_A | RTC_SYNCH_PRESC_DEFAULT));
 800372a:	4a08      	ldr	r2, [pc, #32]	; (800374c <LL_RTC_DeInit+0x4c>)
 800372c:	6122      	str	r2, [r4, #16]
    status = LL_RTC_WaitForSynchro(RTCx);
 800372e:	4620      	mov	r0, r4
    LL_RTC_WriteReg(RTCx, ALRMAR,   0x00000000U);
 8003730:	61e3      	str	r3, [r4, #28]
    LL_RTC_WriteReg(RTCx, ALRMBR,   0x00000000U);
 8003732:	6223      	str	r3, [r4, #32]
    LL_RTC_WriteReg(RTCx, SHIFTR,   0x00000000U);
 8003734:	62e3      	str	r3, [r4, #44]	; 0x2c
    LL_RTC_WriteReg(RTCx, CALR,     0x00000000U);
 8003736:	63e3      	str	r3, [r4, #60]	; 0x3c
    LL_RTC_WriteReg(RTCx, ALRMASSR, 0x00000000U);
 8003738:	6463      	str	r3, [r4, #68]	; 0x44
    LL_RTC_WriteReg(RTCx, ALRMBSSR, 0x00000000U);
 800373a:	64a3      	str	r3, [r4, #72]	; 0x48
    LL_RTC_WriteReg(RTCx, ISR,      0x00000000U);
 800373c:	60e3      	str	r3, [r4, #12]
    LL_RTC_WriteReg(RTCx, TAMPCR, 0x00000000U);
 800373e:	6423      	str	r3, [r4, #64]	; 0x40
    LL_RTC_WriteReg(RTCx, OR, 0x00000000U);
 8003740:	64e3      	str	r3, [r4, #76]	; 0x4c
    status = LL_RTC_WaitForSynchro(RTCx);
 8003742:	f7ff ff99 	bl	8003678 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8003746:	23ff      	movs	r3, #255	; 0xff
 8003748:	6263      	str	r3, [r4, #36]	; 0x24
}
 800374a:	bd10      	pop	{r4, pc}
 800374c:	007f00ff 	.word	0x007f00ff

08003750 <LL_RTC_TIME_Init>:
{
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8003752:	6883      	ldr	r3, [r0, #8]
 8003754:	4615      	mov	r5, r2
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8003756:	065a      	lsls	r2, r3, #25
      RTC_TimeStruct->TimeFormat = 0x00U;
 8003758:	bf5c      	itt	pl
 800375a:	2300      	movpl	r3, #0
 800375c:	602b      	strpl	r3, [r5, #0]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800375e:	23ca      	movs	r3, #202	; 0xca
 8003760:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8003762:	2353      	movs	r3, #83	; 0x53
 8003764:	6243      	str	r3, [r0, #36]	; 0x24
{
 8003766:	4604      	mov	r4, r0
  if (RTC_Format == LL_RTC_FORMAT_BIN)
 8003768:	460f      	mov	r7, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800376a:	f7ff ff37 	bl	80035dc <LL_RTC_EnterInitMode>
 800376e:	b1d0      	cbz	r0, 80037a6 <LL_RTC_TIME_Init+0x56>
 8003770:	79ab      	ldrb	r3, [r5, #6]
 8003772:	682e      	ldr	r6, [r5, #0]
 8003774:	7968      	ldrb	r0, [r5, #5]
 8003776:	792d      	ldrb	r5, [r5, #4]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8003778:	b1c7      	cbz	r7, 80037ac <LL_RTC_TIME_Init+0x5c>
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 800377a:	6822      	ldr	r2, [r4, #0]
 800377c:	4333      	orrs	r3, r6
 800377e:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 8003782:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003786:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800378a:	4313      	orrs	r3, r2
 800378c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003790:	6023      	str	r3, [r4, #0]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8003792:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <LL_RTC_TIME_Init+0xa4>)
 8003794:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003798:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 800379a:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 800379c:	069b      	lsls	r3, r3, #26
 800379e:	d427      	bmi.n	80037f0 <LL_RTC_TIME_Init+0xa0>
      status = LL_RTC_WaitForSynchro(RTCx);
 80037a0:	4620      	mov	r0, r4
 80037a2:	f7ff ff69 	bl	8003678 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80037a6:	23ff      	movs	r3, #255	; 0xff
 80037a8:	6263      	str	r3, [r4, #36]	; 0x24
}
 80037aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 80037ac:	6821      	ldr	r1, [r4, #0]
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 80037ae:	220a      	movs	r2, #10
 80037b0:	f021 117f 	bic.w	r1, r1, #8323199	; 0x7f007f
 80037b4:	fbb3 f7f2 	udiv	r7, r3, r2
 80037b8:	fb02 3317 	mls	r3, r2, r7, r3
 80037bc:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 80037c0:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
 80037c4:	4331      	orrs	r1, r6
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	430b      	orrs	r3, r1
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 80037ca:	fbb0 f1f2 	udiv	r1, r0, r2
 80037ce:	fb02 0011 	mls	r0, r2, r1, r0
 80037d2:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 80037d6:	fbb5 f1f2 	udiv	r1, r5, r2
 80037da:	fb02 5211 	mls	r2, r2, r1, r5
 80037de:	b2c0      	uxtb	r0, r0
 80037e0:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80037e4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80037ee:	e7cf      	b.n	8003790 <LL_RTC_TIME_Init+0x40>
      status = SUCCESS;
 80037f0:	2001      	movs	r0, #1
 80037f2:	e7d8      	b.n	80037a6 <LL_RTC_TIME_Init+0x56>
 80037f4:	40002800 	.word	0x40002800

080037f8 <LL_RTC_DATE_Init>:
{
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fa:	4604      	mov	r4, r0
 80037fc:	4615      	mov	r5, r2
  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 80037fe:	460f      	mov	r7, r1
 8003800:	b931      	cbnz	r1, 8003810 <LL_RTC_DATE_Init+0x18>
 8003802:	7853      	ldrb	r3, [r2, #1]
 8003804:	06da      	lsls	r2, r3, #27
    RTC_DateStruct->Month = (uint8_t)((RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU);
 8003806:	bf42      	ittt	mi
 8003808:	f023 0310 	bicmi.w	r3, r3, #16
 800380c:	330a      	addmi	r3, #10
 800380e:	706b      	strbmi	r3, [r5, #1]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8003810:	23ca      	movs	r3, #202	; 0xca
 8003812:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8003814:	2353      	movs	r3, #83	; 0x53
 8003816:	6263      	str	r3, [r4, #36]	; 0x24
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8003818:	4620      	mov	r0, r4
 800381a:	f7ff fedf 	bl	80035dc <LL_RTC_EnterInitMode>
 800381e:	b1c8      	cbz	r0, 8003854 <LL_RTC_DATE_Init+0x5c>
 8003820:	7868      	ldrb	r0, [r5, #1]
 8003822:	78ab      	ldrb	r3, [r5, #2]
 8003824:	782e      	ldrb	r6, [r5, #0]
 8003826:	78ed      	ldrb	r5, [r5, #3]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8003828:	b1bf      	cbz	r7, 800385a <LL_RTC_DATE_Init+0x62>
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 800382a:	6861      	ldr	r1, [r4, #4]
 800382c:	4a1c      	ldr	r2, [pc, #112]	; (80038a0 <LL_RTC_DATE_Init+0xa8>)
 800382e:	400a      	ands	r2, r1
 8003830:	4313      	orrs	r3, r2
 8003832:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
 8003836:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800383a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800383e:	6063      	str	r3, [r4, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8003840:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <LL_RTC_DATE_Init+0xac>)
 8003842:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003846:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8003848:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 800384a:	069b      	lsls	r3, r3, #26
 800384c:	d426      	bmi.n	800389c <LL_RTC_DATE_Init+0xa4>
      status = LL_RTC_WaitForSynchro(RTCx);
 800384e:	4620      	mov	r0, r4
 8003850:	f7ff ff12 	bl	8003678 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8003854:	23ff      	movs	r3, #255	; 0xff
 8003856:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800385a:	220a      	movs	r2, #10
 800385c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003860:	fb02 3311 	mls	r3, r2, r1, r3
 8003864:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8003868:	6867      	ldr	r7, [r4, #4]
 800386a:	490d      	ldr	r1, [pc, #52]	; (80038a0 <LL_RTC_DATE_Init+0xa8>)
 800386c:	4039      	ands	r1, r7
 800386e:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
 8003872:	b2db      	uxtb	r3, r3
 8003874:	430b      	orrs	r3, r1
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8003876:	fbb0 f1f2 	udiv	r1, r0, r2
 800387a:	fb02 0011 	mls	r0, r2, r1, r0
 800387e:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8003882:	fbb5 f1f2 	udiv	r1, r5, r2
 8003886:	fb02 5211 	mls	r2, r2, r1, r5
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800388a:	b2c0      	uxtb	r0, r0
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 800388c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8003890:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800389a:	e7d0      	b.n	800383e <LL_RTC_DATE_Init+0x46>
      status = SUCCESS;
 800389c:	2001      	movs	r0, #1
 800389e:	e7d9      	b.n	8003854 <LL_RTC_DATE_Init+0x5c>
 80038a0:	ff0000c0 	.word	0xff0000c0
 80038a4:	40002800 	.word	0x40002800

080038a8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80038a8:	4a03      	ldr	r2, [pc, #12]	; (80038b8 <LL_RCC_SetAHBPrescaler+0x10>)
 80038aa:	6893      	ldr	r3, [r2, #8]
 80038ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038b0:	4318      	orrs	r0, r3
 80038b2:	6090      	str	r0, [r2, #8]
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000

080038bc <UTILS_GetPLLOutputFrequency>:
  assert_param(IS_LL_UTILS_PLLN_VALUE(UTILS_PLLInitStruct->PLLN));
  assert_param(IS_LL_UTILS_PLLR_VALUE(UTILS_PLLInitStruct->PLLR));

  /* Check different PLL parameters according to RM                          */
  /*  - PLLM: ensure that the VCO input frequency ranges from 4 to 16 MHz.   */
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80038bc:	680b      	ldr	r3, [r1, #0]
 80038be:	091b      	lsrs	r3, r3, #4
 80038c0:	3301      	adds	r3, #1
 80038c2:	fbb0 f3f3 	udiv	r3, r0, r3
  assert_param(IS_LL_UTILS_PLLVCO_INPUT(pllfreq));

  /*  - PLLN: ensure that the VCO output frequency is between 64 and 344 MHz.*/
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80038c6:	6848      	ldr	r0, [r1, #4]
 80038c8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80038cc:	4343      	muls	r3, r0
  assert_param(IS_LL_UTILS_PLLVCO_OUTPUT(pllfreq));

  /*  - PLLR: ensure that max frequency at 120000000 Hz is reached                   */
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 80038ce:	6888      	ldr	r0, [r1, #8]
 80038d0:	0e40      	lsrs	r0, r0, #25
 80038d2:	3001      	adds	r0, #1
 80038d4:	0040      	lsls	r0, r0, #1
  assert_param(IS_LL_UTILS_PLL_FREQUENCY(pllfreq));

  return pllfreq;
}
 80038d6:	fbb3 f0f0 	udiv	r0, r3, r0
 80038da:	4770      	bx	lr

080038dc <UTILS_SetFlashLatency.part.0>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 80038dc:	4b18      	ldr	r3, [pc, #96]	; (8003940 <UTILS_SetFlashLatency.part.0+0x64>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 80038e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e8:	d11d      	bne.n	8003926 <UTILS_SetFlashLatency.part.0+0x4a>
      if(HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ)
 80038ea:	4b16      	ldr	r3, [pc, #88]	; (8003944 <UTILS_SetFlashLatency.part.0+0x68>)
 80038ec:	4298      	cmp	r0, r3
 80038ee:	d81f      	bhi.n	8003930 <UTILS_SetFlashLatency.part.0+0x54>
      else if(HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ)
 80038f0:	4b15      	ldr	r3, [pc, #84]	; (8003948 <UTILS_SetFlashLatency.part.0+0x6c>)
 80038f2:	4298      	cmp	r0, r3
 80038f4:	d81e      	bhi.n	8003934 <UTILS_SetFlashLatency.part.0+0x58>
      else if(HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)
 80038f6:	4b15      	ldr	r3, [pc, #84]	; (800394c <UTILS_SetFlashLatency.part.0+0x70>)
 80038f8:	4298      	cmp	r0, r3
 80038fa:	d81d      	bhi.n	8003938 <UTILS_SetFlashLatency.part.0+0x5c>
      else if(HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)
 80038fc:	4b14      	ldr	r3, [pc, #80]	; (8003950 <UTILS_SetFlashLatency.part.0+0x74>)
 80038fe:	4298      	cmp	r0, r3
 8003900:	d81c      	bhi.n	800393c <UTILS_SetFlashLatency.part.0+0x60>
        if(HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)
 8003902:	4b14      	ldr	r3, [pc, #80]	; (8003954 <UTILS_SetFlashLatency.part.0+0x78>)
        if(HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)
 8003904:	4298      	cmp	r0, r3
 8003906:	bf94      	ite	ls
 8003908:	2000      	movls	r0, #0
 800390a:	2001      	movhi	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800390c:	4a12      	ldr	r2, [pc, #72]	; (8003958 <UTILS_SetFlashLatency.part.0+0x7c>)
 800390e:	6813      	ldr	r3, [r2, #0]
 8003910:	f023 030f 	bic.w	r3, r3, #15
 8003914:	4303      	orrs	r3, r0
 8003916:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003918:	6813      	ldr	r3, [r2, #0]
 800391a:	f003 030f 	and.w	r3, r3, #15
}
 800391e:	1a1b      	subs	r3, r3, r0
 8003920:	4258      	negs	r0, r3
 8003922:	4158      	adcs	r0, r3
 8003924:	4770      	bx	lr
      if(HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)
 8003926:	4b0d      	ldr	r3, [pc, #52]	; (800395c <UTILS_SetFlashLatency.part.0+0x80>)
 8003928:	4298      	cmp	r0, r3
 800392a:	d807      	bhi.n	800393c <UTILS_SetFlashLatency.part.0+0x60>
        if(HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)
 800392c:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <UTILS_SetFlashLatency.part.0+0x84>)
 800392e:	e7e9      	b.n	8003904 <UTILS_SetFlashLatency.part.0+0x28>
        latency = LL_FLASH_LATENCY_5;
 8003930:	2005      	movs	r0, #5
 8003932:	e7eb      	b.n	800390c <UTILS_SetFlashLatency.part.0+0x30>
        latency = LL_FLASH_LATENCY_4;
 8003934:	2004      	movs	r0, #4
 8003936:	e7e9      	b.n	800390c <UTILS_SetFlashLatency.part.0+0x30>
        latency = LL_FLASH_LATENCY_3;
 8003938:	2003      	movs	r0, #3
 800393a:	e7e7      	b.n	800390c <UTILS_SetFlashLatency.part.0+0x30>
        latency = LL_FLASH_LATENCY_2;
 800393c:	2002      	movs	r0, #2
 800393e:	e7e5      	b.n	800390c <UTILS_SetFlashLatency.part.0+0x30>
 8003940:	40007000 	.word	0x40007000
 8003944:	05f5e100 	.word	0x05f5e100
 8003948:	04c4b400 	.word	0x04c4b400
 800394c:	03938700 	.word	0x03938700
 8003950:	02625a00 	.word	0x02625a00
 8003954:	01312d00 	.word	0x01312d00
 8003958:	40022000 	.word	0x40022000
 800395c:	00f42400 	.word	0x00f42400
 8003960:	007a1200 	.word	0x007a1200

08003964 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8003964:	4b07      	ldr	r3, [pc, #28]	; (8003984 <UTILS_PLL_IsBusy+0x20>)
 8003966:	6818      	ldr	r0, [r3, #0]
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8003968:	681a      	ldr	r2, [r3, #0]
  * @rmtoll CR           PLLSAI2RDY    LL_RCC_PLLSAI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI2_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RCC_CR_PLLSAI2RDY) ? 1UL : 0UL);
 800396a:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 800396c:	0112      	lsls	r2, r2, #4
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800396e:	bf56      	itet	pl
 8003970:	f080 7000 	eorpl.w	r0, r0, #33554432	; 0x2000000
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8003974:	2000      	movmi	r0, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8003976:	f3c0 6040 	ubfxpl	r0, r0, #25, #1
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RCC_CR_PLLSAI2RDY) ? 1UL : 0UL);
 800397a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800397e:	bf18      	it	ne
 8003980:	2000      	movne	r0, #0
    status = ERROR;
  }
#endif /*RCC_PLLSAI2_SUPPORT*/

  return status;
}
 8003982:	4770      	bx	lr
 8003984:	40021000 	.word	0x40021000

08003988 <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8003988:	680b      	ldr	r3, [r1, #0]
 800398a:	4a22      	ldr	r2, [pc, #136]	; (8003a14 <UTILS_EnablePLLAndSwitchSystem+0x8c>)
 800398c:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8003990:	b570      	push	{r4, r5, r6, lr}

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8003992:	4d21      	ldr	r5, [pc, #132]	; (8003a18 <UTILS_EnablePLLAndSwitchSystem+0x90>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8003994:	5cd6      	ldrb	r6, [r2, r3]
  if(SystemCoreClock < hclk_frequency)
 8003996:	682b      	ldr	r3, [r5, #0]
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8003998:	fa20 f606 	lsr.w	r6, r0, r6
  if(SystemCoreClock < hclk_frequency)
 800399c:	429e      	cmp	r6, r3
 800399e:	d825      	bhi.n	80039ec <UTILS_EnablePLLAndSwitchSystem+0x64>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80039a0:	4c1e      	ldr	r4, [pc, #120]	; (8003a1c <UTILS_EnablePLLAndSwitchSystem+0x94>)
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039a8:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80039aa:	68e3      	ldr	r3, [r4, #12]
 80039ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039b0:	60e3      	str	r3, [r4, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	019b      	lsls	r3, r3, #6
 80039b6:	d5fc      	bpl.n	80039b2 <UTILS_EnablePLLAndSwitchSystem+0x2a>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 80039b8:	6808      	ldr	r0, [r1, #0]
 80039ba:	f7ff ff75 	bl	80038a8 <LL_RCC_SetAHBPrescaler>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80039be:	68a3      	ldr	r3, [r4, #8]
 80039c0:	f043 0303 	orr.w	r3, r3, #3
 80039c4:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80039c6:	68a3      	ldr	r3, [r4, #8]
 80039c8:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80039cc:	2b0c      	cmp	r3, #12
 80039ce:	d1fa      	bne.n	80039c6 <UTILS_EnablePLLAndSwitchSystem+0x3e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80039d0:	68a3      	ldr	r3, [r4, #8]
 80039d2:	684a      	ldr	r2, [r1, #4]
 80039d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80039d8:	4313      	orrs	r3, r2
 80039da:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80039dc:	68a3      	ldr	r3, [r4, #8]
 80039de:	688a      	ldr	r2, [r1, #8]
 80039e0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60a3      	str	r3, [r4, #8]
 80039e8:	2001      	movs	r0, #1
 80039ea:	e005      	b.n	80039f8 <UTILS_EnablePLLAndSwitchSystem+0x70>
    status = ERROR;
 80039ec:	4630      	mov	r0, r6
  if(HCLK_Frequency == 0U)
 80039ee:	b11e      	cbz	r6, 80039f8 <UTILS_EnablePLLAndSwitchSystem+0x70>
 80039f0:	f7ff ff74 	bl	80038dc <UTILS_SetFlashLatency.part.0>
  if(status == SUCCESS)
 80039f4:	2801      	cmp	r0, #1
 80039f6:	d0d3      	beq.n	80039a0 <UTILS_EnablePLLAndSwitchSystem+0x18>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 80039f8:	682b      	ldr	r3, [r5, #0]
 80039fa:	429e      	cmp	r6, r3
 80039fc:	d203      	bcs.n	8003a06 <UTILS_EnablePLLAndSwitchSystem+0x7e>
    status = ERROR;
 80039fe:	4630      	mov	r0, r6
  if(HCLK_Frequency == 0U)
 8003a00:	b12e      	cbz	r6, 8003a0e <UTILS_EnablePLLAndSwitchSystem+0x86>
 8003a02:	f7ff ff6b 	bl	80038dc <UTILS_SetFlashLatency.part.0>
    /* Set FLASH latency to lowest latency */
    status = UTILS_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8003a06:	2801      	cmp	r0, #1
 8003a08:	d102      	bne.n	8003a10 <UTILS_EnablePLLAndSwitchSystem+0x88>
  SystemCoreClock = HCLKFrequency;
 8003a0a:	602e      	str	r6, [r5, #0]
 8003a0c:	bd70      	pop	{r4, r5, r6, pc}
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
 8003a0e:	bd70      	pop	{r4, r5, r6, pc}
}
 8003a10:	bd70      	pop	{r4, r5, r6, pc}
 8003a12:	bf00      	nop
 8003a14:	0800621c 	.word	0x0800621c
 8003a18:	2000146c 	.word	0x2000146c
 8003a1c:	40021000 	.word	0x40021000

08003a20 <LL_PLL_ConfigSystemClock_HSI>:
{
 8003a20:	b538      	push	{r3, r4, r5, lr}
 8003a22:	4605      	mov	r5, r0
 8003a24:	460c      	mov	r4, r1
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8003a26:	f7ff ff9d 	bl	8003964 <UTILS_PLL_IsBusy>
 8003a2a:	2801      	cmp	r0, #1
 8003a2c:	d12b      	bne.n	8003a86 <LL_PLL_ConfigSystemClock_HSI+0x66>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 8003a2e:	4629      	mov	r1, r5
 8003a30:	481a      	ldr	r0, [pc, #104]	; (8003a9c <LL_PLL_ConfigSystemClock_HSI+0x7c>)
 8003a32:	f7ff ff43 	bl	80038bc <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8003a36:	4a1a      	ldr	r2, [pc, #104]	; (8003aa0 <LL_PLL_ConfigSystemClock_HSI+0x80>)
 8003a38:	6813      	ldr	r3, [r2, #0]
 8003a3a:	0559      	lsls	r1, r3, #21
 8003a3c:	d525      	bpl.n	8003a8a <LL_PLL_ConfigSystemClock_HSI+0x6a>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8003a3e:	68d1      	ldr	r1, [r2, #12]
 8003a40:	4b18      	ldr	r3, [pc, #96]	; (8003aa4 <LL_PLL_ConfigSystemClock_HSI+0x84>)
 8003a42:	400b      	ands	r3, r1
 8003a44:	6829      	ldr	r1, [r5, #0]
 8003a46:	f043 0302 	orr.w	r3, r3, #2
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	68a9      	ldr	r1, [r5, #8]
 8003a4e:	430b      	orrs	r3, r1
 8003a50:	6869      	ldr	r1, [r5, #4]
 8003a52:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003a56:	60d3      	str	r3, [r2, #12]
    if(pllfreq > 80000000U)
 8003a58:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <LL_PLL_ConfigSystemClock_HSI+0x88>)
 8003a5a:	4298      	cmp	r0, r3
 8003a5c:	d80d      	bhi.n	8003a7a <LL_PLL_ConfigSystemClock_HSI+0x5a>
  uint32_t hpre = 0U;  /* Set default value */
 8003a5e:	2500      	movs	r5, #0
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8003a60:	4621      	mov	r1, r4
 8003a62:	f7ff ff91 	bl	8003988 <UTILS_EnablePLLAndSwitchSystem>
    if((status == SUCCESS) && (hpre != 0U))
 8003a66:	2801      	cmp	r0, #1
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8003a68:	4601      	mov	r1, r0
    if((status == SUCCESS) && (hpre != 0U))
 8003a6a:	d104      	bne.n	8003a76 <LL_PLL_ConfigSystemClock_HSI+0x56>
 8003a6c:	b11d      	cbz	r5, 8003a76 <LL_PLL_ConfigSystemClock_HSI+0x56>
      UTILS_ClkInitStruct->AHBCLKDivider = LL_RCC_SYSCLK_DIV_1;
 8003a6e:	2000      	movs	r0, #0
 8003a70:	6020      	str	r0, [r4, #0]
      LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 8003a72:	f7ff ff19 	bl	80038a8 <LL_RCC_SetAHBPrescaler>
}
 8003a76:	4608      	mov	r0, r1
 8003a78:	bd38      	pop	{r3, r4, r5, pc}
      hpre = UTILS_ClkInitStruct->AHBCLKDivider;
 8003a7a:	6825      	ldr	r5, [r4, #0]
      if(hpre == LL_RCC_SYSCLK_DIV_1)
 8003a7c:	2d00      	cmp	r5, #0
 8003a7e:	d1ef      	bne.n	8003a60 <LL_PLL_ConfigSystemClock_HSI+0x40>
        UTILS_ClkInitStruct->AHBCLKDivider = LL_RCC_SYSCLK_DIV_2;
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	6023      	str	r3, [r4, #0]
 8003a84:	e7ec      	b.n	8003a60 <LL_PLL_ConfigSystemClock_HSI+0x40>
    status = ERROR;
 8003a86:	2100      	movs	r1, #0
  return status;
 8003a88:	e7f5      	b.n	8003a76 <LL_PLL_ConfigSystemClock_HSI+0x56>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003a8a:	6813      	ldr	r3, [r2, #0]
 8003a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a90:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8003a92:	6813      	ldr	r3, [r2, #0]
 8003a94:	055b      	lsls	r3, r3, #21
 8003a96:	d5fc      	bpl.n	8003a92 <LL_PLL_ConfigSystemClock_HSI+0x72>
 8003a98:	e7d1      	b.n	8003a3e <LL_PLL_ConfigSystemClock_HSI+0x1e>
 8003a9a:	bf00      	nop
 8003a9c:	00f42400 	.word	0x00f42400
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	f9ff800c 	.word	0xf9ff800c
 8003aa8:	04c4b400 	.word	0x04c4b400

08003aac <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8003aac:	280a      	cmp	r0, #10
{
 8003aae:	b538      	push	{r3, r4, r5, lr}
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	4d07      	ldr	r5, [pc, #28]	; (8003ad0 <console_out+0x24>)
	if ('\n' == c) {
 8003ab4:	d104      	bne.n	8003ac0 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 8003ab6:	6828      	ldr	r0, [r5, #0]
 8003ab8:	6843      	ldr	r3, [r0, #4]
 8003aba:	210d      	movs	r1, #13
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
 8003ac0:	6828      	ldr	r0, [r5, #0]
 8003ac2:	6843      	ldr	r3, [r0, #4]
 8003ac4:	b2e1      	uxtb	r1, r4
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	4798      	blx	r3

	return c;
}
 8003aca:	4620      	mov	r0, r4
 8003acc:	bd38      	pop	{r3, r4, r5, pc}
 8003ace:	bf00      	nop
 8003ad0:	20000034 	.word	0x20000034

08003ad4 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
 8003ad4:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
 8003ad6:	4c04      	ldr	r4, [pc, #16]	; (8003ae8 <uart_console_hook_install+0x14>)
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f000 fdd9 	bl	8004690 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8003ade:	4620      	mov	r0, r4
}
 8003ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
 8003ae4:	f7ff bada 	b.w	800309c <__printk_hook_install>
 8003ae8:	08003aad 	.word	0x08003aad

08003aec <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
 8003aec:	b508      	push	{r3, lr}
 8003aee:	4804      	ldr	r0, [pc, #16]	; (8003b00 <uart_console_init+0x14>)
 8003af0:	f001 fa24 	bl	8004f3c <_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8003af4:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <uart_console_init+0x18>)
 8003af6:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
 8003af8:	f7ff ffec 	bl	8003ad4 <uart_console_hook_install>

	return 0;
}
 8003afc:	2000      	movs	r0, #0
 8003afe:	bd08      	pop	{r3, pc}
 8003b00:	0800622c 	.word	0x0800622c
 8003b04:	20000034 	.word	0x20000034

08003b08 <stm32_exti_init>:
	IRQ_CONNECT(EXTI4_15_IRQn,
		CONFIG_EXTI_STM32_EXTI15_4_IRQ_PRI,
		__stm32_exti_isr_4_15, DEVICE_GET(exti_stm32),
		0);
#elif defined(CONFIG_SOC_SERIES_STM32L4X)
	IRQ_CONNECT(EXTI0_IRQn,
 8003b08:	2200      	movs	r2, #0
{
 8003b0a:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	2006      	movs	r0, #6
 8003b10:	f000 fc4c 	bl	80043ac <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8003b14:	2200      	movs	r2, #0
 8003b16:	4611      	mov	r1, r2
 8003b18:	2007      	movs	r0, #7
 8003b1a:	f000 fc47 	bl	80043ac <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI1_IRQ_PRI,
		__stm32_exti_isr_1, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI2_IRQn,
 8003b1e:	2200      	movs	r2, #0
 8003b20:	4611      	mov	r1, r2
 8003b22:	2008      	movs	r0, #8
 8003b24:	f000 fc42 	bl	80043ac <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI3_IRQn,
 8003b28:	2200      	movs	r2, #0
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	2009      	movs	r0, #9
 8003b2e:	f000 fc3d 	bl	80043ac <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8003b32:	2200      	movs	r2, #0
 8003b34:	4611      	mov	r1, r2
 8003b36:	200a      	movs	r0, #10
 8003b38:	f000 fc38 	bl	80043ac <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI9_5_IRQn,
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	4611      	mov	r1, r2
 8003b40:	2017      	movs	r0, #23
 8003b42:	f000 fc33 	bl	80043ac <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8003b46:	2200      	movs	r2, #0
 8003b48:	4611      	mov	r1, r2
 8003b4a:	2028      	movs	r0, #40	; 0x28
 8003b4c:	f000 fc2e 	bl	80043ac <_irq_priority_set>
}
 8003b50:	2000      	movs	r0, #0
 8003b52:	bd08      	pop	{r3, pc}

08003b54 <__stm32_exti_isr>:
{
 8003b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct stm32_exti_data *data = dev->driver_data;
 8003b58:	6895      	ldr	r5, [r2, #8]
	return base;
 8003b5a:	4f11      	ldr	r7, [pc, #68]	; (8003ba0 <__stm32_exti_isr+0x4c>)
		return base + 1;
 8003b5c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8003ba4 <__stm32_exti_isr+0x50>
{
 8003b60:	4604      	mov	r4, r0
 8003b62:	460e      	mov	r6, r1
	return (exti->pr & (1 << line)) ? 1 : 0;
 8003b64:	f04f 0901 	mov.w	r9, #1
	for (line = min; line < max; line++) {
 8003b68:	42b4      	cmp	r4, r6
 8003b6a:	db01      	blt.n	8003b70 <__stm32_exti_isr+0x1c>
}
 8003b6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (*line > 31) {
 8003b70:	2c1f      	cmp	r4, #31
		return base + 1;
 8003b72:	bfcb      	itete	gt
 8003b74:	4642      	movgt	r2, r8
	return base;
 8003b76:	463a      	movle	r2, r7
 8003b78:	f1a4 0320 	subgt.w	r3, r4, #32
	if (*line > 31) {
 8003b7c:	4623      	movle	r3, r4
	return (exti->pr & (1 << line)) ? 1 : 0;
 8003b7e:	6951      	ldr	r1, [r2, #20]
 8003b80:	fa09 f303 	lsl.w	r3, r9, r3
		if (stm32_exti_is_pending(line)) {
 8003b84:	4219      	tst	r1, r3
 8003b86:	d008      	beq.n	8003b9a <__stm32_exti_isr+0x46>
	exti->pr = 1 << line;
 8003b88:	6153      	str	r3, [r2, #20]
			if (!data->cb[line].cb) {
 8003b8a:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8003b8e:	b123      	cbz	r3, 8003b9a <__stm32_exti_isr+0x46>
			data->cb[line].cb(line, data->cb[line].data);
 8003b90:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
 8003b94:	4620      	mov	r0, r4
 8003b96:	6851      	ldr	r1, [r2, #4]
 8003b98:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8003b9a:	3401      	adds	r4, #1
 8003b9c:	e7e4      	b.n	8003b68 <__stm32_exti_isr+0x14>
 8003b9e:	bf00      	nop
 8003ba0:	40010400 	.word	0x40010400
 8003ba4:	40010418 	.word	0x40010418

08003ba8 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 8003ba8:	4602      	mov	r2, r0
 8003baa:	2101      	movs	r1, #1
 8003bac:	2000      	movs	r0, #0
 8003bae:	f7ff bfd1 	b.w	8003b54 <__stm32_exti_isr>

08003bb2 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	2102      	movs	r1, #2
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	f7ff bfcc 	b.w	8003b54 <__stm32_exti_isr>

08003bbc <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	2103      	movs	r1, #3
 8003bc0:	2002      	movs	r0, #2
 8003bc2:	f7ff bfc7 	b.w	8003b54 <__stm32_exti_isr>

08003bc6 <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	2104      	movs	r1, #4
 8003bca:	2003      	movs	r0, #3
 8003bcc:	f7ff bfc2 	b.w	8003b54 <__stm32_exti_isr>

08003bd0 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	2105      	movs	r1, #5
 8003bd4:	2004      	movs	r0, #4
 8003bd6:	f7ff bfbd 	b.w	8003b54 <__stm32_exti_isr>

08003bda <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 8003bda:	4602      	mov	r2, r0
 8003bdc:	210a      	movs	r1, #10
 8003bde:	2005      	movs	r0, #5
 8003be0:	f7ff bfb8 	b.w	8003b54 <__stm32_exti_isr>

08003be4 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 8003be4:	4602      	mov	r2, r0
 8003be6:	2110      	movs	r1, #16
 8003be8:	200a      	movs	r0, #10
 8003bea:	f7ff bfb3 	b.w	8003b54 <__stm32_exti_isr>
	...

08003bf0 <stm32_exti_enable>:
	if (*line > 31) {
 8003bf0:	281f      	cmp	r0, #31
		return base + 1;
 8003bf2:	bfca      	itet	gt
 8003bf4:	4a0c      	ldrgt	r2, [pc, #48]	; (8003c28 <stm32_exti_enable+0x38>)
	return base;
 8003bf6:	4a0d      	ldrle	r2, [pc, #52]	; (8003c2c <stm32_exti_enable+0x3c>)
		*line -= 32;
 8003bf8:	3820      	subgt	r0, #32
	exti->imr |= 1 << line;
 8003bfa:	6811      	ldr	r1, [r2, #0]
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	4083      	lsls	r3, r0
 8003c00:	430b      	orrs	r3, r1
 8003c02:	6013      	str	r3, [r2, #0]
	if (line >= 5 && line <= 9) {
 8003c04:	1f43      	subs	r3, r0, #5
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d908      	bls.n	8003c1c <stm32_exti_enable+0x2c>
	} else if (line >= 10 && line <= 15) {
 8003c0a:	f1a0 030a 	sub.w	r3, r0, #10
 8003c0e:	2b05      	cmp	r3, #5
 8003c10:	d906      	bls.n	8003c20 <stm32_exti_enable+0x30>
	} else if (line < 5) {
 8003c12:	2804      	cmp	r0, #4
 8003c14:	dc06      	bgt.n	8003c24 <stm32_exti_enable+0x34>
		irqnum = EXTI0_IRQn + line;
 8003c16:	3006      	adds	r0, #6
	irq_enable(irqnum);
 8003c18:	f000 bbb8 	b.w	800438c <_arch_irq_enable>
		irqnum = EXTI9_5_IRQn;
 8003c1c:	2017      	movs	r0, #23
 8003c1e:	e7fb      	b.n	8003c18 <stm32_exti_enable+0x28>
		irqnum = EXTI15_10_IRQn;
 8003c20:	2028      	movs	r0, #40	; 0x28
 8003c22:	e7f9      	b.n	8003c18 <stm32_exti_enable+0x28>
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40010418 	.word	0x40010418
 8003c2c:	40010400 	.word	0x40010400

08003c30 <stm32_exti_trigger>:
	if (*line > 31) {
 8003c30:	281f      	cmp	r0, #31
{
 8003c32:	b510      	push	{r4, lr}
		*line -= 32;
 8003c34:	bfc6      	itte	gt
 8003c36:	3820      	subgt	r0, #32
		return base + 1;
 8003c38:	4b08      	ldrgt	r3, [pc, #32]	; (8003c5c <stm32_exti_trigger+0x2c>)
	return base;
 8003c3a:	4b09      	ldrle	r3, [pc, #36]	; (8003c60 <stm32_exti_trigger+0x30>)
	if (trigger & STM32_EXTI_TRIG_RISING) {
 8003c3c:	07cc      	lsls	r4, r1, #31
 8003c3e:	d504      	bpl.n	8003c4a <stm32_exti_trigger+0x1a>
		exti->rtsr |= 1 << line;
 8003c40:	689c      	ldr	r4, [r3, #8]
 8003c42:	2201      	movs	r2, #1
 8003c44:	4082      	lsls	r2, r0
 8003c46:	4322      	orrs	r2, r4
 8003c48:	609a      	str	r2, [r3, #8]
	if (trigger & STM32_EXTI_TRIG_FALLING) {
 8003c4a:	078a      	lsls	r2, r1, #30
 8003c4c:	d505      	bpl.n	8003c5a <stm32_exti_trigger+0x2a>
		exti->ftsr |= 1 << line;
 8003c4e:	68d9      	ldr	r1, [r3, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	fa02 f000 	lsl.w	r0, r2, r0
 8003c56:	4308      	orrs	r0, r1
 8003c58:	60d8      	str	r0, [r3, #12]
 8003c5a:	bd10      	pop	{r4, pc}
 8003c5c:	40010418 	.word	0x40010418
 8003c60:	40010400 	.word	0x40010400

08003c64 <stm32_exti_set_callback>:
{
 8003c64:	4907      	ldr	r1, [pc, #28]	; (8003c84 <stm32_exti_set_callback+0x20>)
 8003c66:	b530      	push	{r4, r5, lr}
 8003c68:	688c      	ldr	r4, [r1, #8]
	if (data->cb[line].cb) {
 8003c6a:	f854 1030 	ldr.w	r1, [r4, r0, lsl #3]
 8003c6e:	eb04 05c0 	add.w	r5, r4, r0, lsl #3
 8003c72:	b921      	cbnz	r1, 8003c7e <stm32_exti_set_callback+0x1a>
	data->cb[line].cb = cb;
 8003c74:	f844 2030 	str.w	r2, [r4, r0, lsl #3]
	data->cb[line].data = arg;
 8003c78:	606b      	str	r3, [r5, #4]
	return 0;
 8003c7a:	4608      	mov	r0, r1
 8003c7c:	bd30      	pop	{r4, r5, pc}
		return -EBUSY;
 8003c7e:	f06f 000f 	mvn.w	r0, #15
}
 8003c82:	bd30      	pop	{r4, r5, pc}
 8003c84:	200014c8 	.word	0x200014c8

08003c88 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8003c88:	680b      	ldr	r3, [r1, #0]
{
 8003c8a:	b086      	sub	sp, #24
	switch (pclken->bus) {
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d838      	bhi.n	8003d02 <stm32_clock_control_on+0x7a>
 8003c90:	e8df f003 	tbb	[pc, r3]
 8003c94:	2d190f03 	.word	0x2d190f03
 8003c98:	23          	.byte	0x23
 8003c99:	00          	.byte	0x00
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003c9a:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <stm32_clock_control_on+0x80>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8003c9c:	684b      	ldr	r3, [r1, #4]
 8003c9e:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003ca0:	4319      	orrs	r1, r3
 8003ca2:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003ca4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003caa:	9b01      	ldr	r3, [sp, #4]
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8003cac:	2000      	movs	r0, #0
}
 8003cae:	b006      	add	sp, #24
 8003cb0:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003cb2:	4a15      	ldr	r2, [pc, #84]	; (8003d08 <stm32_clock_control_on+0x80>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8003cb4:	684b      	ldr	r3, [r1, #4]
 8003cb6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8003cb8:	4319      	orrs	r1, r3
 8003cba:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003cbc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8003cc2:	9b02      	ldr	r3, [sp, #8]
 8003cc4:	e7f2      	b.n	8003cac <stm32_clock_control_on+0x24>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003cc6:	4a10      	ldr	r2, [pc, #64]	; (8003d08 <stm32_clock_control_on+0x80>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8003cc8:	684b      	ldr	r3, [r1, #4]
 8003cca:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8003ccc:	4319      	orrs	r1, r3
 8003cce:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003cd0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8003cd6:	9b03      	ldr	r3, [sp, #12]
 8003cd8:	e7e8      	b.n	8003cac <stm32_clock_control_on+0x24>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003cda:	4a0b      	ldr	r2, [pc, #44]	; (8003d08 <stm32_clock_control_on+0x80>)
		LL_APB1_GRP2_EnableClock(pclken->enr);
 8003cdc:	684b      	ldr	r3, [r1, #4]
 8003cde:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8003ce0:	4319      	orrs	r1, r3
 8003ce2:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003ce4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8003cea:	9b04      	ldr	r3, [sp, #16]
 8003cec:	e7de      	b.n	8003cac <stm32_clock_control_on+0x24>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003cee:	4a06      	ldr	r2, [pc, #24]	; (8003d08 <stm32_clock_control_on+0x80>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8003cf0:	684b      	ldr	r3, [r1, #4]
 8003cf2:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8003cf4:	4319      	orrs	r1, r3
 8003cf6:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003cf8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8003cfe:	9b05      	ldr	r3, [sp, #20]
 8003d00:	e7d4      	b.n	8003cac <stm32_clock_control_on+0x24>
		return -ENOTSUP;
 8003d02:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003d06:	e7d2      	b.n	8003cae <stm32_clock_control_on+0x26>
 8003d08:	40021000 	.word	0x40021000

08003d0c <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8003d0c:	680b      	ldr	r3, [r1, #0]
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d828      	bhi.n	8003d64 <stm32_clock_control_off+0x58>
 8003d12:	e8df f003 	tbb	[pc, r3]
 8003d16:	0b03      	.short	0x0b03
 8003d18:	2012      	.short	0x2012
 8003d1a:	19          	.byte	0x19
 8003d1b:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8003d1c:	4a13      	ldr	r2, [pc, #76]	; (8003d6c <stm32_clock_control_off+0x60>)
 8003d1e:	6849      	ldr	r1, [r1, #4]
 8003d20:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8003d22:	ea23 0301 	bic.w	r3, r3, r1
 8003d26:	6493      	str	r3, [r2, #72]	; 0x48
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8003d28:	2000      	movs	r0, #0
 8003d2a:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8003d2c:	4a0f      	ldr	r2, [pc, #60]	; (8003d6c <stm32_clock_control_off+0x60>)
 8003d2e:	6849      	ldr	r1, [r1, #4]
 8003d30:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003d32:	ea23 0301 	bic.w	r3, r3, r1
 8003d36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d38:	e7f6      	b.n	8003d28 <stm32_clock_control_off+0x1c>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003d3a:	4a0c      	ldr	r2, [pc, #48]	; (8003d6c <stm32_clock_control_off+0x60>)
 8003d3c:	6849      	ldr	r1, [r1, #4]
 8003d3e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003d40:	ea23 0301 	bic.w	r3, r3, r1
 8003d44:	6593      	str	r3, [r2, #88]	; 0x58
 8003d46:	e7ef      	b.n	8003d28 <stm32_clock_control_off+0x1c>
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8003d48:	4a08      	ldr	r2, [pc, #32]	; (8003d6c <stm32_clock_control_off+0x60>)
 8003d4a:	6849      	ldr	r1, [r1, #4]
 8003d4c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8003d4e:	ea23 0301 	bic.w	r3, r3, r1
 8003d52:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003d54:	e7e8      	b.n	8003d28 <stm32_clock_control_off+0x1c>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003d56:	4a05      	ldr	r2, [pc, #20]	; (8003d6c <stm32_clock_control_off+0x60>)
 8003d58:	6849      	ldr	r1, [r1, #4]
 8003d5a:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8003d5c:	ea23 0301 	bic.w	r3, r3, r1
 8003d60:	6613      	str	r3, [r2, #96]	; 0x60
 8003d62:	e7e1      	b.n	8003d28 <stm32_clock_control_off+0x1c>
		return -ENOTSUP;
 8003d64:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000

08003d70 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	u32_t ahb_clock = SystemCoreClock;
 8003d70:	4b07      	ldr	r3, [pc, #28]	; (8003d90 <stm32_clock_control_get_subsys_rate+0x20>)
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8003d72:	6809      	ldr	r1, [r1, #0]
	u32_t ahb_clock = SystemCoreClock;
 8003d74:	681b      	ldr	r3, [r3, #0]
	switch (pclken->bus) {
 8003d76:	2904      	cmp	r1, #4
 8003d78:	d807      	bhi.n	8003d8a <stm32_clock_control_get_subsys_rate+0x1a>
 8003d7a:	e8df f001 	tbb	[pc, r1]
 8003d7e:	0303      	.short	0x0303
 8003d80:	0303      	.short	0x0303
 8003d82:	03          	.byte	0x03
 8003d83:	00          	.byte	0x00
#endif /* CONFIG_SOC_SERIES_STM32L4X || CONFIG_SOC_SERIES_STM32F0X  */
		*rate = apb1_clock;
		break;
#ifndef CONFIG_SOC_SERIES_STM32F0X
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 8003d84:	6013      	str	r3, [r2, #0]
#endif /* CONFIG_SOC_SERIES_STM32F0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8003d86:	2000      	movs	r0, #0
		break;
 8003d88:	4770      	bx	lr
		return -ENOTSUP;
 8003d8a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8003d8e:	4770      	bx	lr
 8003d90:	2000146c 	.word	0x2000146c

08003d94 <stm32_clock_control_init>:
			 mco2_prescaler(CONFIG_CLOCK_STM32_MCO2_DIV));
#endif /* CONFIG_CLOCK_STM32_MCO2_SRC_NOCLOCK */
}

static int stm32_clock_control_init(struct device *dev)
{
 8003d94:	b510      	push	{r4, lr}
 8003d96:	b086      	sub	sp, #24
	clk_init->AHBCLKDivider = ahb_prescaler(
 8003d98:	2300      	movs	r3, #0
 8003d9a:	4c22      	ldr	r4, [pc, #136]	; (8003e24 <stm32_clock_control_init+0x90>)
 8003d9c:	9300      	str	r3, [sp, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(
 8003d9e:	9301      	str	r3, [sp, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(
 8003da0:	9302      	str	r3, [sp, #8]

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8003da2:	f000 f847 	bl	8003e34 <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8003da6:	a803      	add	r0, sp, #12
 8003da8:	f000 f83e 	bl	8003e28 <config_pll_init>
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	055a      	lsls	r2, r3, #21
 8003db0:	d52f      	bpl.n	8003e12 <stm32_clock_control_init+0x7e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003db2:	68a3      	ldr	r3, [r4, #8]
 8003db4:	f023 0303 	bic.w	r3, r3, #3
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003dbe:	68a3      	ldr	r3, [r4, #8]
 8003dc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dc4:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003dc6:	68a3      	ldr	r3, [r4, #8]
 8003dc8:	f003 030c 	and.w	r3, r3, #12
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d1fa      	bne.n	8003dc6 <stm32_clock_control_init+0x32>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dd6:	6023      	str	r3, [r4, #0]
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
	LL_RCC_PLL_Disable();

#ifdef CONFIG_CLOCK_STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8003dd8:	68e3      	ldr	r3, [r4, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dda:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8003dde:	fa92 f2a2 	rbit	r2, r2
 8003de2:	2102      	movs	r1, #2
 8003de4:	fab2 f282 	clz	r2, r2
 8003de8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif CONFIG_CLOCK_STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 8003df4:	4669      	mov	r1, sp
 8003df6:	a803      	add	r0, sp, #12
 8003df8:	f7ff fe12 	bl	8003a20 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e02:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003e04:	6823      	ldr	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8003e06:	2000      	movs	r0, #0
 8003e08:	f023 0301 	bic.w	r3, r3, #1
 8003e0c:	6023      	str	r3, [r4, #0]
 8003e0e:	b006      	add	sp, #24
 8003e10:	bd10      	pop	{r4, pc}
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e18:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	055b      	lsls	r3, r3, #21
 8003e1e:	d5fc      	bpl.n	8003e1a <stm32_clock_control_init+0x86>
 8003e20:	e7c7      	b.n	8003db2 <stm32_clock_control_init+0x1e>
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000

08003e28 <config_pll_init>:
 */
void config_pll_init(LL_UTILS_PLLInitTypeDef *pllinit)
{
	pllinit->PLLM = pllm(CONFIG_CLOCK_STM32_PLL_M_DIVISOR);
	pllinit->PLLN = CONFIG_CLOCK_STM32_PLL_N_MULTIPLIER;
	pllinit->PLLR = pllr(CONFIG_CLOCK_STM32_PLL_R_DIVISOR);
 8003e28:	2130      	movs	r1, #48	; 0x30
 8003e2a:	2228      	movs	r2, #40	; 0x28
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003e32:	4770      	bx	lr

08003e34 <config_enable_default_clocks>:

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8003e34:	4770      	bx	lr
	...

08003e38 <_pinmux_stm32_set>:
 *
 * @return 0 on success, error otherwise
 */
int _pinmux_stm32_set(u32_t pin, u32_t func,
				struct device *clk)
{
 8003e38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e3a:	4604      	mov	r4, r0
	/* make sure to enable port clock first */
	if (enable_port(STM32_PORT(pin), clk)) {
 8003e3c:	0906      	lsrs	r6, r0, #4
{
 8003e3e:	460d      	mov	r5, r1
	if (!clk) {
 8003e40:	4610      	mov	r0, r2
 8003e42:	b912      	cbnz	r2, 8003e4a <_pinmux_stm32_set+0x12>
 8003e44:	480f      	ldr	r0, [pc, #60]	; (8003e84 <_pinmux_stm32_set+0x4c>)
 8003e46:	f001 f879 	bl	8004f3c <_impl_device_get_binding>
	pclken.bus = STM32_CLOCK_BUS_GPIO;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 8003e4e:	4b0e      	ldr	r3, [pc, #56]	; (8003e88 <_pinmux_stm32_set+0x50>)
 8003e50:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8003e54:	9301      	str	r3, [sp, #4]
	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 8003e56:	3301      	adds	r3, #1
 8003e58:	d011      	beq.n	8003e7e <_pinmux_stm32_set+0x46>
 8003e5a:	6843      	ldr	r3, [r0, #4]
 8003e5c:	4669      	mov	r1, sp
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4798      	blx	r3
	if (enable_port(STM32_PORT(pin), clk)) {
 8003e62:	b960      	cbnz	r0, 8003e7e <_pinmux_stm32_set+0x46>
	u32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 8003e64:	1120      	asrs	r0, r4, #4
 8003e66:	0280      	lsls	r0, r0, #10
	return stm32_gpio_configure((u32_t *)port_base,
 8003e68:	f005 030f 	and.w	r3, r5, #15
 8003e6c:	462a      	mov	r2, r5
 8003e6e:	f004 010f 	and.w	r1, r4, #15
 8003e72:	f100 4090 	add.w	r0, r0, #1207959552	; 0x48000000
 8003e76:	f7ff fa9a 	bl	80033ae <stm32_gpio_configure>
		return -EIO;
	}

	return stm32_pin_configure(pin, func, func & STM32_AFR_MASK);
}
 8003e7a:	b002      	add	sp, #8
 8003e7c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 8003e7e:	f06f 0004 	mvn.w	r0, #4
 8003e82:	e7fa      	b.n	8003e7a <_pinmux_stm32_set+0x42>
 8003e84:	080061d2 	.word	0x080061d2
 8003e88:	08006240 	.word	0x08006240

08003e8c <stm32_setup_pins>:
 * @param pinconf  board pin configuration array
 * @param pins     array size
 */
void stm32_setup_pins(const struct pin_config *pinconf,
		      size_t pins)
{
 8003e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8e:	4604      	mov	r4, r0
 8003e90:	4809      	ldr	r0, [pc, #36]	; (8003eb8 <stm32_setup_pins+0x2c>)
 8003e92:	460e      	mov	r6, r1
 8003e94:	f001 f852 	bl	8004f3c <_impl_device_get_binding>
	struct device *clk;
	int i;

	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (i = 0; i < pins; i++) {
 8003e98:	2500      	movs	r5, #0
 8003e9a:	4607      	mov	r7, r0
 8003e9c:	42b5      	cmp	r5, r6
 8003e9e:	f104 0408 	add.w	r4, r4, #8
 8003ea2:	d100      	bne.n	8003ea6 <stm32_setup_pins+0x1a>
		_pinmux_stm32_set(pinconf[i].pin_num,
				  pinconf[i].mode,
				  clk);
	}
}
 8003ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_pinmux_stm32_set(pinconf[i].pin_num,
 8003ea6:	463a      	mov	r2, r7
 8003ea8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8003eac:	f814 0c08 	ldrb.w	r0, [r4, #-8]
 8003eb0:	f7ff ffc2 	bl	8003e38 <_pinmux_stm32_set>
	for (i = 0; i < pins; i++) {
 8003eb4:	3501      	adds	r5, #1
 8003eb6:	e7f1      	b.n	8003e9c <stm32_setup_pins+0x10>
 8003eb8:	080061d2 	.word	0x080061d2

08003ebc <elapsed>:
static u32_t announced_cycles;

static volatile u32_t ctrl_cache; /* overflow bit clears on read! */

static u32_t elapsed(void)
{
 8003ebc:	b510      	push	{r4, lr}
	u32_t val, ov;

	do {
		val = SysTick->VAL & COUNTER_MAX;
 8003ebe:	4a0b      	ldr	r2, [pc, #44]	; (8003eec <elapsed+0x30>)
		ctrl_cache |= SysTick->CTRL;
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <elapsed+0x34>)
		val = SysTick->VAL & COUNTER_MAX;
 8003ec2:	6890      	ldr	r0, [r2, #8]
		ctrl_cache |= SysTick->CTRL;
 8003ec4:	6811      	ldr	r1, [r2, #0]
 8003ec6:	681c      	ldr	r4, [r3, #0]
 8003ec8:	4321      	orrs	r1, r4
 8003eca:	6019      	str	r1, [r3, #0]
	} while (SysTick->VAL > val);
 8003ecc:	6891      	ldr	r1, [r2, #8]
		val = SysTick->VAL & COUNTER_MAX;
 8003ece:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while (SysTick->VAL > val);
 8003ed2:	4288      	cmp	r0, r1
 8003ed4:	d3f5      	bcc.n	8003ec2 <elapsed+0x6>

	ov = (ctrl_cache & SysTick_CTRL_COUNTFLAG_Msk) ? last_load : 0;
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a06      	ldr	r2, [pc, #24]	; (8003ef4 <elapsed+0x38>)
 8003eda:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8003ede:	bf18      	it	ne
 8003ee0:	6813      	ldrne	r3, [r2, #0]
	return (last_load - val) + ov;
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	1a10      	subs	r0, r2, r0
}
 8003ee6:	4418      	add	r0, r3
 8003ee8:	bd10      	pop	{r4, pc}
 8003eea:	bf00      	nop
 8003eec:	e000e010 	.word	0xe000e010
 8003ef0:	2000017c 	.word	0x2000017c
 8003ef4:	20000184 	.word	0x20000184

08003ef8 <_timer_int_handler>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void _timer_int_handler(void *arg)
{
 8003ef8:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	u32_t dticks;

	cycle_count += last_load;
 8003efa:	4a0d      	ldr	r2, [pc, #52]	; (8003f30 <_timer_int_handler+0x38>)
 8003efc:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <_timer_int_handler+0x3c>)
 8003efe:	6812      	ldr	r2, [r2, #0]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	4410      	add	r0, r2
	dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8003f04:	4a0c      	ldr	r2, [pc, #48]	; (8003f38 <_timer_int_handler+0x40>)
	cycle_count += last_load;
 8003f06:	6018      	str	r0, [r3, #0]
	dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8003f08:	6811      	ldr	r1, [r2, #0]
 8003f0a:	4b0c      	ldr	r3, [pc, #48]	; (8003f3c <_timer_int_handler+0x44>)
 8003f0c:	1a40      	subs	r0, r0, r1
 8003f0e:	fbb0 f0f3 	udiv	r0, r0, r3
	announced_cycles += dticks * CYC_PER_TICK;
 8003f12:	fb03 1300 	mla	r3, r3, r0, r1
 8003f16:	6013      	str	r3, [r2, #0]

	ctrl_cache = SysTick->CTRL; /* Reset overflow flag */
 8003f18:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <_timer_int_handler+0x48>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <_timer_int_handler+0x4c>)
 8003f1e:	601a      	str	r2, [r3, #0]
	ctrl_cache = 0U;
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]

	z_clock_announce(TICKLESS ? dticks : 1);
 8003f24:	f001 fd60 	bl	80059e8 <z_clock_announce>
	_ExcExit();
}
 8003f28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
 8003f2c:	f000 b888 	b.w	8004040 <_ExcExit>
 8003f30:	20000184 	.word	0x20000184
 8003f34:	20000180 	.word	0x20000180
 8003f38:	20000178 	.word	0x20000178
 8003f3c:	000c3500 	.word	0x000c3500
 8003f40:	e000e010 	.word	0xe000e010
 8003f44:	2000017c 	.word	0x2000017c

08003f48 <z_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f48:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <z_clock_driver_init+0x20>)
 8003f4a:	2210      	movs	r2, #16
 8003f4c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

int z_clock_driver_init(struct device *device)
{
	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK;
 8003f50:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <z_clock_driver_init+0x24>)
 8003f52:	4a07      	ldr	r2, [pc, #28]	; (8003f70 <z_clock_driver_init+0x28>)
 8003f54:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = last_load;
 8003f56:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <z_clock_driver_init+0x2c>)
	SysTick->VAL = 0; /* resets timer to last_load */
 8003f58:	2000      	movs	r0, #0
	SysTick->LOAD = last_load;
 8003f5a:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8003f5c:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	f042 0207 	orr.w	r2, r2, #7
 8003f64:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8003f66:	4770      	bx	lr
 8003f68:	e000ed00 	.word	0xe000ed00
 8003f6c:	20000184 	.word	0x20000184
 8003f70:	000c3500 	.word	0x000c3500
 8003f74:	e000e010 	.word	0xe000e010

08003f78 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
 8003f78:	b570      	push	{r4, r5, r6, lr}
 8003f7a:	4c1e      	ldr	r4, [pc, #120]	; (8003ff4 <z_clock_set_timeout+0x7c>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle && ticks == K_FOREVER) {
 8003f7c:	b151      	cbz	r1, 8003f94 <z_clock_set_timeout+0x1c>
 8003f7e:	1c43      	adds	r3, r0, #1
 8003f80:	d108      	bne.n	8003f94 <z_clock_set_timeout+0x1c>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8003f82:	4a1d      	ldr	r2, [pc, #116]	; (8003ff8 <z_clock_set_timeout+0x80>)
 8003f84:	6813      	ldr	r3, [r2, #0]
 8003f86:	f023 0301 	bic.w	r3, r3, #1
 8003f8a:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 8003f8c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003f90:	6023      	str	r3, [r4, #0]
 8003f92:	bd70      	pop	{r4, r5, r6, pc}
	}

#if defined(CONFIG_TICKLESS_KERNEL) && !defined(CONFIG_QEMU_TICKLESS_WORKAROUND)
	u32_t delay;

	ticks = min(MAX_TICKS, max(ticks - 1, 0));
 8003f94:	3801      	subs	r0, #1
 8003f96:	2813      	cmp	r0, #19
 8003f98:	dc26      	bgt.n	8003fe8 <z_clock_set_timeout+0x70>
 8003f9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

	/* Desired delay in the future */
	delay = (ticks == 0) ? MIN_DELAY : ticks * CYC_PER_TICK;
 8003f9e:	b328      	cbz	r0, 8003fec <z_clock_set_timeout+0x74>
 8003fa0:	4e16      	ldr	r6, [pc, #88]	; (8003ffc <z_clock_set_timeout+0x84>)
 8003fa2:	4346      	muls	r6, r0
	__asm__ volatile(
 8003fa4:	f04f 0310 	mov.w	r3, #16
 8003fa8:	f3ef 8511 	mrs	r5, BASEPRI
 8003fac:	f383 8811 	msr	BASEPRI, r3

	k_spinlock_key_t key = k_spin_lock(&lock);

	cycle_count += elapsed();
 8003fb0:	f7ff ff84 	bl	8003ebc <elapsed>
 8003fb4:	4b12      	ldr	r3, [pc, #72]	; (8004000 <z_clock_set_timeout+0x88>)

	/* Round delay up to next tick boundary */
	delay = delay + (cycle_count - announced_cycles);
	delay = ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8003fb6:	4911      	ldr	r1, [pc, #68]	; (8003ffc <z_clock_set_timeout+0x84>)
	cycle_count += elapsed();
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4410      	add	r0, r2
 8003fbc:	6018      	str	r0, [r3, #0]
	delay = delay + (cycle_count - announced_cycles);
 8003fbe:	4b11      	ldr	r3, [pc, #68]	; (8004004 <z_clock_set_timeout+0x8c>)
 8003fc0:	681a      	ldr	r2, [r3, #0]
	delay = ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8003fc2:	f5c2 2343 	rsb	r3, r2, #798720	; 0xc3000
 8003fc6:	f203 43ff 	addw	r3, r3, #1279	; 0x4ff
 8003fca:	4433      	add	r3, r6
 8003fcc:	4403      	add	r3, r0
	last_load = delay - (cycle_count - announced_cycles);
 8003fce:	1a10      	subs	r0, r2, r0
	delay = ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8003fd0:	fbb3 f3f1 	udiv	r3, r3, r1
	last_load = delay - (cycle_count - announced_cycles);
 8003fd4:	fb01 0003 	mla	r0, r1, r3, r0

	SysTick->LOAD = last_load;
 8003fd8:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <z_clock_set_timeout+0x80>)
	last_load = delay - (cycle_count - announced_cycles);
 8003fda:	6020      	str	r0, [r4, #0]
	SysTick->VAL = 0; /* resets timer to last_load */
 8003fdc:	2200      	movs	r2, #0
	SysTick->LOAD = last_load;
 8003fde:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8003fe0:	609a      	str	r2, [r3, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8003fe2:	f385 8811 	msr	BASEPRI, r5
 8003fe6:	bd70      	pop	{r4, r5, r6, pc}
	ticks = min(MAX_TICKS, max(ticks - 1, 0));
 8003fe8:	2013      	movs	r0, #19
 8003fea:	e7d9      	b.n	8003fa0 <z_clock_set_timeout+0x28>
	delay = (ticks == 0) ? MIN_DELAY : ticks * CYC_PER_TICK;
 8003fec:	f44f 7600 	mov.w	r6, #512	; 0x200
 8003ff0:	e7d8      	b.n	8003fa4 <z_clock_set_timeout+0x2c>
 8003ff2:	bf00      	nop
 8003ff4:	20000184 	.word	0x20000184
 8003ff8:	e000e010 	.word	0xe000e010
 8003ffc:	000c3500 	.word	0x000c3500
 8004000:	20000180 	.word	0x20000180
 8004004:	20000178 	.word	0x20000178

08004008 <z_clock_elapsed>:
	k_spin_unlock(&lock, key);
#endif
}

u32_t z_clock_elapsed(void)
{
 8004008:	b510      	push	{r4, lr}
	__asm__ volatile(
 800400a:	f04f 0310 	mov.w	r3, #16
 800400e:	f3ef 8411 	mrs	r4, BASEPRI
 8004012:	f383 8811 	msr	BASEPRI, r3
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc = elapsed() + cycle_count - announced_cycles;
 8004016:	f7ff ff51 	bl	8003ebc <elapsed>
 800401a:	4b06      	ldr	r3, [pc, #24]	; (8004034 <z_clock_elapsed+0x2c>)
 800401c:	4a06      	ldr	r2, [pc, #24]	; (8004038 <z_clock_elapsed+0x30>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	1a9b      	subs	r3, r3, r2
 8004024:	4418      	add	r0, r3
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8004026:	f384 8811 	msr	BASEPRI, r4

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 800402a:	4b04      	ldr	r3, [pc, #16]	; (800403c <z_clock_elapsed+0x34>)
 800402c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004030:	bd10      	pop	{r4, pc}
 8004032:	bf00      	nop
 8004034:	20000180 	.word	0x20000180
 8004038:	20000178 	.word	0x20000178
 800403c:	000c3500 	.word	0x000c3500

08004040 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
 8004040:	4804      	ldr	r0, [pc, #16]	; (8004054 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
 8004042:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
 8004044:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
 8004046:	4288      	cmp	r0, r1
    beq _EXIT_EXC
 8004048:	d003      	beq.n	8004052 <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
 800404a:	4903      	ldr	r1, [pc, #12]	; (8004058 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
 800404c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
 8004050:	600a      	str	r2, [r1, #0]

08004052 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
 8004052:	4770      	bx	lr
    ldr r0, =_kernel
 8004054:	200002f0 	.word	0x200002f0
    ldr r1, =_SCS_ICSR
 8004058:	e000ed04 	.word	0xe000ed04

0800405c <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800405c:	4804      	ldr	r0, [pc, #16]	; (8004070 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	2110      	movs	r1, #16
 8004062:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8004064:	3301      	adds	r3, #1
 8004066:	2b5f      	cmp	r3, #95	; 0x5f
 8004068:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 800406c:	d1f9      	bne.n	8004062 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 800406e:	4770      	bx	lr
 8004070:	e000e100 	.word	0xe000e100

08004074 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
 8004074:	4a08      	ldr	r2, [pc, #32]	; (8004098 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8004076:	4909      	ldr	r1, [pc, #36]	; (800409c <__swap+0x28>)
	_current->arch.basepri = key;
 8004078:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 800407a:	6809      	ldr	r1, [r1, #0]
 800407c:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800407e:	4908      	ldr	r1, [pc, #32]	; (80040a0 <__swap+0x2c>)
	_current->arch.basepri = key;
 8004080:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004082:	684b      	ldr	r3, [r1, #4]
 8004084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004088:	604b      	str	r3, [r1, #4]
 800408a:	2300      	movs	r3, #0
 800408c:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
 8004090:	6893      	ldr	r3, [r2, #8]
}
 8004092:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	200002f0 	.word	0x200002f0
 800409c:	0800683c 	.word	0x0800683c
 80040a0:	e000ed00 	.word	0xe000ed00

080040a4 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80040a4:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80040a6:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 80040aa:	490d      	ldr	r1, [pc, #52]	; (80040e0 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 80040ac:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 80040ae:	2028      	movs	r0, #40	; 0x28
    add r0, r2
 80040b0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
 80040b2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 80040b6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
 80040ba:	4f0a      	ldr	r7, [pc, #40]	; (80040e4 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 80040bc:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
 80040c0:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 80040c2:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
 80040c4:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 80040c6:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
 80040c8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 80040ca:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 80040cc:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 80040d0:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
 80040d4:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r3, #0
    msr PSPLIM, r3
    pop {r3}
#endif

    msr PSP, ip
 80040d8:	f38c 8809 	msr	PSP, ip
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
 80040dc:	4770      	bx	lr
 80040de:	0000      	.short	0x0000
    ldr r1, =_kernel
 80040e0:	200002f0 	.word	0x200002f0
    ldr v4, =_SCS_ICSR
 80040e4:	e000ed04 	.word	0xe000ed04

080040e8 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
 80040e8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 80040ec:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 80040ee:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 80040f2:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 80040f6:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
 80040f8:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
 80040fc:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
 8004100:	2902      	cmp	r1, #2
    beq _oops
 8004102:	d0ff      	beq.n	8004104 <_oops>

08004104 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
 8004104:	b500      	push	{lr}
    blx _do_kernel_oops
 8004106:	f000 f9e5 	bl	80044d4 <_do_kernel_oops>
    pop {pc}
 800410a:	bd00      	pop	{pc}

0800410c <_MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
 800410c:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 800410e:	4c19      	ldr	r4, [pc, #100]	; (8004174 <_MpuFault.isra.2+0x68>)
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
 8004110:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
 8004112:	4819      	ldr	r0, [pc, #100]	; (8004178 <_MpuFault.isra.2+0x6c>)
 8004114:	f7ff f908 	bl	8003328 <printk>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 8004118:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800411a:	06d9      	lsls	r1, r3, #27
 800411c:	d502      	bpl.n	8004124 <_MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error\n");
 800411e:	4817      	ldr	r0, [pc, #92]	; (800417c <_MpuFault.isra.2+0x70>)
 8004120:	f7ff f902 	bl	8003328 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
 8004124:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004126:	071a      	lsls	r2, r3, #28
 8004128:	d502      	bpl.n	8004130 <_MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
 800412a:	4815      	ldr	r0, [pc, #84]	; (8004180 <_MpuFault.isra.2+0x74>)
 800412c:	f7ff f8fc 	bl	8003328 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
 8004130:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004132:	079b      	lsls	r3, r3, #30
 8004134:	d50e      	bpl.n	8004154 <_MpuFault.isra.2+0x48>
		PR_FAULT_INFO("  Data Access Violation\n");
 8004136:	4813      	ldr	r0, [pc, #76]	; (8004184 <_MpuFault.isra.2+0x78>)
 8004138:	f7ff f8f6 	bl	8003328 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
 800413c:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
 800413e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004140:	0618      	lsls	r0, r3, #24
 8004142:	d507      	bpl.n	8004154 <_MpuFault.isra.2+0x48>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
 8004144:	4810      	ldr	r0, [pc, #64]	; (8004188 <_MpuFault.isra.2+0x7c>)
 8004146:	f7ff f8ef 	bl	8003328 <printk>
			if (fromHardFault) {
 800414a:	b11d      	cbz	r5, 8004154 <_MpuFault.isra.2+0x48>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 800414c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800414e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004152:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
 8004154:	4c07      	ldr	r4, [pc, #28]	; (8004174 <_MpuFault.isra.2+0x68>)
 8004156:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004158:	07d2      	lsls	r2, r2, #31
 800415a:	d502      	bpl.n	8004162 <_MpuFault.isra.2+0x56>
		PR_FAULT_INFO("  Instruction Access Violation\n");
 800415c:	480b      	ldr	r0, [pc, #44]	; (800418c <_MpuFault.isra.2+0x80>)
 800415e:	f7ff f8e3 	bl	8003328 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
 8004162:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004164:	069b      	lsls	r3, r3, #26
 8004166:	d502      	bpl.n	800416e <_MpuFault.isra.2+0x62>
		PR_FAULT_INFO(
 8004168:	4809      	ldr	r0, [pc, #36]	; (8004190 <_MpuFault.isra.2+0x84>)
 800416a:	f7ff f8dd 	bl	8003328 <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
 800416e:	2000      	movs	r0, #0
 8004170:	bd38      	pop	{r3, r4, r5, pc}
 8004172:	bf00      	nop
 8004174:	e000ed00 	.word	0xe000ed00
 8004178:	080063c5 	.word	0x080063c5
 800417c:	080063dc 	.word	0x080063dc
 8004180:	080063ee 	.word	0x080063ee
 8004184:	08006402 	.word	0x08006402
 8004188:	0800641b 	.word	0x0800641b
 800418c:	08006432 	.word	0x08006432
 8004190:	08006452 	.word	0x08006452

08004194 <_BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int _BusFault(NANO_ESF *esf, int fromHardFault)
 8004194:	b538      	push	{r3, r4, r5, lr}
{
	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8004196:	4c1b      	ldr	r4, [pc, #108]	; (8004204 <_BusFault.isra.3+0x70>)
static int _BusFault(NANO_ESF *esf, int fromHardFault)
 8004198:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
 800419a:	481b      	ldr	r0, [pc, #108]	; (8004208 <_BusFault.isra.3+0x74>)
 800419c:	f7ff f8c4 	bl	8003328 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80041a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80041a2:	04d8      	lsls	r0, r3, #19
 80041a4:	d504      	bpl.n	80041b0 <_BusFault.isra.3+0x1c>
		PR_FAULT_INFO("  Stacking error\n");
 80041a6:	4819      	ldr	r0, [pc, #100]	; (800420c <_BusFault.isra.3+0x78>)
		PR_FAULT_INFO("  Instruction bus error\n");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
 80041a8:	f7ff f8be 	bl	8003328 <printk>
	if (_MemoryFaultIsRecoverable(esf)) {
		return _NANO_ERR_RECOVERABLE;
	}

	return _NANO_ERR_HW_EXCEPTION;
}
 80041ac:	2000      	movs	r0, #0
 80041ae:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 80041b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80041b2:	0519      	lsls	r1, r3, #20
 80041b4:	d501      	bpl.n	80041ba <_BusFault.isra.3+0x26>
		PR_FAULT_INFO("  Unstacking error\n");
 80041b6:	4816      	ldr	r0, [pc, #88]	; (8004210 <_BusFault.isra.3+0x7c>)
 80041b8:	e7f6      	b.n	80041a8 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80041ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80041bc:	059a      	lsls	r2, r3, #22
 80041be:	d514      	bpl.n	80041ea <_BusFault.isra.3+0x56>
		PR_FAULT_INFO("  Precise data bus error\n");
 80041c0:	4814      	ldr	r0, [pc, #80]	; (8004214 <_BusFault.isra.3+0x80>)
 80041c2:	f7ff f8b1 	bl	8003328 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
 80041c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
 80041c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80041ca:	041b      	lsls	r3, r3, #16
 80041cc:	d507      	bpl.n	80041de <_BusFault.isra.3+0x4a>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
 80041ce:	4812      	ldr	r0, [pc, #72]	; (8004218 <_BusFault.isra.3+0x84>)
 80041d0:	f7ff f8aa 	bl	8003328 <printk>
			if (fromHardFault) {
 80041d4:	b11d      	cbz	r5, 80041de <_BusFault.isra.3+0x4a>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 80041d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80041d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80041dc:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80041de:	4b09      	ldr	r3, [pc, #36]	; (8004204 <_BusFault.isra.3+0x70>)
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	0558      	lsls	r0, r3, #21
 80041e4:	d5e2      	bpl.n	80041ac <_BusFault.isra.3+0x18>
			PR_FAULT_INFO("  Imprecise data bus error\n");
 80041e6:	480d      	ldr	r0, [pc, #52]	; (800421c <_BusFault.isra.3+0x88>)
 80041e8:	e7de      	b.n	80041a8 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80041ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80041ec:	0559      	lsls	r1, r3, #21
 80041ee:	d4fa      	bmi.n	80041e6 <_BusFault.isra.3+0x52>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
 80041f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80041f2:	05da      	lsls	r2, r3, #23
 80041f4:	d501      	bpl.n	80041fa <_BusFault.isra.3+0x66>
		PR_FAULT_INFO("  Instruction bus error\n");
 80041f6:	480a      	ldr	r0, [pc, #40]	; (8004220 <_BusFault.isra.3+0x8c>)
 80041f8:	e7d6      	b.n	80041a8 <_BusFault.isra.3+0x14>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 80041fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80041fc:	049b      	lsls	r3, r3, #18
 80041fe:	d5d5      	bpl.n	80041ac <_BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
 8004200:	4808      	ldr	r0, [pc, #32]	; (8004224 <_BusFault.isra.3+0x90>)
 8004202:	e7d1      	b.n	80041a8 <_BusFault.isra.3+0x14>
 8004204:	e000ed00 	.word	0xe000ed00
 8004208:	08006276 	.word	0x08006276
 800420c:	080063dc 	.word	0x080063dc
 8004210:	080063ee 	.word	0x080063ee
 8004214:	0800628d 	.word	0x0800628d
 8004218:	080062a7 	.word	0x080062a7
 800421c:	080062bd 	.word	0x080062bd
 8004220:	080062d9 	.word	0x080062d9
 8004224:	08006452 	.word	0x08006452

08004228 <_UsageFault.isra.5>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
 8004228:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
 800422a:	4c19      	ldr	r4, [pc, #100]	; (8004290 <_UsageFault.isra.5+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
 800422c:	4819      	ldr	r0, [pc, #100]	; (8004294 <_UsageFault.isra.5+0x6c>)
 800422e:	f7ff f87b 	bl	8003328 <printk>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
 8004232:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004234:	019a      	lsls	r2, r3, #6
 8004236:	d502      	bpl.n	800423e <_UsageFault.isra.5+0x16>
		PR_FAULT_INFO("  Division by zero\n");
 8004238:	4817      	ldr	r0, [pc, #92]	; (8004298 <_UsageFault.isra.5+0x70>)
 800423a:	f7ff f875 	bl	8003328 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
 800423e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004240:	01db      	lsls	r3, r3, #7
 8004242:	d502      	bpl.n	800424a <_UsageFault.isra.5+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
 8004244:	4815      	ldr	r0, [pc, #84]	; (800429c <_UsageFault.isra.5+0x74>)
 8004246:	f7ff f86f 	bl	8003328 <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
 800424a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800424c:	0318      	lsls	r0, r3, #12
 800424e:	d502      	bpl.n	8004256 <_UsageFault.isra.5+0x2e>
		PR_FAULT_INFO("  No coprocessor instructions\n");
 8004250:	4813      	ldr	r0, [pc, #76]	; (80042a0 <_UsageFault.isra.5+0x78>)
 8004252:	f7ff f869 	bl	8003328 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
 8004256:	4c0e      	ldr	r4, [pc, #56]	; (8004290 <_UsageFault.isra.5+0x68>)
 8004258:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800425a:	0359      	lsls	r1, r3, #13
 800425c:	d502      	bpl.n	8004264 <_UsageFault.isra.5+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
 800425e:	4811      	ldr	r0, [pc, #68]	; (80042a4 <_UsageFault.isra.5+0x7c>)
 8004260:	f7ff f862 	bl	8003328 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
 8004264:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004266:	039a      	lsls	r2, r3, #14
 8004268:	d502      	bpl.n	8004270 <_UsageFault.isra.5+0x48>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
 800426a:	480f      	ldr	r0, [pc, #60]	; (80042a8 <_UsageFault.isra.5+0x80>)
 800426c:	f7ff f85c 	bl	8003328 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
 8004270:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004272:	03db      	lsls	r3, r3, #15
 8004274:	d502      	bpl.n	800427c <_UsageFault.isra.5+0x54>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
 8004276:	480d      	ldr	r0, [pc, #52]	; (80042ac <_UsageFault.isra.5+0x84>)
 8004278:	f7ff f856 	bl	8003328 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800427c:	4a04      	ldr	r2, [pc, #16]	; (8004290 <_UsageFault.isra.5+0x68>)
 800427e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004280:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8004284:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8004288:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 800428a:	2000      	movs	r0, #0
 800428c:	bd10      	pop	{r4, pc}
 800428e:	bf00      	nop
 8004290:	e000ed00 	.word	0xe000ed00
 8004294:	08006482 	.word	0x08006482
 8004298:	0800649b 	.word	0x0800649b
 800429c:	080064af 	.word	0x080064af
 80042a0:	080064ca 	.word	0x080064ca
 80042a4:	080064e9 	.word	0x080064e9
 80042a8:	0800650f 	.word	0x0800650f
 80042ac:	0800652a 	.word	0x0800652a

080042b0 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
 80042b0:	b538      	push	{r3, r4, r5, lr}
	u32_t reason;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80042b2:	4c27      	ldr	r4, [pc, #156]	; (8004350 <_Fault+0xa0>)
 80042b4:	6863      	ldr	r3, [r4, #4]
 80042b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
 80042ba:	1eda      	subs	r2, r3, #3
{
 80042bc:	4605      	mov	r5, r0
	switch (fault) {
 80042be:	2a09      	cmp	r2, #9
 80042c0:	d83a      	bhi.n	8004338 <_Fault+0x88>
 80042c2:	e8df f002 	tbb	[pc, r2]
 80042c6:	3305      	.short	0x3305
 80042c8:	39393035 	.word	0x39393035
 80042cc:	37393939 	.word	0x37393939
	PR_FAULT_INFO("***** HARD FAULT *****\n");
 80042d0:	4820      	ldr	r0, [pc, #128]	; (8004354 <_Fault+0xa4>)
 80042d2:	f7ff f829 	bl	8003328 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
 80042d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80042d8:	079a      	lsls	r2, r3, #30
 80042da:	d503      	bpl.n	80042e4 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
 80042dc:	481e      	ldr	r0, [pc, #120]	; (8004358 <_Fault+0xa8>)
	PR_FAULT_INFO(
 80042de:	f7ff f823 	bl	8003328 <printk>
 80042e2:	e002      	b.n	80042ea <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
 80042e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	d405      	bmi.n	80042f6 <_Fault+0x46>
	PR_FAULT_INFO(
 80042ea:	2000      	movs	r0, #0

#if defined(CONFIG_ARM_SECURE_FIRMWARE)
_exit_fatal:
	reason = _NANO_ERR_HW_EXCEPTION;
#endif
	_NanoFatalErrorHandler(reason, esf);
 80042ec:	4629      	mov	r1, r5
}
 80042ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_NanoFatalErrorHandler(reason, esf);
 80042f2:	f000 b8bd 	b.w	8004470 <_NanoFatalErrorHandler>
		PR_EXC("  Fault escalation (see below)\n");
 80042f6:	4819      	ldr	r0, [pc, #100]	; (800435c <_Fault+0xac>)
 80042f8:	f7ff f816 	bl	8003328 <printk>
		if (SCB_MMFSR) {
 80042fc:	4b18      	ldr	r3, [pc, #96]	; (8004360 <_Fault+0xb0>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	b12b      	cbz	r3, 800430e <_Fault+0x5e>
			reason = _MpuFault(esf, 1);
 8004302:	2001      	movs	r0, #1
		reason = _MpuFault(esf, 0);
 8004304:	f7ff ff02 	bl	800410c <_MpuFault.isra.2>
	if (reason == _NANO_ERR_RECOVERABLE) {
 8004308:	2806      	cmp	r0, #6
 800430a:	d1ef      	bne.n	80042ec <_Fault+0x3c>
 800430c:	bd38      	pop	{r3, r4, r5, pc}
		} else if (SCB_BFSR) {
 800430e:	4b15      	ldr	r3, [pc, #84]	; (8004364 <_Fault+0xb4>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	b11b      	cbz	r3, 800431c <_Fault+0x6c>
			reason = _BusFault(esf, 1);
 8004314:	2001      	movs	r0, #1
		reason = _BusFault(esf, 0);
 8004316:	f7ff ff3d 	bl	8004194 <_BusFault.isra.3>
 800431a:	e7f5      	b.n	8004308 <_Fault+0x58>
		} else if (SCB_UFSR) {
 800431c:	4b12      	ldr	r3, [pc, #72]	; (8004368 <_Fault+0xb8>)
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0e1      	beq.n	80042ea <_Fault+0x3a>
		reason = _UsageFault(esf);
 8004326:	f7ff ff7f 	bl	8004228 <_UsageFault.isra.5>
 800432a:	e7ed      	b.n	8004308 <_Fault+0x58>
		reason = _MpuFault(esf, 0);
 800432c:	2000      	movs	r0, #0
 800432e:	e7e9      	b.n	8004304 <_Fault+0x54>
		reason = _BusFault(esf, 0);
 8004330:	2000      	movs	r0, #0
 8004332:	e7f0      	b.n	8004316 <_Fault+0x66>
	PR_FAULT_INFO(
 8004334:	480d      	ldr	r0, [pc, #52]	; (800436c <_Fault+0xbc>)
 8004336:	e7d2      	b.n	80042de <_Fault+0x2e>
	PR_FAULT_INFO("***** %s %d) *****\n",
 8004338:	480d      	ldr	r0, [pc, #52]	; (8004370 <_Fault+0xc0>)
 800433a:	490e      	ldr	r1, [pc, #56]	; (8004374 <_Fault+0xc4>)
 800433c:	f1a3 0210 	sub.w	r2, r3, #16
 8004340:	2b0f      	cmp	r3, #15
 8004342:	bfd8      	it	le
 8004344:	4601      	movle	r1, r0
 8004346:	480c      	ldr	r0, [pc, #48]	; (8004378 <_Fault+0xc8>)
 8004348:	f7fe ffee 	bl	8003328 <printk>
 800434c:	e7cd      	b.n	80042ea <_Fault+0x3a>
 800434e:	bf00      	nop
 8004350:	e000ed00 	.word	0xe000ed00
 8004354:	08006320 	.word	0x08006320
 8004358:	08006338 	.word	0x08006338
 800435c:	0800635a 	.word	0x0800635a
 8004360:	e000ed28 	.word	0xe000ed28
 8004364:	e000ed29 	.word	0xe000ed29
 8004368:	e000ed2a 	.word	0xe000ed2a
 800436c:	0800637a 	.word	0x0800637a
 8004370:	080062f2 	.word	0x080062f2
 8004374:	08006307 	.word	0x08006307
 8004378:	080063b1 	.word	0x080063b1

0800437c <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 800437c:	4a02      	ldr	r2, [pc, #8]	; (8004388 <_FaultInit+0xc>)
 800437e:	6953      	ldr	r3, [r2, #20]
 8004380:	f043 0310 	orr.w	r3, r3, #16
 8004384:	6153      	str	r3, [r2, #20]
 8004386:	4770      	bx	lr
 8004388:	e000ed00 	.word	0xe000ed00

0800438c <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 800438c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800438e:	2b00      	cmp	r3, #0
 8004390:	db08      	blt.n	80043a4 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004392:	2201      	movs	r2, #1
 8004394:	f000 001f 	and.w	r0, r0, #31
 8004398:	fa02 f000 	lsl.w	r0, r2, r0
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	4a02      	ldr	r2, [pc, #8]	; (80043a8 <_arch_irq_enable+0x1c>)
 80043a0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	e000e100 	.word	0xe000e100

080043ac <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 80043ac:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80043ae:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b0:	bfa8      	it	ge
 80043b2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
 80043b6:	f101 0101 	add.w	r1, r1, #1
 80043ba:	ea4f 1101 	mov.w	r1, r1, lsl #4
 80043be:	bfad      	iteet	ge
 80043c0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c4:	f000 000f 	andlt.w	r0, r0, #15
 80043c8:	4b03      	ldrlt	r3, [pc, #12]	; (80043d8 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ca:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043cc:	bfb6      	itet	lt
 80043ce:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d0:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d4:	5419      	strblt	r1, [r3, r0]
 80043d6:	4770      	bx	lr
 80043d8:	e000ed14 	.word	0xe000ed14

080043dc <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
 80043dc:	f000 b834 	b.w	8004448 <__bus_fault>

080043e0 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
 80043e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e2:	460c      	mov	r4, r1
 80043e4:	4616      	mov	r6, r2
 80043e6:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
 80043e8:	2204      	movs	r2, #4
 80043ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80043ee:	4605      	mov	r5, r0
 80043f0:	f001 fa4e 	bl	8005890 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 80043f4:	f1a6 0120 	sub.w	r1, r6, #32
 80043f8:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
 80043fa:	4a0c      	ldr	r2, [pc, #48]	; (800442c <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
 80043fc:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 80043fe:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
 8004402:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
 8004404:	f022 0201 	bic.w	r2, r2, #1
 8004408:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
 800440a:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
 800440c:	65ee      	str	r6, [r5, #92]	; 0x5c
 800440e:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
 8004410:	9a06      	ldr	r2, [sp, #24]
 8004412:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
 8004414:	9a07      	ldr	r2, [sp, #28]
 8004416:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
 8004418:	9a08      	ldr	r2, [sp, #32]
 800441a:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
 800441c:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
 800441e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004422:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
 8004424:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
 8004426:	666b      	str	r3, [r5, #100]	; 0x64
 8004428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800442a:	bf00      	nop
 800442c:	08002ef5 	.word	0x08002ef5

08004430 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
 8004430:	4901      	ldr	r1, [pc, #4]	; (8004438 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
 8004432:	2210      	movs	r2, #16
	str r2, [r1]
 8004434:	600a      	str	r2, [r1, #0]
	bx lr
 8004436:	4770      	bx	lr
	ldr r1, =_SCB_SCR
 8004438:	e000ed10 	.word	0xe000ed10

0800443c <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
 800443c:	4040      	eors	r0, r0
	msr BASEPRI, r0
 800443e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
 8004442:	bf30      	wfi

	bx lr
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop

08004448 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
 8004448:	4040      	eors	r0, r0
	msr BASEPRI, r0
 800444a:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
 800444e:	f8df c01c 	ldr.w	ip, [pc, #28]	; 800446c <__bus_fault+0x24>
	ldr ip, [ip]
 8004452:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
 8004456:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
 800445a:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
 800445c:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
 8004460:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
 8004464:	b500      	push	{lr}
	bl _Fault
 8004466:	f7ff ff23 	bl	80042b0 <_Fault>

	pop {pc}
 800446a:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
 800446c:	e000ed04 	.word	0xe000ed04

08004470 <_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
 8004470:	b538      	push	{r3, r4, r5, lr}
 8004472:	4604      	mov	r4, r0
 8004474:	460d      	mov	r5, r1
	LOG_PANIC();

	switch (reason) {
 8004476:	2805      	cmp	r0, #5
 8004478:	d81a      	bhi.n	80044b0 <_NanoFatalErrorHandler+0x40>
 800447a:	e8df f000 	tbb	[pc, r0]
 800447e:	1903      	.short	0x1903
 8004480:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
 8004484:	480d      	ldr	r0, [pc, #52]	; (80044bc <_NanoFatalErrorHandler+0x4c>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
 8004486:	f7fe ff4f 	bl	8003328 <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
 800448a:	f001 f8e1 	bl	8005650 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
 800448e:	69aa      	ldr	r2, [r5, #24]
 8004490:	4601      	mov	r1, r0
 8004492:	480b      	ldr	r0, [pc, #44]	; (80044c0 <_NanoFatalErrorHandler+0x50>)
 8004494:	f7fe ff48 	bl	8003328 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
 8004498:	4629      	mov	r1, r5
 800449a:	4620      	mov	r0, r4
}
 800449c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
 80044a0:	f000 b81c 	b.w	80044dc <_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
 80044a4:	4807      	ldr	r0, [pc, #28]	; (80044c4 <_NanoFatalErrorHandler+0x54>)
 80044a6:	e7ee      	b.n	8004486 <_NanoFatalErrorHandler+0x16>
		printk("***** Kernel OOPS! *****\n");
 80044a8:	4807      	ldr	r0, [pc, #28]	; (80044c8 <_NanoFatalErrorHandler+0x58>)
 80044aa:	e7ec      	b.n	8004486 <_NanoFatalErrorHandler+0x16>
		printk("***** Kernel Panic! *****\n");
 80044ac:	4807      	ldr	r0, [pc, #28]	; (80044cc <_NanoFatalErrorHandler+0x5c>)
 80044ae:	e7ea      	b.n	8004486 <_NanoFatalErrorHandler+0x16>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
 80044b0:	4601      	mov	r1, r0
 80044b2:	4807      	ldr	r0, [pc, #28]	; (80044d0 <_NanoFatalErrorHandler+0x60>)
 80044b4:	f7fe ff38 	bl	8003328 <printk>
		break;
 80044b8:	e7e7      	b.n	800448a <_NanoFatalErrorHandler+0x1a>
 80044ba:	bf00      	nop
 80044bc:	08006556 	.word	0x08006556
 80044c0:	080065f4 	.word	0x080065f4
 80044c4:	08006576 	.word	0x08006576
 80044c8:	0800659c 	.word	0x0800659c
 80044cc:	080065b6 	.word	0x080065b6
 80044d0:	080065d1 	.word	0x080065d1

080044d4 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
 80044d4:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
 80044d6:	6800      	ldr	r0, [r0, #0]
 80044d8:	f7ff bfca 	b.w	8004470 <_NanoFatalErrorHandler>

080044dc <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
 80044dc:	2805      	cmp	r0, #5
{
 80044de:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
 80044e0:	d00c      	beq.n	80044fc <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
 80044e2:	f001 f91f 	bl	8005724 <k_is_in_isr>
 80044e6:	b160      	cbz	r0, 8004502 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
 80044e8:	f001 f91c 	bl	8005724 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
 80044ec:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <_SysFatalErrorHandler+0x44>)
 80044ee:	490d      	ldr	r1, [pc, #52]	; (8004524 <_SysFatalErrorHandler+0x48>)
 80044f0:	2800      	cmp	r0, #0
 80044f2:	bf08      	it	eq
 80044f4:	4619      	moveq	r1, r3
 80044f6:	480c      	ldr	r0, [pc, #48]	; (8004528 <_SysFatalErrorHandler+0x4c>)
 80044f8:	f7fe ff16 	bl	8003328 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
 80044fc:	f7ff ff9e 	bl	800443c <k_cpu_idle>
 8004500:	e7fc      	b.n	80044fc <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
 8004502:	f001 f91f 	bl	8005744 <_is_thread_essential>
 8004506:	2800      	cmp	r0, #0
 8004508:	d1ee      	bne.n	80044e8 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
 800450a:	4c08      	ldr	r4, [pc, #32]	; (800452c <_SysFatalErrorHandler+0x50>)
 800450c:	4808      	ldr	r0, [pc, #32]	; (8004530 <_SysFatalErrorHandler+0x54>)
 800450e:	68a1      	ldr	r1, [r4, #8]
 8004510:	f7fe ff0a 	bl	8003328 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
 8004514:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
 8004516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800451a:	f000 b80b 	b.w	8004534 <_impl_k_thread_abort>
 800451e:	bf00      	nop
 8004520:	08006634 	.word	0x08006634
 8004524:	08006630 	.word	0x08006630
 8004528:	08006645 	.word	0x08006645
 800452c:	200002f0 	.word	0x200002f0
 8004530:	08006665 	.word	0x08006665

08004534 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	4605      	mov	r5, r0
	__asm__ volatile(
 8004538:	f04f 0310 	mov.w	r3, #16
 800453c:	f3ef 8411 	mrs	r4, BASEPRI
 8004540:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
 8004544:	f001 f938 	bl	80057b8 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <_impl_k_thread_abort+0x40>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	429d      	cmp	r5, r3
 800454e:	d10b      	bne.n	8004568 <_impl_k_thread_abort+0x34>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
 8004550:	4b09      	ldr	r3, [pc, #36]	; (8004578 <_impl_k_thread_abort+0x44>)
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004558:	b912      	cbnz	r2, 8004560 <_impl_k_thread_abort+0x2c>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
 800455a:	4620      	mov	r0, r4
 800455c:	f7ff fd8a 	bl	8004074 <__swap>
			(void)_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004566:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
 8004568:	4620      	mov	r0, r4
}
 800456a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
 800456e:	f000 bf01 	b.w	8005374 <_reschedule>
 8004572:	bf00      	nop
 8004574:	200002f0 	.word	0x200002f0
 8004578:	e000ed00 	.word	0xe000ed00

0800457c <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
 800457c:	b500      	push	{lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
#endif

	mrs r0, IPSR	/* get exception number */
 800457e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8004582:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8004586:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
 800458a:	4904      	ldr	r1, [pc, #16]	; (800459c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 800458c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 800458e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
 8004590:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
 8004592:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
 8004596:	4802      	ldr	r0, [pc, #8]	; (80045a0 <_isr_wrapper+0x24>)
	bx r0
 8004598:	4700      	bx	r0
 800459a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 800459c:	08005b4c 	.word	0x08005b4c
	ldr r0, =_IntExit
 80045a0:	08004041 	.word	0x08004041

080045a4 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80045a4:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80045a6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
 80045aa:	4806      	ldr	r0, [pc, #24]	; (80045c4 <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
 80045ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 80045b0:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80045b2:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
 80045b6:	2002      	movs	r0, #2
    msr CONTROL, r0
 80045b8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
 80045bc:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
 80045c0:	f000 f806 	bl	80045d0 <_PrepC>
    ldr r0, =_interrupt_stack
 80045c4:	20000980 	.word	0x20000980

080045c8 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
 80045c8:	bf30      	wfi
    b _SysNmiOnReset
 80045ca:	f7ff bffd 	b.w	80045c8 <_SysNmiOnReset>
 80045ce:	bf00      	nop

080045d0 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
 80045d0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 80045d2:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <_PrepC+0x24>)
 80045d4:	4a08      	ldr	r2, [pc, #32]	; (80045f8 <_PrepC+0x28>)
 80045d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80045da:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80045dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80045e0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
 80045e4:	f000 fcd0 	bl	8004f88 <_bss_zero>
	_data_copy();
 80045e8:	f000 fcd8 	bl	8004f9c <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	_IntLibInit();
 80045ec:	f7ff fd36 	bl	800405c <_IntLibInit>
	_Cstart();
 80045f0:	f000 fcf8 	bl	8004fe4 <_Cstart>
 80045f4:	08000000 	.word	0x08000000
 80045f8:	e000ed00 	.word	0xe000ed00

080045fc <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
 80045fc:	b508      	push	{r3, lr}
	handler();
 80045fe:	f7ff ffe3 	bl	80045c8 <_SysNmiOnReset>
	_ExcExit();
}
 8004602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
 8004606:	f7ff bd1b 	b.w	8004040 <_ExcExit>
	...

0800460c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 800460c:	4b03      	ldr	r3, [pc, #12]	; (800461c <arm_core_mpu_enable+0x10>)
 800460e:	2205      	movs	r2, #5
 8004610:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8004612:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	4770      	bx	lr
 800461c:	e000ed90 	.word	0xe000ed90

08004620 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004620:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8004624:	4b01      	ldr	r3, [pc, #4]	; (800462c <arm_core_mpu_disable+0xc>)
 8004626:	2200      	movs	r2, #0
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	4770      	bx	lr
 800462c:	e000ed90 	.word	0xe000ed90

08004630 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
 8004630:	4912      	ldr	r1, [pc, #72]	; (800467c <arm_mpu_init+0x4c>)
{
 8004632:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
 8004634:	680c      	ldr	r4, [r1, #0]
 8004636:	2c08      	cmp	r4, #8
 8004638:	d81c      	bhi.n	8004674 <arm_mpu_init+0x44>
		return -1;
	}

	LOG_DBG("total region count: %d", _get_num_regions());

	arm_core_mpu_disable();
 800463a:	f7ff fff1 	bl	8004620 <arm_core_mpu_disable>
 *   The caller must provide a valid region index.
 */
static void _region_init(u32_t index, const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
 800463e:	4810      	ldr	r0, [pc, #64]	; (8004680 <arm_mpu_init+0x50>)
 8004640:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	_mpu_init();

	/* Configure regions */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8004642:	2200      	movs	r2, #0
 8004644:	42a2      	cmp	r2, r4
 8004646:	f101 010c 	add.w	r1, r1, #12
 800464a:	d103      	bne.n	8004654 <arm_mpu_init+0x24>
	if (size > 0) {
		_region_init(index, &region_conf);
	}
#endif

	arm_core_mpu_enable();
 800464c:	f7ff ffde 	bl	800460c <arm_core_mpu_enable>
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
 8004650:	2000      	movs	r0, #0
 8004652:	bd10      	pop	{r4, pc}
	/* Configure the region */
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8004654:	f851 3c0c 	ldr.w	r3, [r1, #-12]
	MPU->RNR = index;
 8004658:	6082      	str	r2, [r0, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800465a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 800465e:	f043 0310 	orr.w	r3, r3, #16
 8004662:	4313      	orrs	r3, r2
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8004664:	60c3      	str	r3, [r0, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8004666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	6103      	str	r3, [r0, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8004670:	3201      	adds	r2, #1
 8004672:	e7e7      	b.n	8004644 <arm_mpu_init+0x14>
		return -1;
 8004674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004678:	bd10      	pop	{r4, pc}
 800467a:	bf00      	nop
 800467c:	080061dc 	.word	0x080061dc
 8004680:	e000ed90 	.word	0xe000ed90

08004684 <_stdin_hook_default>:
}

static unsigned char _stdin_hook_default(void)
{
	return 0;
}
 8004684:	2000      	movs	r0, #0
 8004686:	4770      	bx	lr

08004688 <_stdout_hook_default>:
 8004688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800468c:	4770      	bx	lr
	...

08004690 <__stdout_hook_install>:
	_stdout_hook = hook;
 8004690:	4b01      	ldr	r3, [pc, #4]	; (8004698 <__stdout_hook_install+0x8>)
 8004692:	6018      	str	r0, [r3, #0]
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20001480 	.word	0x20001480

0800469c <_impl__zephyr_read>:
{
	_stdin_hook = hook;
}

int _impl__zephyr_read(char *buf, int nbytes)
{
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
 800469e:	4f08      	ldr	r7, [pc, #32]	; (80046c0 <_impl__zephyr_read+0x24>)
{
 80046a0:	4606      	mov	r6, r0
 80046a2:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
 80046a4:	2400      	movs	r4, #0
 80046a6:	42ac      	cmp	r4, r5
 80046a8:	da08      	bge.n	80046bc <_impl__zephyr_read+0x20>
		*(buf + i) = _stdin_hook();
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 80046ae:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
 80046b0:	5530      	strb	r0, [r6, r4]
 80046b2:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 80046b6:	d001      	beq.n	80046bc <_impl__zephyr_read+0x20>
 80046b8:	280d      	cmp	r0, #13
 80046ba:	d1f4      	bne.n	80046a6 <_impl__zephyr_read+0xa>
			i++;
			break;
		}
	}
	return i;
}
 80046bc:	4620      	mov	r0, r4
 80046be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046c0:	2000147c 	.word	0x2000147c

080046c4 <_impl__zephyr_write>:
	return _impl__zephyr_read((char *)buf, nbytes);
}
#endif

int _impl__zephyr_write(const void *buffer, int nbytes)
{
 80046c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c6:	4f0a      	ldr	r7, [pc, #40]	; (80046f0 <_impl__zephyr_write+0x2c>)
 80046c8:	4606      	mov	r6, r0
 80046ca:	460d      	mov	r5, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 80046cc:	4604      	mov	r4, r0
 80046ce:	1ba3      	subs	r3, r4, r6
 80046d0:	429d      	cmp	r5, r3
 80046d2:	dc01      	bgt.n	80046d8 <_impl__zephyr_write+0x14>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
 80046d4:	4628      	mov	r0, r5
 80046d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
 80046d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80046dc:	2b0a      	cmp	r3, #10
 80046de:	d102      	bne.n	80046e6 <_impl__zephyr_write+0x22>
			_stdout_hook('\r');
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	200d      	movs	r0, #13
 80046e4:	4798      	blx	r3
		_stdout_hook(*(buf + i));
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
 80046ec:	4798      	blx	r3
 80046ee:	e7ee      	b.n	80046ce <_impl__zephyr_write+0xa>
 80046f0:	20001480 	.word	0x20001480

080046f4 <_read>:
}
#endif

#ifndef CONFIG_POSIX_API
int _read(int fd, char *buf, int nbytes)
{
 80046f4:	4608      	mov	r0, r1

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE2(K_SYSCALL__ZEPHYR_READ, _zephyr_read, int, char *, buf, int, nbytes)
 80046f6:	4611      	mov	r1, r2
 80046f8:	f7ff bfd0 	b.w	800469c <_impl__zephyr_read>

080046fc <_write>:
	return _zephyr_read(buf, nbytes);
}
FUNC_ALIAS(_read, read, int);

int _write(int fd, const void *buf, int nbytes)
{
 80046fc:	4608      	mov	r0, r1

K_SYSCALL_DECLARE2(K_SYSCALL__ZEPHYR_WRITE, _zephyr_write, int, const void *, buf, int, nbytes)
 80046fe:	4611      	mov	r1, r2
 8004700:	f7ff bfe0 	b.w	80046c4 <_impl__zephyr_write>

08004704 <_close>:
FUNC_ALIAS(_open, open, int);

int _close(int file)
{
	return -1;
}
 8004704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004708:	4770      	bx	lr

0800470a <_lseek>:
FUNC_ALIAS(_close, close, int);

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800470a:	2000      	movs	r0, #0
 800470c:	4770      	bx	lr
	...

08004710 <_sbrk>:
	}
}

void *_sbrk(int count)
{
	void *ptr = heap_base + heap_sz;
 8004710:	4907      	ldr	r1, [pc, #28]	; (8004730 <_sbrk+0x20>)
 8004712:	680b      	ldr	r3, [r1, #0]
{
 8004714:	b510      	push	{r4, lr}

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 8004716:	18c4      	adds	r4, r0, r3
 8004718:	4806      	ldr	r0, [pc, #24]	; (8004734 <_sbrk+0x24>)
 800471a:	f1c0 5200 	rsb	r2, r0, #536870912	; 0x20000000
 800471e:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
 8004722:	4294      	cmp	r4, r2
	void *ptr = heap_base + heap_sz;
 8004724:	bf3a      	itte	cc
 8004726:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
 8004728:	600c      	strcc	r4, [r1, #0]
		return ptr;
	} else {
		return (void *)-1;
 800472a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}
}
 800472e:	bd10      	pop	{r4, pc}
 8004730:	20000188 	.word	0x20000188
 8004734:	200015ac 	.word	0x200015ac

08004738 <pinmux_stm32_init>:
	{STM32_PIN_PA12, STM32L4X_PINMUX_FUNC_PA12_OTG_FS_DP},
#endif	/* CONFIG_USB_DC_STM */
};

static int pinmux_stm32_init(struct device *port)
{
 8004738:	b508      	push	{r3, lr}
	ARG_UNUSED(port);

	stm32_setup_pins(pinconf, ARRAY_SIZE(pinconf));
 800473a:	2104      	movs	r1, #4
 800473c:	4802      	ldr	r0, [pc, #8]	; (8004748 <pinmux_stm32_init+0x10>)
 800473e:	f7ff fba5 	bl	8003e8c <stm32_setup_pins>

	return 0;
}
 8004742:	2000      	movs	r0, #0
 8004744:	bd08      	pop	{r3, pc}
 8004746:	bf00      	nop
 8004748:	0800668c 	.word	0x0800668c

0800474c <gpio_stm32_isr>:
 * @brief EXTI interrupt callback
 */
static void gpio_stm32_isr(int line, void *arg)
{
	struct device *dev = arg;
	struct gpio_stm32_data *data = dev->driver_data;
 800474c:	688a      	ldr	r2, [r1, #8]

	if (BIT(line) & data->cb_pins) {
 800474e:	6813      	ldr	r3, [r2, #0]
 8004750:	40c3      	lsrs	r3, r0
 8004752:	07db      	lsls	r3, r3, #31
{
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	460e      	mov	r6, r1
	if (BIT(line) & data->cb_pins) {
 8004758:	d50d      	bpl.n	8004776 <gpio_stm32_isr+0x2a>
		_gpio_fire_callbacks(&data->cb, dev, BIT(line));
 800475a:	2501      	movs	r5, #1
 800475c:	6854      	ldr	r4, [r2, #4]
 800475e:	4085      	lsls	r5, r0
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
 8004760:	b14c      	cbz	r4, 8004776 <gpio_stm32_isr+0x2a>
		if (cb->pin_mask & pins) {
 8004762:	68a3      	ldr	r3, [r4, #8]
 8004764:	421d      	tst	r5, r3
 8004766:	d004      	beq.n	8004772 <gpio_stm32_isr+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
 8004768:	6863      	ldr	r3, [r4, #4]
 800476a:	462a      	mov	r2, r5
 800476c:	4621      	mov	r1, r4
 800476e:	4630      	mov	r0, r6
 8004770:	4798      	blx	r3

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
 8004772:	6824      	ldr	r4, [r4, #0]
 8004774:	e7f4      	b.n	8004760 <gpio_stm32_isr+0x14>
 8004776:	bd70      	pop	{r4, r5, r6, pc}

08004778 <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
	struct gpio_stm32_data *data = dev->driver_data;
 8004778:	6883      	ldr	r3, [r0, #8]
 800477a:	6858      	ldr	r0, [r3, #4]
	if (set) {
 800477c:	b172      	cbz	r2, 800479c <gpio_stm32_manage_callback+0x24>
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
 800477e:	6008      	str	r0, [r1, #0]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node);

Z_GENLIST_PREPEND(slist, snode)
 8004780:	689a      	ldr	r2, [r3, #8]
	list->head = node;
 8004782:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 8004784:	b902      	cbnz	r2, 8004788 <gpio_stm32_manage_callback+0x10>
	list->tail = node;
 8004786:	6099      	str	r1, [r3, #8]

	_gpio_manage_callback(&data->cb, callback, set);

	return 0;
}
 8004788:	2000      	movs	r0, #0
 800478a:	4770      	bx	lr
	parent->next = child;
 800478c:	6010      	str	r0, [r2, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 800478e:	6898      	ldr	r0, [r3, #8]
 8004790:	4281      	cmp	r1, r0
	list->tail = node;
 8004792:	bf08      	it	eq
 8004794:	609a      	streq	r2, [r3, #8]
 8004796:	e00d      	b.n	80047b4 <gpio_stm32_manage_callback+0x3c>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8004798:	4602      	mov	r2, r0
 800479a:	6800      	ldr	r0, [r0, #0]
 800479c:	2800      	cmp	r0, #0
 800479e:	d0f3      	beq.n	8004788 <gpio_stm32_manage_callback+0x10>
 80047a0:	4281      	cmp	r1, r0
 80047a2:	d1f9      	bne.n	8004798 <gpio_stm32_manage_callback+0x20>
 80047a4:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 80047a6:	2a00      	cmp	r2, #0
 80047a8:	d1f0      	bne.n	800478c <gpio_stm32_manage_callback+0x14>
 80047aa:	689a      	ldr	r2, [r3, #8]
	list->head = node;
 80047ac:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 80047ae:	4291      	cmp	r1, r2
 80047b0:	d100      	bne.n	80047b4 <gpio_stm32_manage_callback+0x3c>
	list->tail = node;
 80047b2:	6098      	str	r0, [r3, #8]
	parent->next = child;
 80047b4:	2300      	movs	r3, #0
 80047b6:	600b      	str	r3, [r1, #0]
 80047b8:	e7e6      	b.n	8004788 <gpio_stm32_manage_callback+0x10>

080047ba <gpio_stm32_enable_callback>:

static int gpio_stm32_enable_callback(struct device *dev,
				      int access_op, u32_t pin)
{
	struct gpio_stm32_data *data = dev->driver_data;
 80047ba:	6880      	ldr	r0, [r0, #8]

	if (access_op != GPIO_ACCESS_BY_PIN) {
 80047bc:	b939      	cbnz	r1, 80047ce <gpio_stm32_enable_callback+0x14>
		return -ENOTSUP;
	}

	data->cb_pins |= BIT(pin);
 80047be:	2301      	movs	r3, #1
 80047c0:	fa03 f202 	lsl.w	r2, r3, r2
 80047c4:	6803      	ldr	r3, [r0, #0]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	6003      	str	r3, [r0, #0]

	return 0;
}
 80047ca:	4608      	mov	r0, r1
 80047cc:	4770      	bx	lr
		return -ENOTSUP;
 80047ce:	f06f 0185 	mvn.w	r1, #133	; 0x85
 80047d2:	e7fa      	b.n	80047ca <gpio_stm32_enable_callback+0x10>

080047d4 <gpio_stm32_disable_callback>:

static int gpio_stm32_disable_callback(struct device *dev,
				       int access_op, u32_t pin)
{
	struct gpio_stm32_data *data = dev->driver_data;
 80047d4:	6880      	ldr	r0, [r0, #8]

	if (access_op != GPIO_ACCESS_BY_PIN) {
 80047d6:	b941      	cbnz	r1, 80047ea <gpio_stm32_disable_callback+0x16>
		return -ENOTSUP;
	}

	data->cb_pins &= ~BIT(pin);
 80047d8:	2301      	movs	r3, #1
 80047da:	fa03 f202 	lsl.w	r2, r3, r2
 80047de:	6803      	ldr	r3, [r0, #0]
 80047e0:	ea23 0302 	bic.w	r3, r3, r2
 80047e4:	6003      	str	r3, [r0, #0]

	return 0;
}
 80047e6:	4608      	mov	r0, r1
 80047e8:	4770      	bx	lr
		return -ENOTSUP;
 80047ea:	f06f 0185 	mvn.w	r1, #133	; 0x85
 80047ee:	e7fa      	b.n	80047e6 <gpio_stm32_disable_callback+0x12>

080047f0 <gpio_stm32_init>:
 *
 * @return 0
 */
static int gpio_stm32_init(struct device *device)
{
	const struct gpio_stm32_config *cfg = device->config->config_info;
 80047f0:	6803      	ldr	r3, [r0, #0]
 80047f2:	4807      	ldr	r0, [pc, #28]	; (8004810 <gpio_stm32_init+0x20>)
{
 80047f4:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = device->config->config_info;
 80047f6:	689c      	ldr	r4, [r3, #8]
 80047f8:	f000 fba0 	bl	8004f3c <_impl_device_get_binding>
 80047fc:	6843      	ldr	r3, [r0, #4]
 80047fe:	f104 0108 	add.w	r1, r4, #8
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4798      	blx	r3

	/* enable clock for subsystem */
	struct device *clk =
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	if (clock_control_on(clk,
 8004806:	2800      	cmp	r0, #0
		(clock_control_subsys_t *) &cfg->pclken) != 0) {
		return -EIO;
	}

	return 0;
}
 8004808:	bf18      	it	ne
 800480a:	f06f 0004 	mvnne.w	r0, #4
 800480e:	bd10      	pop	{r4, pc}
 8004810:	080061d2 	.word	0x080061d2

08004814 <gpio_stm32_read>:
{
 8004814:	b538      	push	{r3, r4, r5, lr}
 8004816:	461d      	mov	r5, r3
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8004818:	6803      	ldr	r3, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 800481a:	460c      	mov	r4, r1
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 800481c:	689b      	ldr	r3, [r3, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 800481e:	b931      	cbnz	r1, 800482e <gpio_stm32_read+0x1a>
	*value = stm32_gpio_get(cfg->base, pin);
 8004820:	4611      	mov	r1, r2
 8004822:	6818      	ldr	r0, [r3, #0]
 8004824:	f7fe fe17 	bl	8003456 <stm32_gpio_get>
 8004828:	6028      	str	r0, [r5, #0]
}
 800482a:	4620      	mov	r0, r4
 800482c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
 800482e:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8004832:	e7fa      	b.n	800482a <gpio_stm32_read+0x16>

08004834 <gpio_stm32_write>:
{
 8004834:	b410      	push	{r4}
 8004836:	4614      	mov	r4, r2
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8004838:	6802      	ldr	r2, [r0, #0]
 800483a:	6890      	ldr	r0, [r2, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 800483c:	b929      	cbnz	r1, 800484a <gpio_stm32_write+0x16>
	return stm32_gpio_set(cfg->base, pin, value);
 800483e:	4621      	mov	r1, r4
 8004840:	461a      	mov	r2, r3
 8004842:	6800      	ldr	r0, [r0, #0]
}
 8004844:	bc10      	pop	{r4}
	return stm32_gpio_set(cfg->base, pin, value);
 8004846:	f7fe bdf8 	b.w	800343a <stm32_gpio_set>
}
 800484a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800484e:	bc10      	pop	{r4}
 8004850:	4770      	bx	lr
	...

08004854 <gpio_stm32_config>:
{
 8004854:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004858:	461d      	mov	r5, r3
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 800485a:	6803      	ldr	r3, [r0, #0]
{
 800485c:	4680      	mov	r8, r0
 800485e:	4616      	mov	r6, r2
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8004860:	689f      	ldr	r7, [r3, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8004862:	bb81      	cbnz	r1, 80048c6 <gpio_stm32_config+0x72>
	map_res = stm32_gpio_flags_to_conf(flags, &pincfg);
 8004864:	a901      	add	r1, sp, #4
 8004866:	4628      	mov	r0, r5
 8004868:	f7fe fd84 	bl	8003374 <stm32_gpio_flags_to_conf>
	if (map_res) {
 800486c:	4604      	mov	r4, r0
 800486e:	bb20      	cbnz	r0, 80048ba <gpio_stm32_config+0x66>
	if (stm32_gpio_configure(cfg->base, pin, pincfg, 0)) {
 8004870:	4603      	mov	r3, r0
 8004872:	9a01      	ldr	r2, [sp, #4]
 8004874:	6838      	ldr	r0, [r7, #0]
 8004876:	4631      	mov	r1, r6
 8004878:	f7fe fd99 	bl	80033ae <stm32_gpio_configure>
 800487c:	bb30      	cbnz	r0, 80048cc <gpio_stm32_config+0x78>
	if (flags & GPIO_INT) {
 800487e:	f015 0402 	ands.w	r4, r5, #2
 8004882:	d01a      	beq.n	80048ba <gpio_stm32_config+0x66>
		if (stm32_exti_set_callback(pin, cfg->port,
 8004884:	4643      	mov	r3, r8
 8004886:	4a14      	ldr	r2, [pc, #80]	; (80048d8 <gpio_stm32_config+0x84>)
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	4630      	mov	r0, r6
 800488c:	f7ff f9ea 	bl	8003c64 <stm32_exti_set_callback>
 8004890:	4604      	mov	r4, r0
 8004892:	b9f0      	cbnz	r0, 80048d2 <gpio_stm32_config+0x7e>
		stm32_gpio_enable_int(cfg->port, pin);
 8004894:	4631      	mov	r1, r6
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fe fde2 	bl	8003460 <stm32_gpio_enable_int>
		if (flags & GPIO_INT_EDGE) {
 800489c:	06aa      	lsls	r2, r5, #26
 800489e:	d509      	bpl.n	80048b4 <gpio_stm32_config+0x60>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
 80048a0:	066b      	lsls	r3, r5, #25
 80048a2:	d40e      	bmi.n	80048c2 <gpio_stm32_config+0x6e>
				edge = STM32_EXTI_TRIG_FALLING;
 80048a4:	f015 0f04 	tst.w	r5, #4
 80048a8:	bf14      	ite	ne
 80048aa:	2101      	movne	r1, #1
 80048ac:	2102      	moveq	r1, #2
			stm32_exti_trigger(pin, edge);
 80048ae:	4630      	mov	r0, r6
 80048b0:	f7ff f9be 	bl	8003c30 <stm32_exti_trigger>
		stm32_exti_enable(pin);
 80048b4:	4630      	mov	r0, r6
 80048b6:	f7ff f99b 	bl	8003bf0 <stm32_exti_enable>
}
 80048ba:	4620      	mov	r0, r4
 80048bc:	b002      	add	sp, #8
 80048be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				edge = STM32_EXTI_TRIG_RISING |
 80048c2:	2103      	movs	r1, #3
 80048c4:	e7f3      	b.n	80048ae <gpio_stm32_config+0x5a>
		return -ENOTSUP;
 80048c6:	f06f 0485 	mvn.w	r4, #133	; 0x85
 80048ca:	e7f6      	b.n	80048ba <gpio_stm32_config+0x66>
		return -EIO;
 80048cc:	f06f 0404 	mvn.w	r4, #4
 80048d0:	e7f3      	b.n	80048ba <gpio_stm32_config+0x66>
			return -EBUSY;
 80048d2:	f06f 040f 	mvn.w	r4, #15
 80048d6:	e7f0      	b.n	80048ba <gpio_stm32_config+0x66>
 80048d8:	0800474d 	.word	0x0800474d

080048dc <rtc_stm32_disable>:
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80048dc:	4a03      	ldr	r2, [pc, #12]	; (80048ec <rtc_stm32_disable+0x10>)
 80048de:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80048e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048ea:	4770      	bx	lr
 80048ec:	40021000 	.word	0x40021000

080048f0 <rtc_stm32_get_pending_int>:
  return (READ_BIT(RTCx->ISR, RTC_ISR_ALRAF) == (RTC_ISR_ALRAF));
 80048f0:	4b02      	ldr	r3, [pc, #8]	; (80048fc <rtc_stm32_get_pending_int+0xc>)
 80048f2:	68d8      	ldr	r0, [r3, #12]
}

static u32_t rtc_stm32_get_pending_int(struct device *dev)
{
	return LL_RTC_IsActiveFlag_ALRA(RTC) != 0;
}
 80048f4:	f3c0 2000 	ubfx	r0, r0, #8, #1
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40002800 	.word	0x40002800

08004900 <rtc_stm32_read>:
{
 8004900:	b510      	push	{r4, lr}
 8004902:	b08a      	sub	sp, #40	; 0x28
	struct tm now = { 0 };
 8004904:	2224      	movs	r2, #36	; 0x24
 8004906:	2100      	movs	r1, #0
 8004908:	a801      	add	r0, sp, #4
 800490a:	f7fb ff65 	bl	80007d8 <memset>
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU));
 800490e:	4b34      	ldr	r3, [pc, #208]	; (80049e0 <rtc_stm32_read+0xe0>)
 8004910:	4834      	ldr	r0, [pc, #208]	; (80049e4 <rtc_stm32_read+0xe4>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	4010      	ands	r0, r2
  return (uint32_t)((((((temp & RTC_TR_HT) >> RTC_TR_HT_Pos) << 4U) | ((temp & RTC_TR_HU) >> RTC_TR_HU_Pos)) << RTC_OFFSET_HOUR) |  \
 8004916:	f400 117c 	and.w	r1, r0, #4128768	; 0x3f0000
                    (((((temp & RTC_TR_MNT) >> RTC_TR_MNT_Pos) << 4U) | ((temp & RTC_TR_MNU) >> RTC_TR_MNU_Pos)) << RTC_OFFSET_MINUTE) | \
 800491a:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
  return (uint32_t)((((((temp & RTC_TR_HT) >> RTC_TR_HT_Pos) << 4U) | ((temp & RTC_TR_HU) >> RTC_TR_HU_Pos)) << RTC_OFFSET_HOUR) |  \
 800491e:	4308      	orrs	r0, r1
                    ((((temp & RTC_TR_ST) >> RTC_TR_ST_Pos) << 4U) | ((temp & RTC_TR_SU) >> RTC_TR_SU_Pos)));
 8004920:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  return (uint32_t)((((((temp & RTC_TR_HT) >> RTC_TR_HT_Pos) << 4U) | ((temp & RTC_TR_HU) >> RTC_TR_HU_Pos)) << RTC_OFFSET_HOUR) |  \
 8004924:	ea40 0102 	orr.w	r1, r0, r2
  temp = READ_BIT(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU));
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800492e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
                    (((((temp & RTC_DR_DT) >> RTC_DR_DT_Pos) << 4U) | ((temp & RTC_DR_DU) >> RTC_DR_DU_Pos)) << RTC_OFFSET_DAY) | \
 8004932:	0413      	lsls	r3, r2, #16
                    ((((temp & RTC_DR_YT) >> RTC_DR_YT_Pos) << 4U) | ((temp & RTC_DR_YU) >> RTC_DR_YU_Pos)));
 8004934:	0d10      	lsrs	r0, r2, #20
                    (((((temp & RTC_DR_DT) >> RTC_DR_DT_Pos) << 4U) | ((temp & RTC_DR_DU) >> RTC_DR_DU_Pos)) << RTC_OFFSET_DAY) | \
 8004936:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
  return (uint32_t)((((temp & RTC_DR_WDU) >> RTC_DR_WDU_Pos) << RTC_OFFSET_WEEKDAY) | \
 800493a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
                    ((((temp & RTC_DR_YT) >> RTC_DR_YT_Pos) << 4U) | ((temp & RTC_DR_YU) >> RTC_DR_YU_Pos)));
 800493e:	f3c2 4003 	ubfx	r0, r2, #16, #4
  return (uint32_t)((((temp & RTC_DR_WDU) >> RTC_DR_WDU_Pos) << RTC_OFFSET_WEEKDAY) | \
 8004942:	4303      	orrs	r3, r0
 8004944:	02d0      	lsls	r0, r2, #11
 8004946:	f000 60e0 	and.w	r0, r0, #117440512	; 0x7000000
 800494a:	4303      	orrs	r3, r0
                    (((((temp & RTC_DR_MT) >> RTC_DR_MT_Pos) << 4U) | ((temp & RTC_DR_MU) >> RTC_DR_MU_Pos)) << RTC_OFFSET_MONTH) | \
 800494c:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
  return (uint32_t)((((temp & RTC_DR_WDU) >> RTC_DR_WDU_Pos) << RTC_OFFSET_WEEKDAY) | \
 8004950:	4313      	orrs	r3, r2
	now.tm_year = 100 + __LL_RTC_CONVERT_BCD2BIN(
 8004952:	b2da      	uxtb	r2, r3
 8004954:	0910      	lsrs	r0, r2, #4
 8004956:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800495a:	f002 020f 	and.w	r2, r2, #15
 800495e:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	3264      	adds	r2, #100	; 0x64
 8004966:	9206      	str	r2, [sp, #24]
	now.tm_mon = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_MONTH(rtc_date));
 8004968:	f3c3 2204 	ubfx	r2, r3, #8, #5
 800496c:	0910      	lsrs	r0, r2, #4
 800496e:	0084      	lsls	r4, r0, #2
 8004970:	4420      	add	r0, r4
 8004972:	f002 020f 	and.w	r2, r2, #15
 8004976:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800497a:	9205      	str	r2, [sp, #20]
	now.tm_mday = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_DAY(rtc_date));
 800497c:	f3c3 4205 	ubfx	r2, r3, #16, #6
 8004980:	0913      	lsrs	r3, r2, #4
 8004982:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004986:	f002 020f 	and.w	r2, r2, #15
 800498a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
	now.tm_hour = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_HOUR(rtc_time));
 800498e:	0c0b      	lsrs	r3, r1, #16
	now.tm_mday = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_DAY(rtc_date));
 8004990:	9204      	str	r2, [sp, #16]
	now.tm_hour = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_HOUR(rtc_time));
 8004992:	091a      	lsrs	r2, r3, #4
 8004994:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80049a0:	9303      	str	r3, [sp, #12]
	now.tm_min = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_MINUTE(rtc_time));
 80049a2:	f3c1 2306 	ubfx	r3, r1, #8, #7
 80049a6:	091a      	lsrs	r2, r3, #4
 80049a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80049ac:	f003 030f 	and.w	r3, r3, #15
 80049b0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80049b4:	9302      	str	r3, [sp, #8]
	now.tm_sec = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_SECOND(rtc_time));
 80049b6:	b2cb      	uxtb	r3, r1
 80049b8:	091a      	lsrs	r2, r3, #4
 80049ba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	ts = mktime(&now);
 80049c6:	a801      	add	r0, sp, #4
	now.tm_sec = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_SECOND(rtc_time));
 80049c8:	9301      	str	r3, [sp, #4]
	ts = mktime(&now);
 80049ca:	f7fc f857 	bl	8000a7c <mktime>
}
 80049ce:	f1a0 5061 	sub.w	r0, r0, #943718400	; 0x38400000
 80049d2:	f5a0 1035 	sub.w	r0, r0, #2965504	; 0x2d4000
 80049d6:	f5a0 7060 	sub.w	r0, r0, #896	; 0x380
 80049da:	b00a      	add	sp, #40	; 0x28
 80049dc:	bd10      	pop	{r4, pc}
 80049de:	bf00      	nop
 80049e0:	40002800 	.word	0x40002800
 80049e4:	003f7f7f 	.word	0x003f7f7f

080049e8 <rtc_stm32_set_alarm>:
{
 80049e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ea:	b091      	sub	sp, #68	; 0x44
 80049ec:	460c      	mov	r4, r1
	u32_t now = rtc_stm32_read(dev);
 80049ee:	f7ff ff87 	bl	8004900 <rtc_stm32_read>
	if ((alarm_val - now) > (RTC_ALARM_DAY * 28)) {
 80049f2:	4b22      	ldr	r3, [pc, #136]	; (8004a7c <rtc_stm32_set_alarm+0x94>)
 80049f4:	1a20      	subs	r0, r4, r0
 80049f6:	4298      	cmp	r0, r3
 80049f8:	d83a      	bhi.n	8004a70 <rtc_stm32_set_alarm+0x88>
	alarm_ts += EPOCH_OFFSET;
 80049fa:	4b21      	ldr	r3, [pc, #132]	; (8004a80 <rtc_stm32_set_alarm+0x98>)
	gmtime_r(&alarm_ts, &alarm_tm);
 80049fc:	a907      	add	r1, sp, #28
	alarm_ts += EPOCH_OFFSET;
 80049fe:	4423      	add	r3, r4
	gmtime_r(&alarm_ts, &alarm_tm);
 8004a00:	a801      	add	r0, sp, #4
	alarm_ts += EPOCH_OFFSET;
 8004a02:	9301      	str	r3, [sp, #4]
	gmtime_r(&alarm_ts, &alarm_tm);
 8004a04:	f7fb fd64 	bl	80004d0 <gmtime_r>
	rtc_alarm.AlarmTime.Hours = alarm_tm.tm_hour;
 8004a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a0a:	f88d 300c 	strb.w	r3, [sp, #12]
	rtc_alarm.AlarmTime.Minutes = alarm_tm.tm_min;
 8004a0e:	9b08      	ldr	r3, [sp, #32]
 8004a10:	f88d 300d 	strb.w	r3, [sp, #13]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8004a14:	4c1b      	ldr	r4, [pc, #108]	; (8004a84 <rtc_stm32_set_alarm+0x9c>)
	rtc_alarm.AlarmTime.Seconds = alarm_tm.tm_sec;
 8004a16:	9b07      	ldr	r3, [sp, #28]
 8004a18:	f88d 300e 	strb.w	r3, [sp, #14]
	rtc_alarm.AlarmTime.TimeFormat = LL_RTC_TIME_FORMAT_AM_OR_24;
 8004a1c:	2500      	movs	r5, #0
	rtc_alarm.AlarmDateWeekDay = alarm_tm.tm_mday;
 8004a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	rtc_alarm.AlarmTime.TimeFormat = LL_RTC_TIME_FORMAT_AM_OR_24;
 8004a20:	9502      	str	r5, [sp, #8]
 8004a22:	27ca      	movs	r7, #202	; 0xca
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8004a24:	2653      	movs	r6, #83	; 0x53
	rtc_alarm.AlarmMask = LL_RTC_ALMA_MASK_NONE;
 8004a26:	9504      	str	r5, [sp, #16]
	rtc_alarm.AlarmDateWeekDaySel = LL_RTC_ALMA_DATEWEEKDAYSEL_DATE;
 8004a28:	9505      	str	r5, [sp, #20]
	rtc_alarm.AlarmDateWeekDay = alarm_tm.tm_mday;
 8004a2a:	f88d 3018 	strb.w	r3, [sp, #24]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8004a2e:	6267      	str	r7, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8004a30:	6266      	str	r6, [r4, #36]	; 0x24
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAE);
 8004a32:	68a3      	ldr	r3, [r4, #8]
 8004a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a38:	60a3      	str	r3, [r4, #8]
	if (LL_RTC_ALMA_Init(RTC, LL_RTC_FORMAT_BIN, &rtc_alarm) != SUCCESS) {
 8004a3a:	aa02      	add	r2, sp, #8
 8004a3c:	4629      	mov	r1, r5
 8004a3e:	4620      	mov	r0, r4
 8004a40:	f7fe fd5a 	bl	80034f8 <LL_RTC_ALMA_Init>
 8004a44:	2801      	cmp	r0, #1
 8004a46:	d116      	bne.n	8004a76 <rtc_stm32_set_alarm+0x8e>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8004a48:	6267      	str	r7, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8004a4a:	6266      	str	r6, [r4, #36]	; 0x24
  SET_BIT(RTCx->CR, RTC_CR_ALRAE);
 8004a4c:	68a3      	ldr	r3, [r4, #8]
 8004a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a52:	60a3      	str	r3, [r4, #8]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_ALRAF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8004a54:	68e3      	ldr	r3, [r4, #12]
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8004a5c:	60e3      	str	r3, [r4, #12]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableIT_ALRA(RTC_TypeDef *RTCx)
{
  SET_BIT(RTCx->CR, RTC_CR_ALRAIE);
 8004a5e:	68a3      	ldr	r3, [r4, #8]
 8004a60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a64:	60a3      	str	r3, [r4, #8]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8004a66:	23ff      	movs	r3, #255	; 0xff
 8004a68:	6263      	str	r3, [r4, #36]	; 0x24
	return 0;
 8004a6a:	4628      	mov	r0, r5
}
 8004a6c:	b011      	add	sp, #68	; 0x44
 8004a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
 8004a70:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004a74:	e7fa      	b.n	8004a6c <rtc_stm32_set_alarm+0x84>
		return -EIO;
 8004a76:	f06f 0004 	mvn.w	r0, #4
 8004a7a:	e7f7      	b.n	8004a6c <rtc_stm32_set_alarm+0x84>
 8004a7c:	0024ea00 	.word	0x0024ea00
 8004a80:	386d4380 	.word	0x386d4380
 8004a84:	40002800 	.word	0x40002800

08004a88 <rtc_stm32_set_config>:
{
 8004a88:	b570      	push	{r4, r5, r6, lr}
 8004a8a:	460e      	mov	r6, r1
 8004a8c:	b08e      	sub	sp, #56	; 0x38
 8004a8e:	4605      	mov	r5, r0
	struct tm init_tm = { 0 };
 8004a90:	2224      	movs	r2, #36	; 0x24
 8004a92:	2100      	movs	r1, #0
 8004a94:	a805      	add	r0, sp, #20
 8004a96:	f7fb fe9f 	bl	80007d8 <memset>
	init_ts += EPOCH_OFFSET;
 8004a9a:	6832      	ldr	r2, [r6, #0]
 8004a9c:	4b28      	ldr	r3, [pc, #160]	; (8004b40 <rtc_stm32_set_config+0xb8>)
 8004a9e:	a80e      	add	r0, sp, #56	; 0x38
 8004aa0:	4413      	add	r3, r2
	LL_RTC_DateTypeDef rtc_date = { 0 };
 8004aa2:	2400      	movs	r4, #0
	init_ts += EPOCH_OFFSET;
 8004aa4:	f840 3d34 	str.w	r3, [r0, #-52]!
	gmtime_r(&init_ts, &init_tm);
 8004aa8:	a905      	add	r1, sp, #20
	LL_RTC_DateTypeDef rtc_date = { 0 };
 8004aaa:	9402      	str	r4, [sp, #8]
	LL_RTC_TimeTypeDef rtc_time = { 0 };
 8004aac:	9403      	str	r4, [sp, #12]
 8004aae:	9404      	str	r4, [sp, #16]
	gmtime_r(&init_ts, &init_tm);
 8004ab0:	f7fb fd0e 	bl	80004d0 <gmtime_r>
	rtc_date.Year = init_tm.tm_year % 100;
 8004ab4:	990a      	ldr	r1, [sp, #40]	; 0x28
	k_sem_take(DEV_SEM(dev), K_FOREVER);
 8004ab6:	68a8      	ldr	r0, [r5, #8]
	rtc_time.TimeFormat = LL_RTC_TIME_FORMAT_AM_OR_24;
 8004ab8:	9403      	str	r4, [sp, #12]
	rtc_date.Year = init_tm.tm_year % 100;
 8004aba:	2264      	movs	r2, #100	; 0x64
 8004abc:	fb91 f3f2 	sdiv	r3, r1, r2
 8004ac0:	fb02 1313 	mls	r3, r2, r3, r1
 8004ac4:	f88d 300b 	strb.w	r3, [sp, #11]
	rtc_date.Month = init_tm.tm_mon;
 8004ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aca:	f88d 3009 	strb.w	r3, [sp, #9]
	rtc_date.Day = init_tm.tm_mday;
 8004ace:	9b08      	ldr	r3, [sp, #32]
 8004ad0:	f88d 300a 	strb.w	r3, [sp, #10]
	rtc_date.WeekDay = init_tm.tm_wday + 1;
 8004ad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	f88d 3008 	strb.w	r3, [sp, #8]
	rtc_time.Hours = init_tm.tm_hour;
 8004adc:	9b07      	ldr	r3, [sp, #28]
 8004ade:	f88d 3010 	strb.w	r3, [sp, #16]
	rtc_time.Minutes = init_tm.tm_min;
 8004ae2:	9b06      	ldr	r3, [sp, #24]
 8004ae4:	f88d 3011 	strb.w	r3, [sp, #17]
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
 8004ae8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	rtc_time.Seconds = init_tm.tm_sec;
 8004aec:	9b05      	ldr	r3, [sp, #20]
 8004aee:	f88d 3012 	strb.w	r3, [sp, #18]
 8004af2:	3004      	adds	r0, #4
 8004af4:	f000 fdd9 	bl	80056aa <_impl_k_sem_take>
	if (cfg->cb_fn != NULL) {
 8004af8:	68f3      	ldr	r3, [r6, #12]
 8004afa:	b10b      	cbz	r3, 8004b00 <rtc_stm32_set_config+0x78>
		DEV_DATA(dev)->cb_fn = cfg->cb_fn;
 8004afc:	68aa      	ldr	r2, [r5, #8]
 8004afe:	6013      	str	r3, [r2, #0]
	if (LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &rtc_date) != SUCCESS) {
 8004b00:	aa02      	add	r2, sp, #8
 8004b02:	2100      	movs	r1, #0
 8004b04:	480f      	ldr	r0, [pc, #60]	; (8004b44 <rtc_stm32_set_config+0xbc>)
 8004b06:	f7fe fe77 	bl	80037f8 <LL_RTC_DATE_Init>
 8004b0a:	2801      	cmp	r0, #1
 8004b0c:	d008      	beq.n	8004b20 <rtc_stm32_set_config+0x98>
		result = -EIO;
 8004b0e:	f06f 0404 	mvn.w	r4, #4
	k_sem_give(DEV_SEM(dev));
 8004b12:	68a8      	ldr	r0, [r5, #8]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
 8004b14:	3004      	adds	r0, #4
 8004b16:	f000 fda6 	bl	8005666 <_impl_k_sem_give>
}
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	b00e      	add	sp, #56	; 0x38
 8004b1e:	bd70      	pop	{r4, r5, r6, pc}
	if (LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &rtc_time) != SUCCESS) {
 8004b20:	aa03      	add	r2, sp, #12
 8004b22:	2100      	movs	r1, #0
 8004b24:	4807      	ldr	r0, [pc, #28]	; (8004b44 <rtc_stm32_set_config+0xbc>)
 8004b26:	f7fe fe13 	bl	8003750 <LL_RTC_TIME_Init>
 8004b2a:	2801      	cmp	r0, #1
 8004b2c:	d1ef      	bne.n	8004b0e <rtc_stm32_set_config+0x86>
	if (cfg->alarm_enable) {
 8004b2e:	7934      	ldrb	r4, [r6, #4]
 8004b30:	2c00      	cmp	r4, #0
 8004b32:	d0ee      	beq.n	8004b12 <rtc_stm32_set_config+0x8a>
		rtc_stm32_set_alarm(dev, cfg->alarm_val);
 8004b34:	68b1      	ldr	r1, [r6, #8]
 8004b36:	4628      	mov	r0, r5
 8004b38:	f7ff ff56 	bl	80049e8 <rtc_stm32_set_alarm>
	int result = 0;
 8004b3c:	2400      	movs	r4, #0
 8004b3e:	e7e8      	b.n	8004b12 <rtc_stm32_set_config+0x8a>
 8004b40:	386d4380 	.word	0x386d4380
 8004b44:	40002800 	.word	0x40002800

08004b48 <rtc_stm32_init>:

	LL_EXTI_ClearFlag_0_31(EXTI_LINE);
}

static int rtc_stm32_init(struct device *dev)
{
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	4833      	ldr	r0, [pc, #204]	; (8004c1c <rtc_stm32_init+0xd4>)
 8004b4e:	f000 f9f5 	bl	8004f3c <_impl_device_get_binding>
 8004b52:	4605      	mov	r5, r0
	struct device *clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	const struct rtc_stm32_config *cfg = DEV_CFG(dev);

	__ASSERT_NO_MSG(clk);

	k_sem_init(DEV_SEM(dev), 1, UINT_MAX);
 8004b54:	68a0      	ldr	r0, [r4, #8]
	const struct rtc_stm32_config *cfg = DEV_CFG(dev);
 8004b56:	6823      	ldr	r3, [r4, #0]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
 8004b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	3004      	adds	r0, #4
 8004b60:	689e      	ldr	r6, [r3, #8]
 8004b62:	f000 fd7b 	bl	800565c <_impl_k_sem_init>
	DEV_DATA(dev)->cb_fn = NULL;
 8004b66:	68a3      	ldr	r3, [r4, #8]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	686b      	ldr	r3, [r5, #4]
 8004b6e:	4628      	mov	r0, r5
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4631      	mov	r1, r6
 8004b74:	4798      	blx	r3

	if (clock_control_on(clk,
 8004b76:	4605      	mov	r5, r0
 8004b78:	b118      	cbz	r0, 8004b82 <rtc_stm32_init+0x3a>
		(clock_control_subsys_t *) &cfg->pclken) != 0) {
		return -EIO;
 8004b7a:	f06f 0504 	mvn.w	r5, #4
	LL_EXTI_EnableRisingTrig_0_31(EXTI_LINE);

	rtc_stm32_irq_config(dev);

	return 0;
}
 8004b7e:	4628      	mov	r0, r5
 8004b80:	bd70      	pop	{r4, r5, r6, pc}
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b82:	4a27      	ldr	r2, [pc, #156]	; (8004c20 <rtc_stm32_init+0xd8>)
 8004b84:	6813      	ldr	r3, [r2, #0]
 8004b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b8a:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004b8c:	4b25      	ldr	r3, [pc, #148]	; (8004c24 <rtc_stm32_init+0xdc>)
 8004b8e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004b92:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004b9a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004b9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ba2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004ba6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004baa:	f042 0201 	orr.w	r2, r2, #1
 8004bae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 8004bb2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004bb6:	0792      	lsls	r2, r2, #30
 8004bb8:	d5fb      	bpl.n	8004bb2 <rtc_stm32_init+0x6a>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004bba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	if (LL_RTC_DeInit(RTC) != SUCCESS) {
 8004bbe:	4c1a      	ldr	r4, [pc, #104]	; (8004c28 <rtc_stm32_init+0xe0>)
 8004bc0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8004bcc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004bd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f7fe fd91 	bl	8003700 <LL_RTC_DeInit>
 8004bde:	2801      	cmp	r0, #1
 8004be0:	d1cb      	bne.n	8004b7a <rtc_stm32_init+0x32>
	if (LL_RTC_Init(RTC, ((LL_RTC_InitTypeDef *)
 8004be2:	f106 0108 	add.w	r1, r6, #8
 8004be6:	4620      	mov	r0, r4
 8004be8:	f7fe fd20 	bl	800362c <LL_RTC_Init>
 8004bec:	2801      	cmp	r0, #1
 8004bee:	d1c4      	bne.n	8004b7a <rtc_stm32_init+0x32>
  SET_BIT(RTCx->CR, RTC_CR_BYPSHAD);
 8004bf0:	68a3      	ldr	r3, [r4, #8]
 8004bf2:	f043 0320 	orr.w	r3, r3, #32
 8004bf6:	60a3      	str	r3, [r4, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004bf8:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <rtc_stm32_init+0xe4>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004c00:	601a      	str	r2, [r3, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004c08:	609a      	str	r2, [r3, #8]
		    &rtc_data, &rtc_config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE, &rtc_api);

static void rtc_stm32_irq_config(struct device *dev)
{
	IRQ_CONNECT(DT_RTC_0_IRQ, CONFIG_RTC_0_IRQ_PRI,
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	2029      	movs	r0, #41	; 0x29
 8004c10:	f7ff fbcc 	bl	80043ac <_irq_priority_set>
		    rtc_stm32_isr, DEVICE_GET(rtc_stm32), 0);
	irq_enable(DT_RTC_0_IRQ);
 8004c14:	2029      	movs	r0, #41	; 0x29
 8004c16:	f7ff fbb9 	bl	800438c <_arch_irq_enable>
 8004c1a:	e7b0      	b.n	8004b7e <rtc_stm32_init+0x36>
 8004c1c:	080061d2 	.word	0x080061d2
 8004c20:	40007000 	.word	0x40007000
 8004c24:	40021000 	.word	0x40021000
 8004c28:	40002800 	.word	0x40002800
 8004c2c:	40010400 	.word	0x40010400

08004c30 <rtc_stm32_enable>:
 8004c30:	4a03      	ldr	r2, [pc, #12]	; (8004c40 <rtc_stm32_enable+0x10>)
 8004c32:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c3e:	4770      	bx	lr
 8004c40:	40021000 	.word	0x40021000

08004c44 <rtc_stm32_isr>:
{
 8004c44:	b510      	push	{r4, lr}
  return (READ_BIT(RTCx->ISR, RTC_ISR_ALRAF) == (RTC_ISR_ALRAF));
 8004c46:	4c0b      	ldr	r4, [pc, #44]	; (8004c74 <rtc_stm32_isr+0x30>)
 8004c48:	68e2      	ldr	r2, [r4, #12]
	if (LL_RTC_IsActiveFlag_ALRA(RTC) != 0) {
 8004c4a:	05d2      	lsls	r2, r2, #23
 8004c4c:	d50c      	bpl.n	8004c68 <rtc_stm32_isr+0x24>
		if (DEV_DATA(dev)->cb_fn != NULL) {
 8004c4e:	6883      	ldr	r3, [r0, #8]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	b103      	cbz	r3, 8004c56 <rtc_stm32_isr+0x12>
			DEV_DATA(dev)->cb_fn(dev);
 8004c54:	4798      	blx	r3
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_ALRAF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8004c56:	68e3      	ldr	r3, [r4, #12]
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8004c5e:	60e3      	str	r3, [r4, #12]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableIT_ALRA(RTC_TypeDef *RTCx)
{
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAIE);
 8004c60:	68a3      	ldr	r3, [r4, #8]
 8004c62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c66:	60a3      	str	r3, [r4, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004c68:	4b03      	ldr	r3, [pc, #12]	; (8004c78 <rtc_stm32_isr+0x34>)
 8004c6a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004c6e:	615a      	str	r2, [r3, #20]
 8004c70:	bd10      	pop	{r4, pc}
 8004c72:	bf00      	nop
 8004c74:	40002800 	.word	0x40002800
 8004c78:	40010400 	.word	0x40010400

08004c7c <uart_stm32_irq_tx_enable>:
	return num_rx;
}

static void uart_stm32_irq_tx_enable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004c7c:	6803      	ldr	r3, [r0, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	681a      	ldr	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8004c82:	6813      	ldr	r3, [r2, #0]
 8004c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	4770      	bx	lr

08004c8c <uart_stm32_irq_tx_disable>:
	LL_USART_EnableIT_TC(UartInstance);
}

static void uart_stm32_irq_tx_disable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004c8c:	6803      	ldr	r3, [r0, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	681a      	ldr	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8004c92:	6813      	ldr	r3, [r2, #0]
 8004c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	4770      	bx	lr

08004c9c <uart_stm32_irq_rx_enable>:
	return LL_USART_IsActiveFlag_TXE(UartInstance);
}

static void uart_stm32_irq_rx_enable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004c9c:	6803      	ldr	r3, [r0, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004ca2:	6813      	ldr	r3, [r2, #0]
 8004ca4:	f043 0320 	orr.w	r3, r3, #32
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	4770      	bx	lr

08004cac <uart_stm32_irq_rx_disable>:
	LL_USART_EnableIT_RXNE(UartInstance);
}

static void uart_stm32_irq_rx_disable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004cac:	6803      	ldr	r3, [r0, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004cb2:	6813      	ldr	r3, [r2, #0]
 8004cb4:	f023 0320 	bic.w	r3, r3, #32
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	4770      	bx	lr

08004cbc <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(UartInstance);
}

static void uart_stm32_irq_err_enable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004cbc:	6803      	ldr	r3, [r0, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	681b      	ldr	r3, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	f042 0201 	orr.w	r2, r2, #1
 8004cc8:	609a      	str	r2, [r3, #8]

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 8004cca:	4a0e      	ldr	r2, [pc, #56]	; (8004d04 <uart_stm32_irq_err_enable+0x48>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00f      	beq.n	8004cf0 <uart_stm32_irq_err_enable+0x34>
 8004cd0:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00b      	beq.n	8004cf0 <uart_stm32_irq_err_enable+0x34>
 8004cd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d007      	beq.n	8004cf0 <uart_stm32_irq_err_enable+0x34>
 8004ce0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d003      	beq.n	8004cf0 <uart_stm32_irq_err_enable+0x34>
 8004ce8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d103      	bne.n	8004cf8 <uart_stm32_irq_err_enable+0x3c>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cf6:	605a      	str	r2, [r3, #4]
  SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40013800 	.word	0x40013800

08004d08 <uart_stm32_irq_err_disable>:
	LL_USART_EnableIT_PE(UartInstance);
}

static void uart_stm32_irq_err_disable(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004d08:	6803      	ldr	r3, [r0, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	f022 0201 	bic.w	r2, r2, #1
 8004d14:	609a      	str	r2, [r3, #8]

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 8004d16:	4a0e      	ldr	r2, [pc, #56]	; (8004d50 <uart_stm32_irq_err_disable+0x48>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00f      	beq.n	8004d3c <uart_stm32_irq_err_disable+0x34>
 8004d1c:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00b      	beq.n	8004d3c <uart_stm32_irq_err_disable+0x34>
 8004d24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d007      	beq.n	8004d3c <uart_stm32_irq_err_disable+0x34>
 8004d2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d003      	beq.n	8004d3c <uart_stm32_irq_err_disable+0x34>
 8004d34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d103      	bne.n	8004d44 <uart_stm32_irq_err_disable+0x3c>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40013800 	.word	0x40013800

08004d54 <uart_stm32_irq_is_pending>:
	LL_USART_DisableIT_PE(UartInstance);
}

static int uart_stm32_irq_is_pending(struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004d54:	6803      	ldr	r3, [r0, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8004d5a:	69da      	ldr	r2, [r3, #28]
 8004d5c:	0691      	lsls	r1, r2, #26
 8004d5e:	d404      	bmi.n	8004d6a <uart_stm32_irq_is_pending+0x16>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8004d60:	69d8      	ldr	r0, [r3, #28]
 8004d62:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d66:	d105      	bne.n	8004d74 <uart_stm32_irq_is_pending+0x20>
 8004d68:	4770      	bx	lr
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	0692      	lsls	r2, r2, #26
 8004d6e:	d5f7      	bpl.n	8004d60 <uart_stm32_irq_is_pending+0xc>

	return ((LL_USART_IsActiveFlag_RXNE(UartInstance) &&
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 8004d70:	2001      	movs	r0, #1
 8004d72:	4770      	bx	lr
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	f3c0 10c0 	ubfx	r0, r0, #7, #1
		(LL_USART_IsActiveFlag_TXE(UartInstance) &&
		 LL_USART_IsEnabledIT_TXE(UartInstance)));
}
 8004d7a:	4770      	bx	lr

08004d7c <uart_stm32_irq_update>:

static int uart_stm32_irq_update(struct device *dev)
{
	return 1;
}
 8004d7c:	2001      	movs	r0, #1
 8004d7e:	4770      	bx	lr

08004d80 <uart_stm32_irq_callback_set>:

static void uart_stm32_irq_callback_set(struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *cb_data)
{
	struct uart_stm32_data *data = DEV_DATA(dev);
 8004d80:	6883      	ldr	r3, [r0, #8]

	data->user_cb = cb;
 8004d82:	6059      	str	r1, [r3, #4]
	data->user_data = cb_data;
 8004d84:	609a      	str	r2, [r3, #8]
 8004d86:	4770      	bx	lr

08004d88 <uart_stm32_isr>:
}

static void uart_stm32_isr(void *arg)
{
	struct device *dev = arg;
	struct uart_stm32_data *data = DEV_DATA(dev);
 8004d88:	6882      	ldr	r2, [r0, #8]

	if (data->user_cb) {
 8004d8a:	6853      	ldr	r3, [r2, #4]
 8004d8c:	b10b      	cbz	r3, 8004d92 <uart_stm32_isr+0xa>
		data->user_cb(data->user_data);
 8004d8e:	6890      	ldr	r0, [r2, #8]
 8004d90:	4718      	bx	r3
 8004d92:	4770      	bx	lr

08004d94 <uart_stm32_irq_config_func_USART_1>:
									\
STM32_UART_IRQ_HANDLER(name)


#ifdef CONFIG_UART_1
STM32_UART_INIT(USART_1)
 8004d94:	b508      	push	{r3, lr}
 8004d96:	2200      	movs	r2, #0
 8004d98:	2025      	movs	r0, #37	; 0x25
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	f7ff fb06 	bl	80043ac <_irq_priority_set>
 8004da0:	2025      	movs	r0, #37	; 0x25
 8004da2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004da6:	f7ff baf1 	b.w	800438c <_arch_irq_enable>

08004daa <uart_stm32_irq_config_func_USART_2>:
#endif	/* CONFIG_UART_1 */

#ifdef CONFIG_UART_2
STM32_UART_INIT(USART_2)
 8004daa:	b508      	push	{r3, lr}
 8004dac:	2200      	movs	r2, #0
 8004dae:	2026      	movs	r0, #38	; 0x26
 8004db0:	4611      	mov	r1, r2
 8004db2:	f7ff fafb 	bl	80043ac <_irq_priority_set>
 8004db6:	2026      	movs	r0, #38	; 0x26
 8004db8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004dbc:	f7ff bae6 	b.w	800438c <_arch_irq_enable>

08004dc0 <uart_stm32_init>:
{
 8004dc0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8004dc4:	6803      	ldr	r3, [r0, #0]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8004dc6:	f8d0 9008 	ldr.w	r9, [r0, #8]
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8004dca:	689e      	ldr	r6, [r3, #8]
{
 8004dcc:	4605      	mov	r5, r0
 8004dce:	4824      	ldr	r0, [pc, #144]	; (8004e60 <uart_stm32_init+0xa0>)
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004dd0:	6834      	ldr	r4, [r6, #0]
	u32_t baud_rate = config->baud_rate;
 8004dd2:	f8d6 8014 	ldr.w	r8, [r6, #20]
 8004dd6:	f000 f8b1 	bl	8004f3c <_impl_device_get_binding>
 8004dda:	6843      	ldr	r3, [r0, #4]
	data->clock = clk;
 8004ddc:	f8c9 0000 	str.w	r0, [r9]
			(clock_control_subsys_t *)&config->pclken) != 0) {
 8004de0:	f106 0a0c 	add.w	sl, r6, #12
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4651      	mov	r1, sl
 8004de8:	4798      	blx	r3
	if (clock_control_on(data->clock,
 8004dea:	4607      	mov	r7, r0
 8004dec:	2800      	cmp	r0, #0
 8004dee:	d130      	bne.n	8004e52 <uart_stm32_init+0x92>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8004df0:	6823      	ldr	r3, [r4, #0]
	clock_control_get_rate(data->clock,
 8004df2:	f8d9 0000 	ldr.w	r0, [r9]
 8004df6:	f023 0301 	bic.w	r3, r3, #1
 8004dfa:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	f043 030c 	orr.w	r3, r3, #12
 8004e02:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e0e:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004e10:	6863      	ldr	r3, [r4, #4]
 8004e12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e16:	6063      	str	r3, [r4, #4]
	const struct clock_control_driver_api *api = dev->driver_api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->config->name);

	return api->get_rate(dev, sys, rate);
 8004e18:	6843      	ldr	r3, [r0, #4]
 8004e1a:	aa01      	add	r2, sp, #4
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	4651      	mov	r1, sl
 8004e20:	4798      	blx	r3
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004e22:	682b      	ldr	r3, [r5, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	681a      	ldr	r2, [r3, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 8004e28:	9b01      	ldr	r3, [sp, #4]
 8004e2a:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 8004e2e:	fbb3 f3f8 	udiv	r3, r3, r8
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	60d3      	str	r3, [r2, #12]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	f043 0301 	orr.w	r3, r3, #1
 8004e3c:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8004e3e:	69e3      	ldr	r3, [r4, #28]
 8004e40:	029a      	lsls	r2, r3, #10
 8004e42:	d5fc      	bpl.n	8004e3e <uart_stm32_init+0x7e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8004e44:	69e3      	ldr	r3, [r4, #28]
 8004e46:	025b      	lsls	r3, r3, #9
 8004e48:	d5fc      	bpl.n	8004e44 <uart_stm32_init+0x84>
	config->uconf.irq_config_func(dev);
 8004e4a:	68b3      	ldr	r3, [r6, #8]
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	4798      	blx	r3
	return 0;
 8004e50:	e001      	b.n	8004e56 <uart_stm32_init+0x96>
		return -EIO;
 8004e52:	f06f 0704 	mvn.w	r7, #4
}
 8004e56:	4638      	mov	r0, r7
 8004e58:	b002      	add	sp, #8
 8004e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e5e:	bf00      	nop
 8004e60:	080061d2 	.word	0x080061d2

08004e64 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004e64:	6803      	ldr	r3, [r0, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	0612      	lsls	r2, r2, #24
 8004e6e:	d5fc      	bpl.n	8004e6a <uart_stm32_poll_out+0x6>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004e70:	2240      	movs	r2, #64	; 0x40
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8004e72:	b289      	uxth	r1, r1
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004e74:	621a      	str	r2, [r3, #32]
  USARTx->TDR = Value;
 8004e76:	8519      	strh	r1, [r3, #40]	; 0x28
 8004e78:	4770      	bx	lr

08004e7a <uart_stm32_fifo_fill>:
{
 8004e7a:	b530      	push	{r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004e7c:	6803      	ldr	r3, [r0, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	681c      	ldr	r4, [r3, #0]
	while ((size - num_tx > 0) &&
 8004e82:	2300      	movs	r3, #0
 8004e84:	b2d8      	uxtb	r0, r3
 8004e86:	1a15      	subs	r5, r2, r0
 8004e88:	2d00      	cmp	r5, #0
 8004e8a:	dd07      	ble.n	8004e9c <uart_stm32_fifo_fill+0x22>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8004e8c:	69e5      	ldr	r5, [r4, #28]
 8004e8e:	062d      	lsls	r5, r5, #24
 8004e90:	f103 0301 	add.w	r3, r3, #1
 8004e94:	d502      	bpl.n	8004e9c <uart_stm32_fifo_fill+0x22>
  USARTx->TDR = Value;
 8004e96:	5c08      	ldrb	r0, [r1, r0]
 8004e98:	8520      	strh	r0, [r4, #40]	; 0x28
 8004e9a:	e7f3      	b.n	8004e84 <uart_stm32_fifo_fill+0xa>
}
 8004e9c:	bd30      	pop	{r4, r5, pc}

08004e9e <uart_stm32_fifo_read>:
{
 8004e9e:	b570      	push	{r4, r5, r6, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004ea0:	6803      	ldr	r3, [r0, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	681b      	ldr	r3, [r3, #0]
	while ((size - num_rx > 0) &&
 8004ea6:	2400      	movs	r4, #0
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8004ea8:	2508      	movs	r5, #8
 8004eaa:	b2e0      	uxtb	r0, r4
 8004eac:	1a16      	subs	r6, r2, r0
 8004eae:	2e00      	cmp	r6, #0
 8004eb0:	dd0a      	ble.n	8004ec8 <uart_stm32_fifo_read+0x2a>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8004eb2:	69de      	ldr	r6, [r3, #28]
 8004eb4:	06b6      	lsls	r6, r6, #26
 8004eb6:	d507      	bpl.n	8004ec8 <uart_stm32_fifo_read+0x2a>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8004eb8:	8c9e      	ldrh	r6, [r3, #36]	; 0x24
 8004eba:	540e      	strb	r6, [r1, r0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004ebc:	69d8      	ldr	r0, [r3, #28]
 8004ebe:	0700      	lsls	r0, r0, #28
 8004ec0:	d500      	bpl.n	8004ec4 <uart_stm32_fifo_read+0x26>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8004ec2:	621d      	str	r5, [r3, #32]
 8004ec4:	3401      	adds	r4, #1
 8004ec6:	e7f0      	b.n	8004eaa <uart_stm32_fifo_read+0xc>
}
 8004ec8:	bd70      	pop	{r4, r5, r6, pc}

08004eca <uart_stm32_irq_tx_complete>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004eca:	6803      	ldr	r3, [r0, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8004ed0:	69d8      	ldr	r0, [r3, #28]
}
 8004ed2:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8004ed6:	4770      	bx	lr

08004ed8 <uart_stm32_irq_tx_ready>:
 8004ed8:	f7ff bff7 	b.w	8004eca <uart_stm32_irq_tx_complete>

08004edc <uart_stm32_irq_rx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004edc:	6803      	ldr	r3, [r0, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8004ee2:	69d8      	ldr	r0, [r3, #28]
}
 8004ee4:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8004ee8:	4770      	bx	lr

08004eea <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004eea:	6803      	ldr	r3, [r0, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004ef0:	69da      	ldr	r2, [r3, #28]
 8004ef2:	0710      	lsls	r0, r2, #28
 8004ef4:	d405      	bmi.n	8004f02 <uart_stm32_poll_in+0x18>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8004ef6:	69da      	ldr	r2, [r3, #28]
 8004ef8:	0692      	lsls	r2, r2, #26
 8004efa:	d405      	bmi.n	8004f08 <uart_stm32_poll_in+0x1e>
		return -1;
 8004efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f00:	4770      	bx	lr
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8004f02:	2208      	movs	r2, #8
 8004f04:	621a      	str	r2, [r3, #32]
 8004f06:	e7f6      	b.n	8004ef6 <uart_stm32_poll_in+0xc>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8004f08:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004f0a:	700b      	strb	r3, [r1, #0]
	return 0;
 8004f0c:	2000      	movs	r0, #0
}
 8004f0e:	4770      	bx	lr

08004f10 <_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
 8004f10:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <_sys_device_do_config_level+0x28>)
{
 8004f12:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
 8004f14:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8004f18:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
 8004f1a:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
 8004f1c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8004f20:	42ac      	cmp	r4, r5
 8004f22:	d300      	bcc.n	8004f26 <_sys_device_do_config_level+0x16>
		} else {
			_k_object_init(info);
		}
	}
}
 8004f24:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	4620      	mov	r0, r4
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	4798      	blx	r3
		if (retval != 0) {
 8004f2e:	b100      	cbz	r0, 8004f32 <_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
 8004f30:	6066      	str	r6, [r4, #4]
								info++) {
 8004f32:	340c      	adds	r4, #12
 8004f34:	e7f4      	b.n	8004f20 <_sys_device_do_config_level+0x10>
 8004f36:	bf00      	nop
 8004f38:	08006828 	.word	0x08006828

08004f3c <_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004f3c:	4b10      	ldr	r3, [pc, #64]	; (8004f80 <_impl_device_get_binding+0x44>)
{
 8004f3e:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004f40:	4c10      	ldr	r4, [pc, #64]	; (8004f84 <_impl_device_get_binding+0x48>)
{
 8004f42:	4605      	mov	r5, r0
 8004f44:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004f46:	429c      	cmp	r4, r3
 8004f48:	d104      	bne.n	8004f54 <_impl_device_get_binding+0x18>
 8004f4a:	4c0e      	ldr	r4, [pc, #56]	; (8004f84 <_impl_device_get_binding+0x48>)
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
 8004f4c:	42b4      	cmp	r4, r6
 8004f4e:	d109      	bne.n	8004f64 <_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
 8004f50:	2400      	movs	r4, #0
 8004f52:	e012      	b.n	8004f7a <_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
 8004f54:	6862      	ldr	r2, [r4, #4]
 8004f56:	b11a      	cbz	r2, 8004f60 <_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
 8004f58:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
 8004f5a:	6812      	ldr	r2, [r2, #0]
 8004f5c:	42aa      	cmp	r2, r5
 8004f5e:	d00c      	beq.n	8004f7a <_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004f60:	340c      	adds	r4, #12
 8004f62:	e7f0      	b.n	8004f46 <_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
 8004f64:	6863      	ldr	r3, [r4, #4]
 8004f66:	b90b      	cbnz	r3, 8004f6c <_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004f68:	340c      	adds	r4, #12
 8004f6a:	e7ef      	b.n	8004f4c <_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	4628      	mov	r0, r5
 8004f70:	6819      	ldr	r1, [r3, #0]
 8004f72:	f7fb ff99 	bl	8000ea8 <strcmp>
 8004f76:	2800      	cmp	r0, #0
 8004f78:	d1f6      	bne.n	8004f68 <_impl_device_get_binding+0x2c>
}
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	bd70      	pop	{r4, r5, r6, pc}
 8004f7e:	bf00      	nop
 8004f80:	20001570 	.word	0x20001570
 8004f84:	2000148c 	.word	0x2000148c

08004f88 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	(void)memset(&__bss_start, 0,
 8004f88:	4802      	ldr	r0, [pc, #8]	; (8004f94 <_bss_zero+0xc>)
 8004f8a:	4a03      	ldr	r2, [pc, #12]	; (8004f98 <_bss_zero+0x10>)
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	1a12      	subs	r2, r2, r0
 8004f90:	f7fb bc22 	b.w	80007d8 <memset>
 8004f94:	20000000 	.word	0x20000000
 8004f98:	2000033c 	.word	0x2000033c

08004f9c <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 8004f9c:	4802      	ldr	r0, [pc, #8]	; (8004fa8 <_data_copy+0xc>)
 8004f9e:	4a03      	ldr	r2, [pc, #12]	; (8004fac <_data_copy+0x10>)
 8004fa0:	4903      	ldr	r1, [pc, #12]	; (8004fb0 <_data_copy+0x14>)
 8004fa2:	1a12      	subs	r2, r2, r0
 8004fa4:	f7fb bb7e 	b.w	80006a4 <memcpy>
 8004fa8:	20001180 	.word	0x20001180
 8004fac:	200015ac 	.word	0x200015ac
 8004fb0:	0800690c 	.word	0x0800690c

08004fb4 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8004fb4:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8004fb6:	2002      	movs	r0, #2
 8004fb8:	f7ff ffaa 	bl	8004f10 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
 8004fbc:	4807      	ldr	r0, [pc, #28]	; (8004fdc <bg_thread_main+0x28>)
 8004fbe:	f7fe f9b3 	bl	8003328 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
 8004fc2:	2003      	movs	r0, #3
 8004fc4:	f7ff ffa4 	bl	8004f10 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
 8004fc8:	f000 fc16 	bl	80057f8 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
 8004fcc:	f7fd ff72 	bl	8002eb4 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
 8004fd0:	4a03      	ldr	r2, [pc, #12]	; (8004fe0 <bg_thread_main+0x2c>)
 8004fd2:	7b13      	ldrb	r3, [r2, #12]
 8004fd4:	f023 0301 	bic.w	r3, r3, #1
 8004fd8:	7313      	strb	r3, [r2, #12]
 8004fda:	bd08      	pop	{r3, pc}
 8004fdc:	08006850 	.word	0x08006850
 8004fe0:	20000284 	.word	0x20000284

08004fe4 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
 8004fe8:	4b32      	ldr	r3, [pc, #200]	; (80050b4 <_Cstart+0xd0>)
 8004fea:	af06      	add	r7, sp, #24
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8004fec:	f383 8808 	msr	MSP, r3
 8004ff0:	4b31      	ldr	r3, [pc, #196]	; (80050b8 <_Cstart+0xd4>)
	_kernel.ready_q.cache = _main_thread;
 8004ff2:	4e32      	ldr	r6, [pc, #200]	; (80050bc <_Cstart+0xd8>)
 8004ff4:	4d32      	ldr	r5, [pc, #200]	; (80050c0 <_Cstart+0xdc>)
 8004ff6:	2400      	movs	r4, #0
 8004ff8:	22f0      	movs	r2, #240	; 0xf0
 8004ffa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004ffe:	77dc      	strb	r4, [r3, #31]
 8005000:	761c      	strb	r4, [r3, #24]
 8005002:	765c      	strb	r4, [r3, #25]
 8005004:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8005006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005008:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
 800500c:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
 800500e:	f7ff f9b5 	bl	800437c <_FaultInit>
	_CpuIdleInit();
 8005012:	f7ff fa0d 	bl	8004430 <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8005016:	4620      	mov	r0, r4
 8005018:	f7ff ff7a 	bl	8004f10 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800501c:	2001      	movs	r0, #1
 800501e:	f7ff ff77 	bl	8004f10 <_sys_device_do_config_level>
	_sched_init();
 8005022:	f000 faa7 	bl	8005574 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
 8005026:	4b27      	ldr	r3, [pc, #156]	; (80050c4 <_Cstart+0xe0>)
	_kernel.ready_q.cache = _main_thread;
 8005028:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
 800502a:	9305      	str	r3, [sp, #20]
 800502c:	2301      	movs	r3, #1
 800502e:	9304      	str	r3, [sp, #16]
 8005030:	9403      	str	r4, [sp, #12]
 8005032:	9402      	str	r4, [sp, #8]
 8005034:	9401      	str	r4, [sp, #4]
 8005036:	9400      	str	r4, [sp, #0]
 8005038:	4b23      	ldr	r3, [pc, #140]	; (80050c8 <_Cstart+0xe4>)
 800503a:	4924      	ldr	r1, [pc, #144]	; (80050cc <_Cstart+0xe8>)
 800503c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005040:	4628      	mov	r0, r5
 8005042:	f000 fb9f 	bl	8005784 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8005046:	7b6b      	ldrb	r3, [r5, #13]
 8005048:	f023 0204 	bic.w	r2, r3, #4
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
 800504c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8005050:	736a      	strb	r2, [r5, #13]
 8005052:	4634      	mov	r4, r6
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
 8005054:	d105      	bne.n	8005062 <_Cstart+0x7e>
 8005056:	6a2b      	ldr	r3, [r5, #32]
	return true;
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
 8005058:	3301      	adds	r3, #1
 800505a:	d102      	bne.n	8005062 <_Cstart+0x7e>
		_add_thread_to_ready_q(thread);
 800505c:	4628      	mov	r0, r5
 800505e:	f000 f9db 	bl	8005418 <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
 8005062:	4b1b      	ldr	r3, [pc, #108]	; (80050d0 <_Cstart+0xec>)
 8005064:	9305      	str	r3, [sp, #20]
 8005066:	2301      	movs	r3, #1
 8005068:	4e1a      	ldr	r6, [pc, #104]	; (80050d4 <_Cstart+0xf0>)
 800506a:	9304      	str	r3, [sp, #16]
 800506c:	230f      	movs	r3, #15
 800506e:	9303      	str	r3, [sp, #12]
 8005070:	2300      	movs	r3, #0
 8005072:	9302      	str	r3, [sp, #8]
 8005074:	9301      	str	r3, [sp, #4]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800507c:	4b16      	ldr	r3, [pc, #88]	; (80050d8 <_Cstart+0xf4>)
 800507e:	4917      	ldr	r1, [pc, #92]	; (80050dc <_Cstart+0xf8>)
 8005080:	4630      	mov	r0, r6
 8005082:	f000 fb7f 	bl	8005784 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8005086:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
 8005088:	60e6      	str	r6, [r4, #12]
 800508a:	f023 0304 	bic.w	r3, r3, #4
 800508e:	7373      	strb	r3, [r6, #13]
	list->head = (sys_dnode_t *)list;
 8005090:	4b13      	ldr	r3, [pc, #76]	; (80050e0 <_Cstart+0xfc>)
 8005092:	61a3      	str	r3, [r4, #24]
	list->tail = (sys_dnode_t *)list;
 8005094:	61e3      	str	r3, [r4, #28]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
 8005096:	4b13      	ldr	r3, [pc, #76]	; (80050e4 <_Cstart+0x100>)

#ifdef CONFIG_TRACING
	z_sys_trace_thread_switched_out();
#endif
	_current = main_thread;
 8005098:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
 800509a:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
 800509e:	4c12      	ldr	r4, [pc, #72]	; (80050e8 <_Cstart+0x104>)
 80050a0:	4a09      	ldr	r2, [pc, #36]	; (80050c8 <_Cstart+0xe4>)
 80050a2:	f383 8809 	msr	PSP, r3
 80050a6:	b663      	cpsie	if
 80050a8:	2100      	movs	r1, #0
 80050aa:	f381 8811 	msr	BASEPRI, r1
 80050ae:	4610      	mov	r0, r2
 80050b0:	4720      	bx	r4
 80050b2:	bf00      	nop
 80050b4:	20001180 	.word	0x20001180
 80050b8:	e000ed00 	.word	0xe000ed00
 80050bc:	200002f0 	.word	0x200002f0
 80050c0:	20000284 	.word	0x20000284
 80050c4:	08006840 	.word	0x08006840
 80050c8:	08004fb5 	.word	0x08004fb5
 80050cc:	20000440 	.word	0x20000440
 80050d0:	08006845 	.word	0x08006845
 80050d4:	20000218 	.word	0x20000218
 80050d8:	08005af5 	.word	0x08005af5
 80050dc:	20000840 	.word	0x20000840
 80050e0:	20000308 	.word	0x20000308
 80050e4:	20000840 	.word	0x20000840
 80050e8:	08002ef5 	.word	0x08002ef5

080050ec <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
 80050ec:	7b42      	ldrb	r2, [r0, #13]
 80050ee:	06d2      	lsls	r2, r2, #27
 80050f0:	d104      	bne.n	80050fc <_ready_thread+0x10>
 80050f2:	6a03      	ldr	r3, [r0, #32]
	if (_is_thread_ready(thread)) {
 80050f4:	3301      	adds	r3, #1
 80050f6:	d101      	bne.n	80050fc <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
 80050f8:	f000 b98e 	b.w	8005418 <_add_thread_to_ready_q>
 80050fc:	4770      	bx	lr
	...

08005100 <_impl_k_msgq_put>:
	}
}


int _impl_k_msgq_put(struct k_msgq *q, void *data, s32_t timeout)
{
 8005100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005102:	4604      	mov	r4, r0
 8005104:	460f      	mov	r7, r1
 8005106:	f04f 0110 	mov.w	r1, #16
 800510a:	f3ef 8611 	mrs	r6, BASEPRI
 800510e:	f381 8811 	msr	BASEPRI, r1

	unsigned int key = irq_lock();
	struct k_thread *pending_thread;
	int result;

	if (q->used_msgs < q->max_msgs) {
 8005112:	6a05      	ldr	r5, [r0, #32]
 8005114:	68c1      	ldr	r1, [r0, #12]
 8005116:	428d      	cmp	r5, r1
 8005118:	d225      	bcs.n	8005166 <_impl_k_msgq_put+0x66>
		/* message queue isn't full */
		pending_thread = _unpend_first_thread(&q->wait_q);
 800511a:	f000 f91c 	bl	8005356 <_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
 800511e:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
 8005120:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
 8005122:	4639      	mov	r1, r7
		if (pending_thread != NULL) {
 8005124:	b160      	cbz	r0, 8005140 <_impl_k_msgq_put+0x40>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8005126:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
 8005128:	6940      	ldr	r0, [r0, #20]
 800512a:	f7fb fabb 	bl	80006a4 <memcpy>
			       q->msg_size);
			/* wake up waiting thread */
			_set_thread_return_value(pending_thread, 0);
			_ready_thread(pending_thread);
 800512e:	4628      	mov	r0, r5
 8005130:	66ac      	str	r4, [r5, #104]	; 0x68
 8005132:	f7ff ffdb 	bl	80050ec <_ready_thread>
			_reschedule(key);
 8005136:	4630      	mov	r0, r6
 8005138:	f000 f91c 	bl	8005374 <_reschedule>
			return 0;
 800513c:	4620      	mov	r0, r4
 800513e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		} else {
			/* put message in queue */
			(void)memcpy(q->write_ptr, data, q->msg_size);
 8005140:	69e0      	ldr	r0, [r4, #28]
 8005142:	f7fb faaf 	bl	80006a4 <memcpy>
			q->write_ptr += q->msg_size;
 8005146:	69e3      	ldr	r3, [r4, #28]
 8005148:	68a2      	ldr	r2, [r4, #8]
 800514a:	4413      	add	r3, r2
			if (q->write_ptr == q->buffer_end) {
 800514c:	6962      	ldr	r2, [r4, #20]
			q->write_ptr += q->msg_size;
 800514e:	61e3      	str	r3, [r4, #28]
			if (q->write_ptr == q->buffer_end) {
 8005150:	4293      	cmp	r3, r2
				q->write_ptr = q->buffer_start;
 8005152:	bf04      	itt	eq
 8005154:	6923      	ldreq	r3, [r4, #16]
 8005156:	61e3      	streq	r3, [r4, #28]
			}
			q->used_msgs++;
 8005158:	6a23      	ldr	r3, [r4, #32]
 800515a:	3301      	adds	r3, #1
 800515c:	6223      	str	r3, [r4, #32]
		}
		result = 0;
 800515e:	2000      	movs	r0, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8005160:	f386 8811 	msr	BASEPRI, r6
	}

	irq_unlock(key);

	return result;
}
 8005164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (timeout == K_NO_WAIT) {
 8005166:	b142      	cbz	r2, 800517a <_impl_k_msgq_put+0x7a>
		_current->base.swap_data = data;
 8005168:	4b05      	ldr	r3, [pc, #20]	; (8005180 <_impl_k_msgq_put+0x80>)
 800516a:	689b      	ldr	r3, [r3, #8]
		return _pend_current_thread(key, &q->wait_q, timeout);
 800516c:	4601      	mov	r1, r0
		_current->base.swap_data = data;
 800516e:	615f      	str	r7, [r3, #20]
		return _pend_current_thread(key, &q->wait_q, timeout);
 8005170:	4630      	mov	r0, r6
}
 8005172:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return _pend_current_thread(key, &q->wait_q, timeout);
 8005176:	f000 b9ef 	b.w	8005558 <_pend_current_thread>
		result = -ENOMSG;
 800517a:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800517e:	e7ef      	b.n	8005160 <_impl_k_msgq_put+0x60>
 8005180:	200002f0 	.word	0x200002f0

08005184 <_impl_k_msgq_get>:
	return 0;
}
#endif

int _impl_k_msgq_get(struct k_msgq *q, void *data, s32_t timeout)
{
 8005184:	b570      	push	{r4, r5, r6, lr}
 8005186:	4604      	mov	r4, r0
 8005188:	4608      	mov	r0, r1
	__asm__ volatile(
 800518a:	f04f 0110 	mov.w	r1, #16
 800518e:	f3ef 8611 	mrs	r6, BASEPRI
 8005192:	f381 8811 	msr	BASEPRI, r1

	unsigned int key = irq_lock();
	struct k_thread *pending_thread;
	int result;

	if (q->used_msgs > 0) {
 8005196:	6a21      	ldr	r1, [r4, #32]
 8005198:	2900      	cmp	r1, #0
 800519a:	d02f      	beq.n	80051fc <_impl_k_msgq_get+0x78>
		/* take first available message from queue */
		(void)memcpy(data, q->read_ptr, q->msg_size);
 800519c:	68a2      	ldr	r2, [r4, #8]
 800519e:	69a1      	ldr	r1, [r4, #24]
 80051a0:	f7fb fa80 	bl	80006a4 <memcpy>
		q->read_ptr += q->msg_size;
 80051a4:	69a3      	ldr	r3, [r4, #24]
 80051a6:	68a2      	ldr	r2, [r4, #8]
 80051a8:	4413      	add	r3, r2
		if (q->read_ptr == q->buffer_end) {
 80051aa:	6962      	ldr	r2, [r4, #20]
		q->read_ptr += q->msg_size;
 80051ac:	61a3      	str	r3, [r4, #24]
		if (q->read_ptr == q->buffer_end) {
 80051ae:	4293      	cmp	r3, r2
			q->read_ptr = q->buffer_start;
 80051b0:	bf04      	itt	eq
 80051b2:	6923      	ldreq	r3, [r4, #16]
 80051b4:	61a3      	streq	r3, [r4, #24]
		}
		q->used_msgs--;
 80051b6:	6a23      	ldr	r3, [r4, #32]
 80051b8:	3b01      	subs	r3, #1
 80051ba:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = _unpend_first_thread(&q->wait_q);
 80051bc:	4620      	mov	r0, r4
 80051be:	f000 f8ca 	bl	8005356 <_unpend_first_thread>
		if (pending_thread != NULL) {
 80051c2:	4605      	mov	r5, r0
 80051c4:	b320      	cbz	r0, 8005210 <_impl_k_msgq_get+0x8c>
			/* add thread's message to queue */
			(void)memcpy(q->write_ptr, pending_thread->base.swap_data,
 80051c6:	6941      	ldr	r1, [r0, #20]
 80051c8:	68a2      	ldr	r2, [r4, #8]
 80051ca:	69e0      	ldr	r0, [r4, #28]
 80051cc:	f7fb fa6a 	bl	80006a4 <memcpy>
			       q->msg_size);
			q->write_ptr += q->msg_size;
 80051d0:	69e3      	ldr	r3, [r4, #28]
 80051d2:	68a2      	ldr	r2, [r4, #8]
 80051d4:	4413      	add	r3, r2
			if (q->write_ptr == q->buffer_end) {
 80051d6:	6962      	ldr	r2, [r4, #20]
			q->write_ptr += q->msg_size;
 80051d8:	61e3      	str	r3, [r4, #28]
			if (q->write_ptr == q->buffer_end) {
 80051da:	4293      	cmp	r3, r2
				q->write_ptr = q->buffer_start;
 80051dc:	bf04      	itt	eq
 80051de:	6923      	ldreq	r3, [r4, #16]
 80051e0:	61e3      	streq	r3, [r4, #28]
			}
			q->used_msgs++;
 80051e2:	6a23      	ldr	r3, [r4, #32]
 80051e4:	3301      	adds	r3, #1
 80051e6:	6223      	str	r3, [r4, #32]
 80051e8:	2400      	movs	r4, #0

			/* wake up waiting thread */
			_set_thread_return_value(pending_thread, 0);
			_ready_thread(pending_thread);
 80051ea:	4628      	mov	r0, r5
 80051ec:	66ac      	str	r4, [r5, #104]	; 0x68
 80051ee:	f7ff ff7d 	bl	80050ec <_ready_thread>
			_reschedule(key);
 80051f2:	4630      	mov	r0, r6
 80051f4:	f000 f8be 	bl	8005374 <_reschedule>
			return 0;
 80051f8:	4620      	mov	r0, r4
 80051fa:	bd70      	pop	{r4, r5, r6, pc}
		}
		result = 0;
	} else if (timeout == K_NO_WAIT) {
 80051fc:	b15a      	cbz	r2, 8005216 <_impl_k_msgq_get+0x92>
		/* don't wait for a message to become available */
		result = -ENOMSG;
	} else {
		/* wait for get message success or timeout */
		_current->base.swap_data = data;
 80051fe:	4b07      	ldr	r3, [pc, #28]	; (800521c <_impl_k_msgq_get+0x98>)
 8005200:	689b      	ldr	r3, [r3, #8]
		return _pend_current_thread(key, &q->wait_q, timeout);
 8005202:	4621      	mov	r1, r4
		_current->base.swap_data = data;
 8005204:	6158      	str	r0, [r3, #20]
		return _pend_current_thread(key, &q->wait_q, timeout);
 8005206:	4630      	mov	r0, r6
	}

	irq_unlock(key);

	return result;
}
 8005208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return _pend_current_thread(key, &q->wait_q, timeout);
 800520c:	f000 b9a4 	b.w	8005558 <_pend_current_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8005210:	f386 8811 	msr	BASEPRI, r6
}
 8005214:	bd70      	pop	{r4, r5, r6, pc}
		result = -ENOMSG;
 8005216:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800521a:	e7f9      	b.n	8005210 <_impl_k_msgq_get+0x8c>
 800521c:	200002f0 	.word	0x200002f0

08005220 <sys_dlist_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 8005220:	e890 000c 	ldmia.w	r0, {r2, r3}
 8005224:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 8005226:	6802      	ldr	r2, [r0, #0]
 8005228:	6053      	str	r3, [r2, #4]
 800522a:	4770      	bx	lr

0800522c <reset_time_slice>:
 * SMP, it's safe to miss a timeout as long as another CPU (i.e. the
 * one we're racing against) is available to wake up at the
 * appropriate time.
 */
static void reset_time_slice(void)
{
 800522c:	b508      	push	{r3, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 800522e:	f7fe feeb 	bl	8004008 <z_clock_elapsed>
 8005232:	4b05      	ldr	r3, [pc, #20]	; (8005248 <reset_time_slice+0x1c>)
 8005234:	4a05      	ldr	r2, [pc, #20]	; (800524c <reset_time_slice+0x20>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4418      	add	r0, r3
 800523a:	6110      	str	r0, [r2, #16]

	z_set_timeout_expiry(slice_time, false);
 800523c:	2100      	movs	r1, #0
 800523e:	4618      	mov	r0, r3
}
 8005240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_set_timeout_expiry(slice_time, false);
 8005244:	f000 bc1c 	b.w	8005a80 <z_set_timeout_expiry>
 8005248:	20000320 	.word	0x20000320
 800524c:	200002f0 	.word	0x200002f0

08005250 <k_spin_lock.isra.10>:
	__asm__ volatile(
 8005250:	f04f 0310 	mov.w	r3, #16
 8005254:	f3ef 8011 	mrs	r0, BASEPRI
 8005258:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
 800525c:	4770      	bx	lr
	...

08005260 <update_cache>:
#else
static void reset_time_slice(void) { /* !CONFIG_TIMESLICING */ }
#endif

static void update_cache(int preempt_ok)
{
 8005260:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
 8005262:	4c10      	ldr	r4, [pc, #64]	; (80052a4 <update_cache+0x44>)
 8005264:	4623      	mov	r3, r4
 8005266:	f853 5f24 	ldr.w	r5, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800526a:	429d      	cmp	r5, r3
 800526c:	d000      	beq.n	8005270 <update_cache+0x10>
	return th ? th : _current_cpu->idle_thread;
 800526e:	b905      	cbnz	r5, 8005272 <update_cache+0x12>
 8005270:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
 8005272:	b970      	cbnz	r0, 8005292 <update_cache+0x32>
	if (!_current || !_is_thread_ready(_current)) {
 8005274:	68a3      	ldr	r3, [r4, #8]
 8005276:	b163      	cbz	r3, 8005292 <update_cache+0x32>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
 8005278:	7b5a      	ldrb	r2, [r3, #13]
 800527a:	06d2      	lsls	r2, r2, #27
 800527c:	d109      	bne.n	8005292 <update_cache+0x32>
 800527e:	6a1a      	ldr	r2, [r3, #32]
 8005280:	3201      	adds	r2, #1
 8005282:	d106      	bne.n	8005292 <update_cache+0x32>
	if (_is_preempt(_current) || is_metairq(th)) {
 8005284:	89da      	ldrh	r2, [r3, #14]
 8005286:	2a7f      	cmp	r2, #127	; 0x7f
 8005288:	d903      	bls.n	8005292 <update_cache+0x32>
	return thread == _idle_thread;
 800528a:	4a07      	ldr	r2, [pc, #28]	; (80052a8 <update_cache+0x48>)
	if (_is_idle(_current)) {
 800528c:	6812      	ldr	r2, [r2, #0]
 800528e:	4293      	cmp	r3, r2
 8005290:	d106      	bne.n	80052a0 <update_cache+0x40>
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		if (th != _current) {
 8005292:	68a3      	ldr	r3, [r4, #8]
 8005294:	42ab      	cmp	r3, r5
 8005296:	d001      	beq.n	800529c <update_cache+0x3c>
			reset_time_slice();
 8005298:	f7ff ffc8 	bl	800522c <reset_time_slice>
		}
		_kernel.ready_q.cache = th;
 800529c:	6225      	str	r5, [r4, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 800529e:	bd38      	pop	{r3, r4, r5, pc}
		_kernel.ready_q.cache = _current;
 80052a0:	6223      	str	r3, [r4, #32]
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	200002f0 	.word	0x200002f0
 80052a8:	0800684c 	.word	0x0800684c

080052ac <k_sched_time_slice_set>:
{
 80052ac:	b510      	push	{r4, lr}
 80052ae:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
 80052b0:	f7ff ffce 	bl	8005250 <k_spin_lock.isra.10>
		_current_cpu->slice_ticks = 0;
 80052b4:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <k_sched_time_slice_set+0x2c>)
	LOCKED(&sched_lock) {
 80052b6:	4604      	mov	r4, r0
		_current_cpu->slice_ticks = 0;
 80052b8:	2000      	movs	r0, #0
 80052ba:	6118      	str	r0, [r3, #16]
		CONFIG_SYS_CLOCK_TICKS_PER_SEC);
#else
	/* simple division keeps precision */
	s32_t ms_per_tick = MSEC_PER_SEC / CONFIG_SYS_CLOCK_TICKS_PER_SEC;

	return (s32_t)ceiling_fraction(ms, ms_per_tick);
 80052bc:	3209      	adds	r2, #9
 80052be:	230a      	movs	r3, #10
 80052c0:	fb92 f2f3 	sdiv	r2, r2, r3
		slice_time = _ms_to_ticks(slice);
 80052c4:	4b05      	ldr	r3, [pc, #20]	; (80052dc <k_sched_time_slice_set+0x30>)
 80052c6:	601a      	str	r2, [r3, #0]
		slice_max_prio = prio;
 80052c8:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <k_sched_time_slice_set+0x34>)
 80052ca:	6019      	str	r1, [r3, #0]
		reset_time_slice();
 80052cc:	f7ff ffae 	bl	800522c <reset_time_slice>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80052d0:	f384 8811 	msr	BASEPRI, r4
 80052d4:	bd10      	pop	{r4, pc}
 80052d6:	bf00      	nop
 80052d8:	200002f0 	.word	0x200002f0
 80052dc:	20000320 	.word	0x20000320
 80052e0:	2000031c 	.word	0x2000031c

080052e4 <_remove_thread_from_ready_q>:
		update_cache(thread == _current);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
 80052e4:	b510      	push	{r4, lr}
 80052e6:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
 80052e8:	f7ff ffb2 	bl	8005250 <k_spin_lock.isra.10>
		if (_is_thread_queued(thread)) {
 80052ec:	7b4b      	ldrb	r3, [r1, #13]
 80052ee:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
 80052f0:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
 80052f2:	d50d      	bpl.n	8005310 <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 80052f4:	4608      	mov	r0, r1
 80052f6:	f7ff ff93 	bl	8005220 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
 80052fa:	7b4b      	ldrb	r3, [r1, #13]
 80052fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005300:	734b      	strb	r3, [r1, #13]
			update_cache(thread == _current);
 8005302:	4b05      	ldr	r3, [pc, #20]	; (8005318 <_remove_thread_from_ready_q+0x34>)
 8005304:	6898      	ldr	r0, [r3, #8]
 8005306:	1a43      	subs	r3, r0, r1
 8005308:	4258      	negs	r0, r3
 800530a:	4158      	adcs	r0, r3
 800530c:	f7ff ffa8 	bl	8005260 <update_cache>
 8005310:	f384 8811 	msr	BASEPRI, r4
 8005314:	bd10      	pop	{r4, pc}
 8005316:	bf00      	nop
 8005318:	200002f0 	.word	0x200002f0

0800531c <_find_first_thread_to_unpend>:
{
 800531c:	b508      	push	{r3, lr}
 800531e:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
 8005320:	f7ff ff96 	bl	8005250 <k_spin_lock.isra.10>
	return list->head == list;
 8005324:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005326:	429a      	cmp	r2, r3
 8005328:	bf08      	it	eq
 800532a:	2300      	moveq	r3, #0
 800532c:	f380 8811 	msr	BASEPRI, r0
}
 8005330:	4618      	mov	r0, r3
 8005332:	bd08      	pop	{r3, pc}

08005334 <_unpend_thread_no_timeout>:
{
 8005334:	b510      	push	{r4, lr}
 8005336:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
 8005338:	f7ff ff8a 	bl	8005250 <k_spin_lock.isra.10>
 800533c:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
 800533e:	4608      	mov	r0, r1
 8005340:	f7ff ff6e 	bl	8005220 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8005344:	7b4b      	ldrb	r3, [r1, #13]
 8005346:	f023 0302 	bic.w	r3, r3, #2
 800534a:	734b      	strb	r3, [r1, #13]
 800534c:	f384 8811 	msr	BASEPRI, r4
	thread->base.pended_on = NULL;
 8005350:	2300      	movs	r3, #0
 8005352:	608b      	str	r3, [r1, #8]
 8005354:	bd10      	pop	{r4, pc}

08005356 <_unpend_first_thread>:
{
 8005356:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
 8005358:	2100      	movs	r1, #0
 800535a:	f7ff ffdf 	bl	800531c <_find_first_thread_to_unpend>

	if (thread != NULL) {
 800535e:	4604      	mov	r4, r0
 8005360:	b128      	cbz	r0, 800536e <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
 8005362:	f7ff ffe7 	bl	8005334 <_unpend_thread_no_timeout>
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
 8005366:	f104 0018 	add.w	r0, r4, #24
 800536a:	f000 fac3 	bl	80058f4 <_abort_timeout>
}
 800536e:	4620      	mov	r0, r4
 8005370:	bd10      	pop	{r4, pc}
	...

08005374 <_reschedule>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005374:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
 8005378:	2b0d      	cmp	r3, #13
 800537a:	d809      	bhi.n	8005390 <_reschedule+0x1c>
 800537c:	b11b      	cbz	r3, 8005386 <_reschedule+0x12>
 800537e:	4b07      	ldr	r3, [pc, #28]	; (800539c <_reschedule+0x28>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	051b      	lsls	r3, r3, #20
 8005384:	d504      	bpl.n	8005390 <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
 8005386:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <_reschedule+0x2c>)
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	429a      	cmp	r2, r3
 800538e:	d102      	bne.n	8005396 <_reschedule+0x22>
 8005390:	f380 8811 	msr	BASEPRI, r0
 8005394:	4770      	bx	lr
 8005396:	f7fe be6d 	b.w	8004074 <__swap>
 800539a:	bf00      	nop
 800539c:	e000ed00 	.word	0xe000ed00
 80053a0:	200002f0 	.word	0x200002f0

080053a4 <k_sched_unlock>:
{
 80053a4:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
 80053a6:	f7ff ff53 	bl	8005250 <k_spin_lock.isra.10>
		++_current->base.sched_locked;
 80053aa:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <k_sched_unlock+0x30>)
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	7bd3      	ldrb	r3, [r2, #15]
 80053b0:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
 80053b2:	4604      	mov	r4, r0
		++_current->base.sched_locked;
 80053b4:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
 80053b6:	2001      	movs	r0, #1
 80053b8:	f7ff ff52 	bl	8005260 <update_cache>
 80053bc:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
 80053c0:	f04f 0310 	mov.w	r3, #16
 80053c4:	f3ef 8011 	mrs	r0, BASEPRI
 80053c8:	f383 8811 	msr	BASEPRI, r3
}
 80053cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
 80053d0:	f7ff bfd0 	b.w	8005374 <_reschedule>
 80053d4:	200002f0 	.word	0x200002f0

080053d8 <_priq_dumb_add>:
{
 80053d8:	b510      	push	{r4, lr}
	return list->head == list;
 80053da:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80053dc:	4298      	cmp	r0, r3
 80053de:	bf08      	it	eq
 80053e0:	2300      	moveq	r3, #0
 80053e2:	b193      	cbz	r3, 800540a <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
 80053e4:	f991 400e 	ldrsb.w	r4, [r1, #14]
 80053e8:	f993 200e 	ldrsb.w	r2, [r3, #14]
 80053ec:	4294      	cmp	r4, r2
 80053ee:	da06      	bge.n	80053fe <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
 80053f4:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
 80053fa:	6059      	str	r1, [r3, #4]
 80053fc:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
 80053fe:	6842      	ldr	r2, [r0, #4]
 8005400:	4293      	cmp	r3, r2
 8005402:	d002      	beq.n	800540a <_priq_dumb_add+0x32>
 8005404:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1eb      	bne.n	80053e2 <_priq_dumb_add+0xa>
	node->next = list;
 800540a:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
 800540c:	6843      	ldr	r3, [r0, #4]
 800540e:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
 8005410:	6843      	ldr	r3, [r0, #4]
 8005412:	6019      	str	r1, [r3, #0]
	list->tail = node;
 8005414:	6041      	str	r1, [r0, #4]
 8005416:	bd10      	pop	{r4, pc}

08005418 <_add_thread_to_ready_q>:
{
 8005418:	b538      	push	{r3, r4, r5, lr}
 800541a:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
 800541c:	f7ff ff18 	bl	8005250 <k_spin_lock.isra.10>
		_priq_run_add(&_kernel.ready_q.runq, thread);
 8005420:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
 8005422:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
 8005424:	4806      	ldr	r0, [pc, #24]	; (8005440 <_add_thread_to_ready_q+0x28>)
 8005426:	f7ff ffd7 	bl	80053d8 <_priq_dumb_add>
	thread->base.thread_state |= states;
 800542a:	7b63      	ldrb	r3, [r4, #13]
 800542c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005430:	7363      	strb	r3, [r4, #13]
		update_cache(0);
 8005432:	2000      	movs	r0, #0
 8005434:	f7ff ff14 	bl	8005260 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8005438:	f385 8811 	msr	BASEPRI, r5
 800543c:	bd38      	pop	{r3, r4, r5, pc}
 800543e:	bf00      	nop
 8005440:	20000314 	.word	0x20000314

08005444 <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
 8005444:	7b42      	ldrb	r2, [r0, #13]
 8005446:	06d2      	lsls	r2, r2, #27
 8005448:	d104      	bne.n	8005454 <_ready_thread+0x10>
 800544a:	6a03      	ldr	r3, [r0, #32]
	if (_is_thread_ready(thread)) {
 800544c:	3301      	adds	r3, #1
 800544e:	d101      	bne.n	8005454 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
 8005450:	f7ff bfe2 	b.w	8005418 <_add_thread_to_ready_q>
 8005454:	4770      	bx	lr

08005456 <z_thread_timeout>:
{
 8005456:	b538      	push	{r3, r4, r5, lr}
	if (th->base.pended_on != NULL) {
 8005458:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
 800545c:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
 800545e:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
 8005462:	b113      	cbz	r3, 800546a <z_thread_timeout+0x14>
		_unpend_thread_no_timeout(th);
 8005464:	4628      	mov	r0, r5
 8005466:	f7ff ff65 	bl	8005334 <_unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800546a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 800546e:	f023 0304 	bic.w	r3, r3, #4
 8005472:	f804 3c0b 	strb.w	r3, [r4, #-11]
	_ready_thread(th);
 8005476:	4628      	mov	r0, r5
}
 8005478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_ready_thread(th);
 800547c:	f7ff bfe2 	b.w	8005444 <_ready_thread>

08005480 <_move_thread_to_end_of_prio_q>:
{
 8005480:	b570      	push	{r4, r5, r6, lr}
 8005482:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
 8005484:	f7ff fee4 	bl	8005250 <k_spin_lock.isra.10>
		_priq_run_add(&_kernel.ready_q.runq, thread);
 8005488:	4d0b      	ldr	r5, [pc, #44]	; (80054b8 <_move_thread_to_end_of_prio_q+0x38>)
	LOCKED(&sched_lock) {
 800548a:	4606      	mov	r6, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
 800548c:	4620      	mov	r0, r4
 800548e:	f7ff fec7 	bl	8005220 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
 8005492:	4621      	mov	r1, r4
 8005494:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005498:	f7ff ff9e 	bl	80053d8 <_priq_dumb_add>
	thread->base.thread_state |= states;
 800549c:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
 800549e:	68a8      	ldr	r0, [r5, #8]
 80054a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054a4:	7363      	strb	r3, [r4, #13]
 80054a6:	1b03      	subs	r3, r0, r4
 80054a8:	4258      	negs	r0, r3
 80054aa:	4158      	adcs	r0, r3
 80054ac:	f7ff fed8 	bl	8005260 <update_cache>
 80054b0:	f386 8811 	msr	BASEPRI, r6
 80054b4:	bd70      	pop	{r4, r5, r6, pc}
 80054b6:	bf00      	nop
 80054b8:	200002f0 	.word	0x200002f0

080054bc <z_time_slice>:
	if (slice_time && sliceable(_current)) {
 80054bc:	4b11      	ldr	r3, [pc, #68]	; (8005504 <z_time_slice+0x48>)
 80054be:	681b      	ldr	r3, [r3, #0]
{
 80054c0:	b510      	push	{r4, lr}
	if (slice_time && sliceable(_current)) {
 80054c2:	b1f3      	cbz	r3, 8005502 <z_time_slice+0x46>
 80054c4:	4910      	ldr	r1, [pc, #64]	; (8005508 <z_time_slice+0x4c>)
 80054c6:	688b      	ldr	r3, [r1, #8]
		&& !_is_thread_timeout_active(t);
 80054c8:	89da      	ldrh	r2, [r3, #14]
 80054ca:	2a7f      	cmp	r2, #127	; 0x7f
 80054cc:	d819      	bhi.n	8005502 <z_time_slice+0x46>
		&& !_is_prio_higher(t->base.prio, slice_max_prio)
 80054ce:	4a0f      	ldr	r2, [pc, #60]	; (800550c <z_time_slice+0x50>)
 80054d0:	f993 400e 	ldrsb.w	r4, [r3, #14]
 80054d4:	6812      	ldr	r2, [r2, #0]
 80054d6:	4294      	cmp	r4, r2
 80054d8:	db13      	blt.n	8005502 <z_time_slice+0x46>
	return thread == _idle_thread;
 80054da:	4a0d      	ldr	r2, [pc, #52]	; (8005510 <z_time_slice+0x54>)
		&& !_is_idle(t)
 80054dc:	6812      	ldr	r2, [r2, #0]
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00f      	beq.n	8005502 <z_time_slice+0x46>
		&& !_is_thread_timeout_active(t);
 80054e2:	6a1a      	ldr	r2, [r3, #32]
 80054e4:	3201      	adds	r2, #1
 80054e6:	d10c      	bne.n	8005502 <z_time_slice+0x46>
		if (ticks >= _current_cpu->slice_ticks) {
 80054e8:	690a      	ldr	r2, [r1, #16]
 80054ea:	4282      	cmp	r2, r0
 80054ec:	dc06      	bgt.n	80054fc <z_time_slice+0x40>
			_move_thread_to_end_of_prio_q(_current);
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7ff ffc6 	bl	8005480 <_move_thread_to_end_of_prio_q>
}
 80054f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
 80054f8:	f7ff be98 	b.w	800522c <reset_time_slice>
			_current_cpu->slice_ticks -= ticks;
 80054fc:	1a12      	subs	r2, r2, r0
 80054fe:	610a      	str	r2, [r1, #16]
}
 8005500:	bd10      	pop	{r4, pc}
 8005502:	bd10      	pop	{r4, pc}
 8005504:	20000320 	.word	0x20000320
 8005508:	200002f0 	.word	0x200002f0
 800550c:	2000031c 	.word	0x2000031c
 8005510:	0800684c 	.word	0x0800684c

08005514 <pend>:
{
 8005514:	b570      	push	{r4, r5, r6, lr}
 8005516:	4605      	mov	r5, r0
 8005518:	460e      	mov	r6, r1
 800551a:	4614      	mov	r4, r2
	_remove_thread_from_ready_q(thread);
 800551c:	f7ff fee2 	bl	80052e4 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
 8005520:	7b6b      	ldrb	r3, [r5, #13]
 8005522:	f043 0302 	orr.w	r3, r3, #2
 8005526:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
 8005528:	b126      	cbz	r6, 8005534 <pend+0x20>
		thread->base.pended_on = wait_q;
 800552a:	60ae      	str	r6, [r5, #8]
		_priq_wait_add(&wait_q->waitq, thread);
 800552c:	4629      	mov	r1, r5
 800552e:	4630      	mov	r0, r6
 8005530:	f7ff ff52 	bl	80053d8 <_priq_dumb_add>
	if (timeout != K_FOREVER) {
 8005534:	1c63      	adds	r3, r4, #1
 8005536:	d00b      	beq.n	8005550 <pend+0x3c>
 8005538:	3409      	adds	r4, #9
 800553a:	220a      	movs	r2, #10
	_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 800553c:	f105 0018 	add.w	r0, r5, #24
 8005540:	fb94 f2f2 	sdiv	r2, r4, r2
 8005544:	4903      	ldr	r1, [pc, #12]	; (8005554 <pend+0x40>)
 8005546:	3201      	adds	r2, #1
}
 8005548:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800554c:	f000 ba10 	b.w	8005970 <_add_timeout>
 8005550:	bd70      	pop	{r4, r5, r6, pc}
 8005552:	bf00      	nop
 8005554:	08005457 	.word	0x08005457

08005558 <_pend_current_thread>:
{
 8005558:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
 800555a:	4b05      	ldr	r3, [pc, #20]	; (8005570 <_pend_current_thread+0x18>)
{
 800555c:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
 800555e:	6898      	ldr	r0, [r3, #8]
 8005560:	f7ff ffd8 	bl	8005514 <pend>
 8005564:	4620      	mov	r0, r4
}
 8005566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800556a:	f7fe bd83 	b.w	8004074 <__swap>
 800556e:	bf00      	nop
 8005570:	200002f0 	.word	0x200002f0

08005574 <_sched_init>:
	list->head = (sys_dnode_t *)list;
 8005574:	4b04      	ldr	r3, [pc, #16]	; (8005588 <_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8005576:	2100      	movs	r1, #0
 8005578:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800557c:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
 800557e:	629a      	str	r2, [r3, #40]	; 0x28
 8005580:	4608      	mov	r0, r1
 8005582:	f7ff be93 	b.w	80052ac <k_sched_time_slice_set>
 8005586:	bf00      	nop
 8005588:	200002f0 	.word	0x200002f0

0800558c <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
 800558c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
 800558e:	4c12      	ldr	r4, [pc, #72]	; (80055d8 <_impl_k_yield+0x4c>)
 8005590:	4b12      	ldr	r3, [pc, #72]	; (80055dc <_impl_k_yield+0x50>)
 8005592:	68a2      	ldr	r2, [r4, #8]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d00f      	beq.n	80055ba <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
 800559a:	f7ff fe59 	bl	8005250 <k_spin_lock.isra.10>
 800559e:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
 80055a0:	68a0      	ldr	r0, [r4, #8]
 80055a2:	f7ff fe3d 	bl	8005220 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
 80055a6:	68a1      	ldr	r1, [r4, #8]
 80055a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80055ac:	f7ff ff14 	bl	80053d8 <_priq_dumb_add>
			update_cache(1);
 80055b0:	2001      	movs	r0, #1
 80055b2:	f7ff fe55 	bl	8005260 <update_cache>
 80055b6:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	(void)_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
 80055ba:	6a22      	ldr	r2, [r4, #32]
 80055bc:	68a3      	ldr	r3, [r4, #8]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d009      	beq.n	80055d6 <_impl_k_yield+0x4a>
	__asm__ volatile(
 80055c2:	f04f 0310 	mov.w	r3, #16
 80055c6:	f3ef 8011 	mrs	r0, BASEPRI
 80055ca:	f383 8811 	msr	BASEPRI, r3
		(void)_Swap(irq_lock());
	}
#endif
}
 80055ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055d2:	f7fe bd4f 	b.w	8004074 <__swap>
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	200002f0 	.word	0x200002f0
 80055dc:	0800684c 	.word	0x0800684c

080055e0 <_impl_k_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

s32_t _impl_k_sleep(s32_t duration)
{
 80055e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
 80055e2:	4604      	mov	r4, r0
 80055e4:	b918      	cbnz	r0, 80055ee <_impl_k_sleep+0xe>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
 80055e6:	f7ff ffd1 	bl	800558c <_impl_k_yield>
		return __ticks_to_ms(ticks);
	}
#endif

	return 0;
}
 80055ea:	4620      	mov	r0, r4
 80055ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055ee:	200a      	movs	r0, #10
 80055f0:	3409      	adds	r4, #9
 80055f2:	fb94 f4f0 	sdiv	r4, r4, r0
	expected_wakeup_time = ticks + z_tick_get_32();
 80055f6:	f000 fa6d 	bl	8005ad4 <z_tick_get_32>
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
 80055fa:	3401      	adds	r4, #1
	expected_wakeup_time = ticks + z_tick_get_32();
 80055fc:	1825      	adds	r5, r4, r0
 80055fe:	f04f 0310 	mov.w	r3, #16
 8005602:	f3ef 8711 	mrs	r7, BASEPRI
 8005606:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
 800560a:	4e0f      	ldr	r6, [pc, #60]	; (8005648 <_impl_k_sleep+0x68>)
 800560c:	68b0      	ldr	r0, [r6, #8]
 800560e:	f7ff fe69 	bl	80052e4 <_remove_thread_from_ready_q>
 8005612:	68b0      	ldr	r0, [r6, #8]
 8005614:	490d      	ldr	r1, [pc, #52]	; (800564c <_impl_k_sleep+0x6c>)
 8005616:	4622      	mov	r2, r4
 8005618:	3018      	adds	r0, #24
 800561a:	f000 f9a9 	bl	8005970 <_add_timeout>
 800561e:	4638      	mov	r0, r7
 8005620:	f7fe fd28 	bl	8004074 <__swap>
	ticks = expected_wakeup_time - z_tick_get_32();
 8005624:	f000 fa56 	bl	8005ad4 <z_tick_get_32>
 8005628:	1a28      	subs	r0, r5, r0
	if (ticks > 0) {
 800562a:	2800      	cmp	r0, #0
 800562c:	dd09      	ble.n	8005642 <_impl_k_sleep+0x62>
#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
#else
	/* simple multiplication keeps precision */
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
 800562e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005632:	2264      	movs	r2, #100	; 0x64
 8005634:	2300      	movs	r3, #0
 8005636:	fb80 0101 	smull	r0, r1, r0, r1
 800563a:	f7fa fdc1 	bl	80001c0 <__aeabi_uldivmod>
 800563e:	4604      	mov	r4, r0
		return __ticks_to_ms(ticks);
 8005640:	e7d3      	b.n	80055ea <_impl_k_sleep+0xa>
	return 0;
 8005642:	2400      	movs	r4, #0
 8005644:	e7d1      	b.n	80055ea <_impl_k_sleep+0xa>
 8005646:	bf00      	nop
 8005648:	200002f0 	.word	0x200002f0
 800564c:	08005457 	.word	0x08005457

08005650 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
 8005650:	4b01      	ldr	r3, [pc, #4]	; (8005658 <_impl_k_current_get+0x8>)
 8005652:	6898      	ldr	r0, [r3, #8]
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	200002f0 	.word	0x200002f0

0800565c <_impl_k_sem_init>:
{
	__ASSERT(limit != 0U, "limit cannot be zero");
	__ASSERT(initial_count <= limit, "count cannot be greater than limit");

	sys_trace_void(SYS_TRACE_ID_SEMA_INIT);
	sem->count = initial_count;
 800565c:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
 800565e:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
 8005660:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 8005662:	6040      	str	r0, [r0, #4]
 8005664:	4770      	bx	lr

08005666 <_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void _impl_k_sem_give(struct k_sem *sem)
{
 8005666:	b570      	push	{r4, r5, r6, lr}
 8005668:	4604      	mov	r4, r0
 800566a:	f04f 0310 	mov.w	r3, #16
 800566e:	f3ef 8611 	mrs	r6, BASEPRI
 8005672:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
 8005676:	f7ff fe6e 	bl	8005356 <_unpend_first_thread>
	if (thread != NULL) {
 800567a:	4605      	mov	r5, r0
 800567c:	b170      	cbz	r0, 800569c <_impl_k_sem_give+0x36>
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
 800567e:	7b43      	ldrb	r3, [r0, #13]
 8005680:	06db      	lsls	r3, r3, #27
 8005682:	d104      	bne.n	800568e <_impl_k_sem_give+0x28>
 8005684:	6a03      	ldr	r3, [r0, #32]
	if (_is_thread_ready(thread)) {
 8005686:	3301      	adds	r3, #1
 8005688:	d101      	bne.n	800568e <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
 800568a:	f7ff fec5 	bl	8005418 <_add_thread_to_ready_q>
 800568e:	2300      	movs	r3, #0
 8005690:	66ab      	str	r3, [r5, #104]	; 0x68
	u32_t key = irq_lock();

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	_reschedule(key);
 8005692:	4630      	mov	r0, r6
}
 8005694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
 8005698:	f7ff be6c 	b.w	8005374 <_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800569c:	68a3      	ldr	r3, [r4, #8]
 800569e:	68e2      	ldr	r2, [r4, #12]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	bf18      	it	ne
 80056a4:	3301      	addne	r3, #1
 80056a6:	60a3      	str	r3, [r4, #8]
 80056a8:	e7f3      	b.n	8005692 <_impl_k_sem_give+0x2c>

080056aa <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
 80056aa:	b410      	push	{r4}
 80056ac:	460a      	mov	r2, r1
 80056ae:	4604      	mov	r4, r0
 80056b0:	f04f 0310 	mov.w	r3, #16
 80056b4:	f3ef 8011 	mrs	r0, BASEPRI
 80056b8:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(((_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	u32_t key = irq_lock();

	if (likely(sem->count > 0U)) {
 80056bc:	68a3      	ldr	r3, [r4, #8]
 80056be:	b133      	cbz	r3, 80056ce <_impl_k_sem_take+0x24>
		sem->count--;
 80056c0:	3b01      	subs	r3, #1
 80056c2:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80056c4:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
 80056c8:	2000      	movs	r0, #0
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
 80056ca:	bc10      	pop	{r4}
 80056cc:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
 80056ce:	b921      	cbnz	r1, 80056da <_impl_k_sem_take+0x30>
 80056d0:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
 80056d4:	f06f 000f 	mvn.w	r0, #15
 80056d8:	e7f7      	b.n	80056ca <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
 80056da:	4621      	mov	r1, r4
}
 80056dc:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
 80056de:	f7ff bf3b 	b.w	8005558 <_pend_current_thread>
	...

080056e4 <schedule_new_thread.part.8>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
 80056e4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80056e6:	f04f 0310 	mov.w	r3, #16
 80056ea:	f3ef 8411 	mrs	r4, BASEPRI
 80056ee:	f383 8811 	msr	BASEPRI, r3
	return (s32_t)ceiling_fraction(ms, ms_per_tick);
 80056f2:	f101 0209 	add.w	r2, r1, #9
 80056f6:	3018      	adds	r0, #24
 80056f8:	210a      	movs	r1, #10
 80056fa:	fb92 f2f1 	sdiv	r2, r2, r1
 80056fe:	4903      	ldr	r1, [pc, #12]	; (800570c <schedule_new_thread.part.8+0x28>)
 8005700:	3201      	adds	r2, #1
 8005702:	f000 f935 	bl	8005970 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8005706:	f384 8811 	msr	BASEPRI, r4
 800570a:	bd10      	pop	{r4, pc}
 800570c:	08005457 	.word	0x08005457

08005710 <_ready_thread>:
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
 8005710:	7b42      	ldrb	r2, [r0, #13]
 8005712:	06d2      	lsls	r2, r2, #27
 8005714:	d104      	bne.n	8005720 <_ready_thread+0x10>
 8005716:	6a03      	ldr	r3, [r0, #32]
	if (_is_thread_ready(thread)) {
 8005718:	3301      	adds	r3, #1
 800571a:	d101      	bne.n	8005720 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
 800571c:	f7ff be7c 	b.w	8005418 <_add_thread_to_ready_q>
 8005720:	4770      	bx	lr
	...

08005724 <k_is_in_isr>:
 8005724:	f3ef 8005 	mrs	r0, IPSR
 8005728:	280d      	cmp	r0, #13
 800572a:	d807      	bhi.n	800573c <k_is_in_isr+0x18>
 800572c:	b138      	cbz	r0, 800573e <k_is_in_isr+0x1a>
 800572e:	4b04      	ldr	r3, [pc, #16]	; (8005740 <k_is_in_isr+0x1c>)
 8005730:	6858      	ldr	r0, [r3, #4]
 8005732:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
 8005736:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 800573a:	4770      	bx	lr
 800573c:	2001      	movs	r0, #1
}
 800573e:	4770      	bx	lr
 8005740:	e000ed00 	.word	0xe000ed00

08005744 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
 8005744:	4b02      	ldr	r3, [pc, #8]	; (8005750 <_is_thread_essential+0xc>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	7b18      	ldrb	r0, [r3, #12]
}
 800574a:	f000 0001 	and.w	r0, r0, #1
 800574e:	4770      	bx	lr
 8005750:	200002f0 	.word	0x200002f0

08005754 <_impl_k_thread_start>:
{
 8005754:	b510      	push	{r4, lr}
	__asm__ volatile(
 8005756:	f04f 0310 	mov.w	r3, #16
 800575a:	f3ef 8411 	mrs	r4, BASEPRI
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	7b43      	ldrb	r3, [r0, #13]
	if (_has_thread_started(thread)) {
 8005764:	0759      	lsls	r1, r3, #29
 8005766:	d402      	bmi.n	800576e <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8005768:	f384 8811 	msr	BASEPRI, r4
 800576c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800576e:	f023 0304 	bic.w	r3, r3, #4
 8005772:	7343      	strb	r3, [r0, #13]
	_ready_thread(thread);
 8005774:	f7ff ffcc 	bl	8005710 <_ready_thread>
	_reschedule(key);
 8005778:	4620      	mov	r0, r4
}
 800577a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
 800577e:	f7ff bdf9 	b.w	8005374 <_reschedule>
	...

08005784 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
 8005784:	b530      	push	{r4, r5, lr}
 8005786:	b087      	sub	sp, #28
 8005788:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800578a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800578c:	9504      	str	r5, [sp, #16]
 800578e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005790:	9503      	str	r5, [sp, #12]
 8005792:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005794:	9502      	str	r5, [sp, #8]
 8005796:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005798:	9501      	str	r5, [sp, #4]
 800579a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800579c:	9500      	str	r5, [sp, #0]
 800579e:	f7fe fe1f 	bl	80043e0 <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 80057a2:	4b04      	ldr	r3, [pc, #16]	; (80057b4 <_setup_new_thread+0x30>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	b913      	cbnz	r3, 80057ae <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 80057a8:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
 80057aa:	b007      	add	sp, #28
 80057ac:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
 80057ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b0:	e7fa      	b.n	80057a8 <_setup_new_thread+0x24>
 80057b2:	bf00      	nop
 80057b4:	200002f0 	.word	0x200002f0

080057b8 <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
 80057b8:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 80057ba:	b510      	push	{r4, lr}
 80057bc:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
 80057be:	b103      	cbz	r3, 80057c2 <_k_thread_single_abort+0xa>
		thread->fn_abort();
 80057c0:	4798      	blx	r3
 80057c2:	7b63      	ldrb	r3, [r4, #13]
	return !((_is_thread_prevented_from_running(thread)) != 0 ||
 80057c4:	06da      	lsls	r2, r3, #27
 80057c6:	d10a      	bne.n	80057de <_k_thread_single_abort+0x26>
 80057c8:	6a22      	ldr	r2, [r4, #32]
	}

	if (_is_thread_ready(thread)) {
 80057ca:	3201      	adds	r2, #1
 80057cc:	d107      	bne.n	80057de <_k_thread_single_abort+0x26>
		_remove_thread_from_ready_q(thread);
 80057ce:	4620      	mov	r0, r4
 80057d0:	f7ff fd88 	bl	80052e4 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			(void)_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
 80057d4:	7b63      	ldrb	r3, [r4, #13]
 80057d6:	f043 0308 	orr.w	r3, r3, #8
 80057da:	7363      	strb	r3, [r4, #13]
 80057dc:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
 80057de:	079b      	lsls	r3, r3, #30
 80057e0:	d502      	bpl.n	80057e8 <_k_thread_single_abort+0x30>
			_unpend_thread_no_timeout(thread);
 80057e2:	4620      	mov	r0, r4
 80057e4:	f7ff fda6 	bl	8005334 <_unpend_thread_no_timeout>
		if (_is_thread_timeout_active(thread)) {
 80057e8:	6a23      	ldr	r3, [r4, #32]
 80057ea:	3301      	adds	r3, #1
 80057ec:	d0f2      	beq.n	80057d4 <_k_thread_single_abort+0x1c>
	return _abort_timeout(&thread->base.timeout);
 80057ee:	f104 0018 	add.w	r0, r4, #24
 80057f2:	f000 f87f 	bl	80058f4 <_abort_timeout>
 80057f6:	e7ed      	b.n	80057d4 <_k_thread_single_abort+0x1c>

080057f8 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
 80057f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
 80057fa:	4f22      	ldr	r7, [pc, #136]	; (8005884 <_init_static_threads+0x8c>)
 80057fc:	4d22      	ldr	r5, [pc, #136]	; (8005888 <_init_static_threads+0x90>)
{
 80057fe:	b087      	sub	sp, #28
 8005800:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
 8005802:	42bd      	cmp	r5, r7
 8005804:	f105 0430 	add.w	r4, r5, #48	; 0x30
 8005808:	d314      	bcc.n	8005834 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
 800580a:	4b20      	ldr	r3, [pc, #128]	; (800588c <_init_static_threads+0x94>)
 800580c:	689a      	ldr	r2, [r3, #8]
 800580e:	7bd3      	ldrb	r3, [r2, #15]
 8005810:	3b01      	subs	r3, #1
 8005812:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8005814:	f04f 0310 	mov.w	r3, #16
 8005818:	f3ef 8511 	mrs	r5, BASEPRI
 800581c:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
 8005820:	4c19      	ldr	r4, [pc, #100]	; (8005888 <_init_static_threads+0x90>)
 8005822:	42b4      	cmp	r4, r6
 8005824:	d322      	bcc.n	800586c <_init_static_threads+0x74>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8005826:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
 800582a:	b007      	add	sp, #28
 800582c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8005830:	f7ff bdb8 	b.w	80053a4 <k_sched_unlock>
		_setup_new_thread(
 8005834:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005838:	9305      	str	r3, [sp, #20]
 800583a:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800583e:	9304      	str	r3, [sp, #16]
 8005840:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8005844:	9303      	str	r3, [sp, #12]
 8005846:	f854 3c18 	ldr.w	r3, [r4, #-24]
 800584a:	9302      	str	r3, [sp, #8]
 800584c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8005850:	9301      	str	r3, [sp, #4]
 8005852:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
 800585c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800585e:	f7ff ff91 	bl	8005784 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8005862:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8005866:	64dd      	str	r5, [r3, #76]	; 0x4c
 8005868:	4625      	mov	r5, r4
 800586a:	e7ca      	b.n	8005802 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
 800586c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800586e:	1c4b      	adds	r3, r1, #1
 8005870:	d003      	beq.n	800587a <_init_static_threads+0x82>
			schedule_new_thread(thread_data->init_thread,
 8005872:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
 8005874:	b919      	cbnz	r1, 800587e <_init_static_threads+0x86>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
 8005876:	f7ff ff6d 	bl	8005754 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 800587a:	3430      	adds	r4, #48	; 0x30
 800587c:	e7d1      	b.n	8005822 <_init_static_threads+0x2a>
 800587e:	f7ff ff31 	bl	80056e4 <schedule_new_thread.part.8>
 8005882:	e7fa      	b.n	800587a <_init_static_threads+0x82>
 8005884:	20001570 	.word	0x20001570
 8005888:	20001570 	.word	0x20001570
 800588c:	200002f0 	.word	0x200002f0

08005890 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
 8005890:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
 8005892:	2300      	movs	r3, #0
 8005894:	73c3      	strb	r3, [r0, #15]
	t->dticks = _INACTIVE;
 8005896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	thread_base->thread_state = (u8_t)initial_state;
 800589a:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
 800589c:	7381      	strb	r1, [r0, #14]
 800589e:	6203      	str	r3, [r0, #32]
 80058a0:	4770      	bx	lr
	...

080058a4 <elapsed>:
	t->dticks = _INACTIVE;
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
 80058a4:	4b03      	ldr	r3, [pc, #12]	; (80058b4 <elapsed+0x10>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	b90b      	cbnz	r3, 80058ae <elapsed+0xa>
 80058aa:	f7fe bbad 	b.w	8004008 <z_clock_elapsed>
}
 80058ae:	2000      	movs	r0, #0
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	20000324 	.word	0x20000324

080058b8 <k_spin_lock.isra.1>:
	__asm__ volatile(
 80058b8:	f04f 0310 	mov.w	r3, #16
 80058bc:	f3ef 8011 	mrs	r0, BASEPRI
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	4770      	bx	lr
	...

080058c8 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80058c8:	b148      	cbz	r0, 80058de <remove_timeout+0x16>
	return (node == list->tail) ? NULL : node->next;
 80058ca:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <remove_timeout+0x28>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	4298      	cmp	r0, r3
 80058d0:	d005      	beq.n	80058de <remove_timeout+0x16>
 80058d2:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 80058d4:	b11b      	cbz	r3, 80058de <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	6881      	ldr	r1, [r0, #8]
 80058da:	440a      	add	r2, r1
 80058dc:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
 80058de:	e890 000c 	ldmia.w	r0, {r2, r3}
 80058e2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 80058e4:	6802      	ldr	r2, [r0, #0]
 80058e6:	6053      	str	r3, [r2, #4]
	t->dticks = _INACTIVE;
 80058e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058ec:	6083      	str	r3, [r0, #8]
 80058ee:	4770      	bx	lr
 80058f0:	20001484 	.word	0x20001484

080058f4 <_abort_timeout>:
		}
	}
}

int _abort_timeout(struct _timeout *to)
{
 80058f4:	b510      	push	{r4, lr}
 80058f6:	4602      	mov	r2, r0
	int ret = _INACTIVE;

	LOCKED(&timeout_lock) {
 80058f8:	f7ff ffde 	bl	80058b8 <k_spin_lock.isra.1>
 80058fc:	4604      	mov	r4, r0
		if (to->dticks != _INACTIVE) {
 80058fe:	6890      	ldr	r0, [r2, #8]
 8005900:	1c43      	adds	r3, r0, #1
 8005902:	d003      	beq.n	800590c <_abort_timeout+0x18>
			remove_timeout(to);
 8005904:	4610      	mov	r0, r2
 8005906:	f7ff ffdf 	bl	80058c8 <remove_timeout>
			ret = 0;
 800590a:	2000      	movs	r0, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 800590c:	f384 8811 	msr	BASEPRI, r4
		}
	}

	return ret;
}
 8005910:	bd10      	pop	{r4, pc}
	...

08005914 <_get_next_timeout_expiry>:
}

s32_t _get_next_timeout_expiry(void)
{
	s32_t ret = 0;
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
 8005914:	4b13      	ldr	r3, [pc, #76]	; (8005964 <_get_next_timeout_expiry+0x50>)
 8005916:	781b      	ldrb	r3, [r3, #0]
{
 8005918:	b570      	push	{r4, r5, r6, lr}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
 800591a:	2b00      	cmp	r3, #0
 800591c:	bf14      	ite	ne
 800591e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8005922:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000

	LOCKED(&timeout_lock) {
 8005926:	f7ff ffc7 	bl	80058b8 <k_spin_lock.isra.1>
	return list->head == list;
 800592a:	4b0f      	ldr	r3, [pc, #60]	; (8005968 <_get_next_timeout_expiry+0x54>)
 800592c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800592e:	429c      	cmp	r4, r3
 8005930:	4606      	mov	r6, r0
 8005932:	d00a      	beq.n	800594a <_get_next_timeout_expiry+0x36>
		struct _timeout *to = first();

		ret = to == NULL ? maxw : max(0, to->dticks - elapsed());
 8005934:	b14c      	cbz	r4, 800594a <_get_next_timeout_expiry+0x36>
 8005936:	68a5      	ldr	r5, [r4, #8]
 8005938:	f7ff ffb4 	bl	80058a4 <elapsed>
 800593c:	1a28      	subs	r0, r5, r0
 800593e:	2800      	cmp	r0, #0
 8005940:	db0d      	blt.n	800595e <_get_next_timeout_expiry+0x4a>
 8005942:	68a4      	ldr	r4, [r4, #8]
 8005944:	f7ff ffae 	bl	80058a4 <elapsed>
 8005948:	1a22      	subs	r2, r4, r0
 800594a:	f386 8811 	msr	BASEPRI, r6
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800594e:	4b07      	ldr	r3, [pc, #28]	; (800596c <_get_next_timeout_expiry+0x58>)
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	b113      	cbz	r3, 800595a <_get_next_timeout_expiry+0x46>
 8005954:	429a      	cmp	r2, r3
 8005956:	bfa8      	it	ge
 8005958:	461a      	movge	r2, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 800595a:	4610      	mov	r0, r2
 800595c:	bd70      	pop	{r4, r5, r6, pc}
		ret = to == NULL ? maxw : max(0, to->dticks - elapsed());
 800595e:	2200      	movs	r2, #0
 8005960:	e7f3      	b.n	800594a <_get_next_timeout_expiry+0x36>
 8005962:	bf00      	nop
 8005964:	20000328 	.word	0x20000328
 8005968:	20001484 	.word	0x20001484
 800596c:	200002f0 	.word	0x200002f0

08005970 <_add_timeout>:
{
 8005970:	b570      	push	{r4, r5, r6, lr}
	to->fn = fn;
 8005972:	60c1      	str	r1, [r0, #12]
{
 8005974:	4616      	mov	r6, r2
 8005976:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 8005978:	f7ff ff9e 	bl	80058b8 <k_spin_lock.isra.1>
 800597c:	4605      	mov	r5, r0
		to->dticks = ticks + elapsed();
 800597e:	f7ff ff91 	bl	80058a4 <elapsed>
	return list->head == list;
 8005982:	4a18      	ldr	r2, [pc, #96]	; (80059e4 <_add_timeout+0x74>)
 8005984:	6813      	ldr	r3, [r2, #0]
 8005986:	2e01      	cmp	r6, #1
 8005988:	bfac      	ite	ge
 800598a:	1980      	addge	r0, r0, r6
 800598c:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800598e:	4293      	cmp	r3, r2
 8005990:	60a0      	str	r0, [r4, #8]
 8005992:	d001      	beq.n	8005998 <_add_timeout+0x28>
 8005994:	6856      	ldr	r6, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
 8005996:	b933      	cbnz	r3, 80059a6 <_add_timeout+0x36>
	node->next = list;
 8005998:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
 800599a:	6853      	ldr	r3, [r2, #4]
 800599c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 800599e:	6853      	ldr	r3, [r2, #4]
 80059a0:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80059a2:	6054      	str	r4, [r2, #4]
 80059a4:	e00b      	b.n	80059be <_add_timeout+0x4e>
			if (t->dticks > to->dticks) {
 80059a6:	6898      	ldr	r0, [r3, #8]
 80059a8:	68a1      	ldr	r1, [r4, #8]
 80059aa:	4288      	cmp	r0, r1
 80059ac:	dd14      	ble.n	80059d8 <_add_timeout+0x68>
				t->dticks -= to->dticks;
 80059ae:	1a41      	subs	r1, r0, r1
 80059b0:	6099      	str	r1, [r3, #8]
		node->prev = insert_point->prev;
 80059b2:	6859      	ldr	r1, [r3, #4]
 80059b4:	6061      	str	r1, [r4, #4]
		node->next = insert_point;
 80059b6:	6023      	str	r3, [r4, #0]
		insert_point->prev->next = node;
 80059b8:	6859      	ldr	r1, [r3, #4]
 80059ba:	600c      	str	r4, [r1, #0]
		insert_point->prev = node;
 80059bc:	605c      	str	r4, [r3, #4]
	return list->head == list;
 80059be:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d006      	beq.n	80059d2 <_add_timeout+0x62>
		if (to == first()) {
 80059c4:	429c      	cmp	r4, r3
 80059c6:	d104      	bne.n	80059d2 <_add_timeout+0x62>
			z_clock_set_timeout(_get_next_timeout_expiry(), false);
 80059c8:	f7ff ffa4 	bl	8005914 <_get_next_timeout_expiry>
 80059cc:	2100      	movs	r1, #0
 80059ce:	f7fe fad3 	bl	8003f78 <z_clock_set_timeout>
 80059d2:	f385 8811 	msr	BASEPRI, r5
}
 80059d6:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
 80059d8:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 80059da:	42b3      	cmp	r3, r6
 80059dc:	60a1      	str	r1, [r4, #8]
 80059de:	d0db      	beq.n	8005998 <_add_timeout+0x28>
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	e7d8      	b.n	8005996 <_add_timeout+0x26>
 80059e4:	20001484 	.word	0x20001484

080059e8 <z_clock_announce>:
{
 80059e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	announce_remaining = ticks;
 80059ec:	4d21      	ldr	r5, [pc, #132]	; (8005a74 <z_clock_announce+0x8c>)
	return list->head == list;
 80059ee:	4e22      	ldr	r6, [pc, #136]	; (8005a78 <z_clock_announce+0x90>)
					curr_tick += t->dticks;
 80059f0:	4f22      	ldr	r7, [pc, #136]	; (8005a7c <z_clock_announce+0x94>)
{
 80059f2:	4604      	mov	r4, r0
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80059f4:	f04f 0800 	mov.w	r8, #0
	z_time_slice(ticks);
 80059f8:	f7ff fd60 	bl	80054bc <z_time_slice>
	announce_remaining = ticks;
 80059fc:	602c      	str	r4, [r5, #0]
		LOCKED(&timeout_lock) {
 80059fe:	f7ff ff5b 	bl	80058b8 <k_spin_lock.isra.1>
	return list->head == list;
 8005a02:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005a04:	42b4      	cmp	r4, r6
 8005a06:	4681      	mov	r9, r0
 8005a08:	d01b      	beq.n	8005a42 <z_clock_announce+0x5a>
			if (t != NULL) {
 8005a0a:	b18c      	cbz	r4, 8005a30 <z_clock_announce+0x48>
				if (t->dticks <= announce_remaining) {
 8005a0c:	68a1      	ldr	r1, [r4, #8]
 8005a0e:	682b      	ldr	r3, [r5, #0]
 8005a10:	4299      	cmp	r1, r3
 8005a12:	dc14      	bgt.n	8005a3e <z_clock_announce+0x56>
					announce_remaining -= t->dticks;
 8005a14:	1a5b      	subs	r3, r3, r1
 8005a16:	602b      	str	r3, [r5, #0]
					curr_tick += t->dticks;
 8005a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a1c:	1852      	adds	r2, r2, r1
 8005a1e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
					t->dticks = 0;
 8005a22:	f8c4 8008 	str.w	r8, [r4, #8]
					remove_timeout(t);
 8005a26:	4620      	mov	r0, r4
					curr_tick += t->dticks;
 8005a28:	e9c7 2300 	strd	r2, r3, [r7]
					remove_timeout(t);
 8005a2c:	f7ff ff4c 	bl	80058c8 <remove_timeout>
 8005a30:	f389 8811 	msr	BASEPRI, r9
		if (t == NULL) {
 8005a34:	b13c      	cbz	r4, 8005a46 <z_clock_announce+0x5e>
		t->fn(t);
 8005a36:	68e3      	ldr	r3, [r4, #12]
 8005a38:	4620      	mov	r0, r4
 8005a3a:	4798      	blx	r3
		LOCKED(&timeout_lock) {
 8005a3c:	e7df      	b.n	80059fe <z_clock_announce+0x16>
					t->dticks -= announce_remaining;
 8005a3e:	1ac9      	subs	r1, r1, r3
 8005a40:	60a1      	str	r1, [r4, #8]
 8005a42:	2400      	movs	r4, #0
 8005a44:	e7f4      	b.n	8005a30 <z_clock_announce+0x48>
	LOCKED(&timeout_lock) {
 8005a46:	f7ff ff37 	bl	80058b8 <k_spin_lock.isra.1>
		curr_tick += announce_remaining;
 8005a4a:	490c      	ldr	r1, [pc, #48]	; (8005a7c <z_clock_announce+0x94>)
 8005a4c:	e9d1 2300 	ldrd	r2, r3, [r1]
	LOCKED(&timeout_lock) {
 8005a50:	4606      	mov	r6, r0
		curr_tick += announce_remaining;
 8005a52:	6828      	ldr	r0, [r5, #0]
		announce_remaining = 0;
 8005a54:	602c      	str	r4, [r5, #0]
		curr_tick += announce_remaining;
 8005a56:	1812      	adds	r2, r2, r0
 8005a58:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 8005a5c:	e9c1 2300 	strd	r2, r3, [r1]
		z_clock_set_timeout(_get_next_timeout_expiry(), false);
 8005a60:	f7ff ff58 	bl	8005914 <_get_next_timeout_expiry>
 8005a64:	4621      	mov	r1, r4
 8005a66:	f7fe fa87 	bl	8003f78 <z_clock_set_timeout>
 8005a6a:	f386 8811 	msr	BASEPRI, r6
 8005a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a72:	bf00      	nop
 8005a74:	20000324 	.word	0x20000324
 8005a78:	20001484 	.word	0x20001484
 8005a7c:	20000330 	.word	0x20000330

08005a80 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	460e      	mov	r6, r1
 8005a84:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 8005a86:	f7ff ff17 	bl	80058b8 <k_spin_lock.isra.1>
 8005a8a:	4605      	mov	r5, r0
		int next = _get_next_timeout_expiry();
 8005a8c:	f7ff ff42 	bl	8005914 <_get_next_timeout_expiry>

		if ((next == K_FOREVER) || (ticks < next)) {
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d001      	beq.n	8005a98 <z_set_timeout_expiry+0x18>
 8005a94:	42a0      	cmp	r0, r4
 8005a96:	dd03      	ble.n	8005aa0 <z_set_timeout_expiry+0x20>
			z_clock_set_timeout(ticks, idle);
 8005a98:	4631      	mov	r1, r6
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f7fe fa6c 	bl	8003f78 <z_clock_set_timeout>
 8005aa0:	f385 8811 	msr	BASEPRI, r5
 8005aa4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005aa8 <z_tick_get>:
{
	can_wait_forever = 1;
}

s64_t z_tick_get(void)
{
 8005aa8:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
 8005aac:	f7ff ff04 	bl	80058b8 <k_spin_lock.isra.1>
 8005ab0:	4604      	mov	r4, r0
		t = curr_tick + z_clock_elapsed();
 8005ab2:	f7fe faa9 	bl	8004008 <z_clock_elapsed>
 8005ab6:	4b06      	ldr	r3, [pc, #24]	; (8005ad0 <z_tick_get+0x28>)
 8005ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abc:	eb12 0b00 	adds.w	fp, r2, r0
 8005ac0:	f143 0c00 	adc.w	ip, r3, #0
 8005ac4:	4658      	mov	r0, fp
 8005ac6:	4661      	mov	r1, ip
 8005ac8:	f384 8811 	msr	BASEPRI, r4
	}
	return t;
}
 8005acc:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
 8005ad0:	20000330 	.word	0x20000330

08005ad4 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
 8005ad4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
 8005ad6:	f7ff ffe7 	bl	8005aa8 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
 8005ada:	bd08      	pop	{r3, pc}

08005adc <_impl_k_uptime_get_32>:

u32_t _impl_k_uptime_get_32(void)
{
 8005adc:	b508      	push	{r3, lr}
	return __ticks_to_ms(z_tick_get_32());
 8005ade:	f7ff fff9 	bl	8005ad4 <z_tick_get_32>
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
 8005ae2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005ae6:	2264      	movs	r2, #100	; 0x64
 8005ae8:	2300      	movs	r3, #0
 8005aea:	fba0 0101 	umull	r0, r1, r0, r1
 8005aee:	f7fa fb67 	bl	80001c0 <__aeabi_uldivmod>
}
 8005af2:	bd08      	pop	{r3, pc}

08005af4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
 8005af4:	b508      	push	{r3, lr}
	__asm__ volatile(
 8005af6:	f04f 0210 	mov.w	r2, #16
 8005afa:	f3ef 8311 	mrs	r3, BASEPRI
 8005afe:	f382 8811 	msr	BASEPRI, r2
	s32_t ticks = _get_next_timeout_expiry();
 8005b02:	f7ff ff07 	bl	8005914 <_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 8005b06:	2101      	movs	r1, #1
 8005b08:	2802      	cmp	r0, #2
 8005b0a:	bfd8      	it	le
 8005b0c:	4608      	movle	r0, r1
 8005b0e:	f7ff ffb7 	bl	8005a80 <z_set_timeout_expiry>
	k_cpu_idle();
 8005b12:	f7fe fc93 	bl	800443c <k_cpu_idle>
 8005b16:	e7ee      	b.n	8005af6 <idle+0x2>

08005b18 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
 8005b18:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
 8005b1a:	4c07      	ldr	r4, [pc, #28]	; (8005b38 <init_static_pools+0x20>)
 8005b1c:	4d07      	ldr	r5, [pc, #28]	; (8005b3c <init_static_pools+0x24>)
 8005b1e:	42ac      	cmp	r4, r5
 8005b20:	d301      	bcc.n	8005b26 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
 8005b22:	2000      	movs	r0, #0
 8005b24:	bd38      	pop	{r3, r4, r5, pc}
 8005b26:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
 8005b2a:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
 8005b2c:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f7fd fa0d 	bl	8002f4e <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
 8005b34:	341c      	adds	r4, #28
 8005b36:	e7f2      	b.n	8005b1e <init_static_pools+0x6>
 8005b38:	20001570 	.word	0x20001570
 8005b3c:	20001570 	.word	0x20001570

08005b40 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
 8005b40:	4770      	bx	lr
